{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, SkipSelf, ElementRef, NgModule, IterableDiffers, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Output, ViewChild, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent, of, Observable, animationFrameScheduler, merge } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, shareReplay, switchMap } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { ArrayDataSource, DataSource } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * The injection token used to specify the virtual scrolling strategy.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nclass FixedSizeVirtualScrollStrategy {\n  /**\n   * @param {?} itemSize The size of the items in the virtually scrolling list.\n   * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize, minBufferPx, maxBufferPx) {\n    this._scrolledIndexChange = new Subject();\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     */\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /**\n     * The attached viewport.\n     */\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param {?} viewport The viewport to attach this strategy to.\n   * @return {?}\n   */\n  attach(viewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n  /**\n   * Detaches this scroll strategy from the currently attached viewport.\n   * @return {?}\n   */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n  /**\n   * Update the item size and buffer size.\n   * @param {?} itemSize The size of the items in the virtually scrolling list.\n   * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   * @return {?}\n   */\n  updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n    if (maxBufferPx < minBufferPx) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @return {?}\n   */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @return {?}\n   */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @return {?}\n   */\n  onContentRendered() {\n    /* no-op */\n  }\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @return {?}\n   */\n  onRenderedOffsetChanged() {\n    /* no-op */\n  }\n  /**\n   * Scroll to the offset for the given index.\n   * @param {?} index The index of the element to scroll to.\n   * @param {?} behavior The ScrollBehavior to use when scrolling.\n   * @return {?}\n   */\n  scrollToIndex(index, behavior) {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n  /**\n   * Update the viewport's total content size.\n   * @return {?}\n   */\n  _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n  /**\n   * Update the viewport's rendered range.\n   * @return {?}\n   */\n  _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n    /** @type {?} */\n    const scrollOffset = this._viewport.measureScrollOffset();\n    /** @type {?} */\n    const firstVisibleIndex = scrollOffset / this._itemSize;\n    /** @type {?} */\n    const renderedRange = this._viewport.getRenderedRange();\n    /** @type {?} */\n    const newRange = {\n      start: renderedRange.start,\n      end: renderedRange.end\n    };\n    /** @type {?} */\n    const viewportSize = this._viewport.getViewportSize();\n    /** @type {?} */\n    const dataLength = this._viewport.getDataLength();\n    /** @type {?} */\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      /** @type {?} */\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n    } else {\n      /** @type {?} */\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        /** @type {?} */\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n        }\n      }\n    }\n    this._viewport.setRenderedRange(newRange);\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\nclass CdkFixedSizeVirtualScroll {\n  constructor() {\n    this._itemSize = 20;\n    this._minBufferPx = 100;\n    this._maxBufferPx = 200;\n    /**\n     * The scroll strategy used by this directive.\n     */\n    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n  /**\n   * The size of the items in the list (in pixels).\n   * @return {?}\n   */\n  get itemSize() {\n    return this._itemSize;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set itemSize(value) {\n    this._itemSize = coerceNumberProperty(value);\n  }\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   * @return {?}\n   */\n  get minBufferPx() {\n    return this._minBufferPx;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set minBufferPx(value) {\n    this._minBufferPx = coerceNumberProperty(value);\n  }\n  /**\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n   * @return {?}\n   */\n  get maxBufferPx() {\n    return this._maxBufferPx;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set maxBufferPx(value) {\n    this._maxBufferPx = coerceNumberProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n}\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n  return new (t || CdkFixedSizeVirtualScroll)();\n};\nCdkFixedSizeVirtualScroll.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFixedSizeVirtualScroll,\n  selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n  inputs: {\n    itemSize: \"itemSize\",\n    minBufferPx: \"minBufferPx\",\n    maxBufferPx: \"maxBufferPx\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\nCdkFixedSizeVirtualScroll.propDecorators = {\n  itemSize: [{\n    type: Input\n  }],\n  minBufferPx: [{\n    type: Input\n  }],\n  maxBufferPx: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport[itemSize]',\n      providers: [{\n        provide: VIRTUAL_SCROLL_STRATEGY,\n        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n      }]\n    }]\n  }], function () {\n    return [];\n  }, {\n    itemSize: [{\n      type: Input\n    }],\n    minBufferPx: [{\n      type: Input\n    }],\n    maxBufferPx: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Time in ms to throttle the scrolling events by default.\n  @type {?} */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platform\n   */\n  constructor(_ngZone, _platform) {\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /**\n     * Subject for notifying that a registered scrollable reference element has been scrolled.\n     */\n    this._scrolled = new Subject();\n    /**\n     * Keeps track of the global `scroll` and `resize` subscriptions.\n     */\n    this._globalSubscription = null;\n    /**\n     * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n     */\n    this._scrolledCount = 0;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n    this.scrollContainers = new Map();\n  }\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param {?} scrollable Scrollable instance to be registered.\n   * @return {?}\n   */\n  register(scrollable) {\n    /** @type {?} */\n    const scrollSubscription = scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable));\n    this.scrollContainers.set(scrollable, scrollSubscription);\n  }\n  /**\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param {?} scrollable Scrollable instance to be deregistered.\n   * @return {?}\n   */\n  deregister(scrollable) {\n    /** @type {?} */\n    const scrollableReference = this.scrollContainers.get(scrollable);\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   * @param {?=} auditTimeInMs\n   * @return {?}\n   */\n  scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n    if (!this._platform.isBrowser) {\n      return of();\n    }\n    return Observable.create(observer => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      }\n      /** @type {?} */\n      const subscription = auditTimeInMs > 0 ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : this._scrolled.subscribe(observer);\n      this._scrolledCount++;\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._removeGlobalListener();\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param {?} elementRef Element whose ancestors to listen for.\n   * @param {?=} auditTimeInMs Time to throttle the scroll events.\n   * @return {?}\n   */\n  ancestorScrolled(elementRef, auditTimeInMs) {\n    /** @type {?} */\n    const ancestors = this.getAncestorScrollContainers(elementRef);\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\n      return !target || ancestors.indexOf(target) > -1;\n    }));\n  }\n  /**\n   * Returns all registered Scrollables that contain the provided element.\n   * @param {?} elementRef\n   * @return {?}\n   */\n  getAncestorScrollContainers(elementRef) {\n    /** @type {?} */\n    const scrollingContainers = [];\n    this.scrollContainers.forEach((_subscription, scrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n    return scrollingContainers;\n  }\n  /**\n   * Returns true if the element is contained within the provided Scrollable.\n   * @param {?} scrollable\n   * @param {?} elementRef\n   * @return {?}\n   */\n  _scrollableContainsElement(scrollable, elementRef) {\n    /** @type {?} */\n    let element = elementRef.nativeElement;\n    /** @type {?} */\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) {\n        return true;\n      }\n    } while (element = /** @type {?} */element.parentElement);\n    return false;\n  }\n  /**\n   * Sets up the global scroll listeners.\n   * @return {?}\n   */\n  _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n  /**\n   * Cleans up the global scroll listener.\n   * @return {?}\n   */\n  _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n      this._globalSubscription = null;\n    }\n  }\n}\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {\n  return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\nScrollDispatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ScrollDispatcher,\n  factory: ScrollDispatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nScrollDispatcher.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Platform\n}];\n/** @nocollapse */\nScrollDispatcher.ngInjectableDef = defineInjectable({\n  factory: function ScrollDispatcher_Factory() {\n    return new ScrollDispatcher(inject(NgZone), inject(Platform));\n  },\n  token: ScrollDispatcher,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n  /**\n   * @param {?} elementRef\n   * @param {?} scrollDispatcher\n   * @param {?} ngZone\n   * @param {?=} dir\n   */\n  constructor(elementRef, scrollDispatcher, ngZone, dir) {\n    this.elementRef = elementRef;\n    this.scrollDispatcher = scrollDispatcher;\n    this.ngZone = ngZone;\n    this.dir = dir;\n    this._destroyed = new Subject();\n    this._elementScrolled = Observable.create(observer => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this.scrollDispatcher.register(this);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.scrollDispatcher.deregister(this);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /**\n   * Returns observable that emits when a scroll event is fired on the host element.\n   * @return {?}\n   */\n  elementScrolled() {\n    return this._elementScrolled;\n  }\n  /**\n   * Gets the ElementRef for the viewport.\n   * @return {?}\n   */\n  getElementRef() {\n    return this.elementRef;\n  }\n  /**\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param {?} options specified the offsets to scroll to.\n   * @return {?}\n   */\n  scrollTo(options) {\n    /** @type {?} */\n    const el = this.elementRef.nativeElement;\n    /** @type {?} */\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    // Rewrite start & end offsets as right or left offsets.\n    options.left = options.left == null ? isRtl ? options.end : options.start : options.left;\n    options.right = options.right == null ? isRtl ? options.start : options.end : options.right;\n    // Rewrite the bottom offset as a top offset.\n    if (options.bottom != null) {\n      options.top = el.scrollHeight - el.clientHeight - options.bottom;\n    }\n    // Rewrite the right offset as a left offset.\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n      if (options.left != null) {\n        options.right = el.scrollWidth - el.clientWidth - options.left;\n      }\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        options.left = options.right;\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        options.left = options.right ? -options.right : options.right;\n      }\n    } else {\n      if (options.right != null) {\n        options.left = el.scrollWidth - el.clientWidth - options.right;\n      }\n    }\n    this._applyScrollToOptions(options);\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n  _applyScrollToOptions(options) {\n    /** @type {?} */\n    const el = this.elementRef.nativeElement;\n    if (supportsScrollBehavior()) {\n      el.scrollTo(options);\n    } else {\n      if (options.top != null) {\n        el.scrollTop = options.top;\n      }\n      if (options.left != null) {\n        el.scrollLeft = options.left;\n      }\n    }\n  }\n  /**\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param {?} from The edge to measure from.\n   * @return {?}\n   */\n  measureScrollOffset(from) {\n    /** @type {?} */\n    const LEFT = 'left';\n    /** @type {?} */\n    const RIGHT = 'right';\n    /** @type {?} */\n    const el = this.elementRef.nativeElement;\n    if (from == 'top') {\n      return el.scrollTop;\n    }\n    if (from == 'bottom') {\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\n    }\n    /** @type {?} */\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    if (from == 'start') {\n      from = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      from = isRtl ? LEFT : RIGHT;\n    }\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      } else {\n        return el.scrollLeft;\n      }\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\n      } else {\n        return -el.scrollLeft;\n      }\n    } else {\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n      // (scrollWidth - clientWidth) when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft;\n      } else {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      }\n    }\n  }\n}\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) {\n  return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n};\nCdkScrollable.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkScrollable,\n  selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]]\n});\n/** @nocollapse */\nCdkScrollable.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: NgZone\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-scrollable], [cdkScrollable]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`.\n */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n  /**\n   * @param {?} elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} ngZone\n   * @param {?} _scrollStrategy\n   * @param {?} dir\n   * @param {?} scrollDispatcher\n   */\n  constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n    this.elementRef = elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._scrollStrategy = _scrollStrategy;\n    /**\n     * Emits when the viewport is detached from a CdkVirtualForOf.\n     */\n    this._detachedSubject = new Subject();\n    /**\n     * Emits when the rendered range changes.\n     */\n    this._renderedRangeSubject = new Subject();\n    /**\n     * The direction the viewport scrolls.\n     */\n    this.orientation = 'vertical';\n    /**\n     * Emits when the index of the first element visible in the viewport changes.\n     */\n    this.scrolledIndexChange = Observable.create(observer => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n    /**\n     * A stream that emits whenever the rendered range changes.\n     */\n    this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n    /**\n     * The transform used to scale the spacer to the same size as all content, including content that\n     * is not currently rendered.\n     */\n    this._totalContentSizeTransform = '';\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     */\n    this._totalContentSize = 0;\n    /**\n     * The currently rendered range of indices.\n     */\n    this._renderedRange = {\n      start: 0,\n      end: 0\n    };\n    /**\n     * The length of the data bound to this viewport (in number of items).\n     */\n    this._dataLength = 0;\n    /**\n     * The size of the viewport (in pixels).\n     */\n    this._viewportSize = 0;\n    /**\n     * The last rendered content offset that was set.\n     */\n    this._renderedContentOffset = 0;\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     */\n    this._renderedContentOffsetNeedsRewrite = false;\n    /**\n     * Whether there is a pending change detection cycle.\n     */\n    this._isChangeDetectionPending = false;\n    /**\n     * A list of functions to run after the next change detection cycle.\n     */\n    this._runAfterChangeDetection = [];\n    if (!_scrollStrategy) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    super.ngOnInit();\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n    this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n      this._measureViewportSize();\n      this._scrollStrategy.attach(this);\n      this.elementScrolled().pipe(\n      // Start off with a fake scroll event so we properly detect our initial position.\n      startWith( /** @type {?} */null),\n      // Collect multiple events into one until the next animation frame. This way if\n      // there are multiple scroll events in the same frame we only need to recheck\n      // our layout once.\n      auditTime(0, animationFrameScheduler)).subscribe(() => this._scrollStrategy.onContentScrolled());\n      this._markChangeDetectionNeeded();\n    }));\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.detach();\n    this._scrollStrategy.detach();\n    // Complete all subjects\n    this._renderedRangeSubject.complete();\n    this._detachedSubject.complete();\n    super.ngOnDestroy();\n  }\n  /**\n   * Attaches a `CdkVirtualForOf` to this viewport.\n   * @param {?} forOf\n   * @return {?}\n   */\n  attach(forOf) {\n    if (this._forOf) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    }\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n    this.ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        /** @type {?} */\n        const newLength = data.length;\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n          this._scrollStrategy.onDataLengthChanged();\n        }\n        this._doChangeDetection();\n      });\n    });\n  }\n  /**\n   * Detaches the current `CdkVirtualForOf`.\n   * @return {?}\n   */\n  detach() {\n    this._forOf = null;\n    this._detachedSubject.next();\n  }\n  /**\n   * Gets the length of the data bound to this viewport (in number of items).\n   * @return {?}\n   */\n  getDataLength() {\n    return this._dataLength;\n  }\n  /**\n   * Gets the size of the viewport (in pixels).\n   * @return {?}\n   */\n  getViewportSize() {\n    return this._viewportSize;\n  }\n  /**\n   * Get the current rendered range of items.\n   * @return {?}\n   */\n  getRenderedRange() {\n    return this._renderedRange;\n  }\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   * @param {?} size\n   * @return {?}\n   */\n  setTotalContentSize(size) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n      /** @type {?} */\n      const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n      this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\n      this._markChangeDetectionNeeded();\n    }\n  }\n  /**\n   * Sets the currently rendered range of indices.\n   * @param {?} range\n   * @return {?}\n   */\n  setRenderedRange(range) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      this._renderedRangeSubject.next(this._renderedRange = range);\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   * @return {?}\n   */\n  getOffsetToRenderedContentStart() {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   * @param {?} offset\n   * @param {?=} to\n   * @return {?}\n   */\n  setRenderedContentOffset(offset, to = 'to-start') {\n    /** @type {?} */\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    /** @type {?} */\n    const isHorizontal = this.orientation == 'horizontal';\n    /** @type {?} */\n    const axis = isHorizontal ? 'X' : 'Y';\n    /** @type {?} */\n    const axisDirection = isHorizontal && isRtl ? -1 : 1;\n    /** @type {?} */\n    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n    this._renderedContentOffset = offset;\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`;\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n  /**\n   * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n   * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n   * @param {?} offset The offset to scroll to.\n   * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   * @return {?}\n   */\n  scrollToOffset(offset, behavior = 'auto') {\n    /** @type {?} */\n    const options = {\n      behavior\n    };\n    if (this.orientation === 'horizontal') {\n      options.start = offset;\n    } else {\n      options.top = offset;\n    }\n    this.scrollTo(options);\n  }\n  /**\n   * Scrolls to the offset for the given index.\n   * @param {?} index The index of the element to scroll to.\n   * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   * @return {?}\n   */\n  scrollToIndex(index, behavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n  /**\n   * Gets the current scroll offset from the start of the viewport (in pixels).\n   * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n   *     in horizontal mode.\n   * @return {?}\n   */\n  measureScrollOffset(from) {\n    return super.measureScrollOffset(from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n  }\n  /**\n   * Measure the combined size of all of the rendered items.\n   * @return {?}\n   */\n  measureRenderedContentSize() {\n    /** @type {?} */\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   * @param {?} range\n   * @return {?}\n   */\n  measureRangeSize(range) {\n    if (!this._forOf) {\n      return 0;\n    }\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n  /**\n   * Update the viewport dimensions and re-render.\n   * @return {?}\n   */\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n    this._scrollStrategy.onDataLengthChanged();\n  }\n  /**\n   * Measure the viewport size.\n   * @return {?}\n   */\n  _measureViewportSize() {\n    /** @type {?} */\n    const viewportEl = this.elementRef.nativeElement;\n    this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n  /**\n   * Queue up change detection to run.\n   * @param {?=} runAfter\n   * @return {?}\n   */\n  _markChangeDetectionNeeded(runAfter) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    }\n    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\n    if (!this._isChangeDetectionPending) {\n      this._isChangeDetectionPending = true;\n      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._doChangeDetection();\n      }));\n    }\n  }\n  /**\n   * Run change detection.\n   * @return {?}\n   */\n  _doChangeDetection() {\n    this._isChangeDetectionPending = false;\n    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\n    // instead does not properly check the projected content.\n    this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n    // Apply the content transform. The transform can't be set via an Angular binding because\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n    // the `Number` function first to coerce it to a numeric value.\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n    /** @type {?} */\n    const runAfterChangeDetection = this._runAfterChangeDetection;\n    this._runAfterChangeDetection = [];\n    for (const fn of runAfterChangeDetection) {\n      fn();\n    }\n  }\n}\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n  return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher));\n};\nCdkVirtualScrollViewport.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkVirtualScrollViewport,\n  selectors: [[\"cdk-virtual-scroll-viewport\"]],\n  viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n  hostVars: 4,\n  hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation === \"vertical\");\n    }\n  },\n  inputs: {\n    orientation: \"orientation\"\n  },\n  outputs: {\n    scrolledIndexChange: \"scrolledIndexChange\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 2,\n  consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]],\n  template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(3, \"div\", 2);\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵstyleProp(\"transform\", ctx._totalContentSizeTransform);\n    }\n  },\n  styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nCdkVirtualScrollViewport.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [VIRTUAL_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ScrollDispatcher\n}];\nCdkVirtualScrollViewport.propDecorators = {\n  orientation: [{\n    type: Input\n  }],\n  scrolledIndexChange: [{\n    type: Output\n  }],\n  _contentWrapper: [{\n    type: ViewChild,\n    args: ['contentWrapper']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport',\n      template: \"<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\"><ng-content></ng-content></div><div class=\\\"cdk-virtual-scroll-spacer\\\" [style.transform]=\\\"_totalContentSizeTransform\\\"></div>\",\n      host: {\n        'class': 'cdk-virtual-scroll-viewport',\n        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation === \"vertical\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [VIRTUAL_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ScrollDispatcher\n    }];\n  }, {\n    orientation: [{\n      type: Input\n    }],\n    scrolledIndexChange: [{\n      type: Output\n    }],\n    _contentWrapper: [{\n      type: ViewChild,\n      args: ['contentWrapper']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\nfunction getSize(orientation, node) {\n  /** @type {?} */\n  const el = /** @type {?} */node;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  /** @type {?} */\n  const rect = el.getBoundingClientRect();\n  return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\nclass CdkVirtualForOf {\n  /**\n   * @param {?} _viewContainerRef\n   * @param {?} _template\n   * @param {?} _differs\n   * @param {?} _viewport\n   * @param {?} ngZone\n   */\n  constructor(_viewContainerRef, _template, _differs, /** The virtual scrolling viewport that these items are being rendered in. */\n  _viewport, ngZone) {\n    this._viewContainerRef = _viewContainerRef;\n    this._template = _template;\n    this._differs = _differs;\n    this._viewport = _viewport;\n    /**\n     * Emits when the rendered view of the data changes.\n     */\n    this.viewChange = new Subject();\n    /**\n     * Subject that emits when a new DataSource instance is given.\n     */\n    this._dataSourceChanges = new Subject();\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    this.cdkVirtualForTemplateCacheSize = 20;\n    /**\n     * Emits whenever the data in the current DataSource changes.\n     */\n    this.dataStream = this._dataSourceChanges.pipe(\n    // Start off with null `DataSource`.\n    startWith( /** @type {?} */null),\n    // Bundle up the previous and current data sources so we can work with both.\n    pairwise(),\n    // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n    // Replay the last emitted data when someone subscribes.\n    shareReplay(1));\n    /**\n     * The differ used to calculate changes to the data.\n     */\n    this._differ = null;\n    /**\n     * The template cache used to hold on ot template instancess that have been stamped out, but don't\n     * currently need to be rendered. These instances will be reused in the future rather than\n     * stamping out brand new ones.\n     */\n    this._templateCache = [];\n    /**\n     * Whether the rendered data should be updated during the next ngDoCheck cycle.\n     */\n    this._needsUpdate = false;\n    this._destroyed = new Subject();\n    this.dataStream.subscribe(data => {\n      this._data = data;\n      this._onRenderedDataChange();\n    });\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      ngZone.run(() => this.viewChange.next(this._renderedRange));\n      this._onRenderedDataChange();\n    });\n    this._viewport.attach(this);\n  }\n  /**\n   * The DataSource to display.\n   * @return {?}\n   */\n  get cdkVirtualForOf() {\n    return this._cdkVirtualForOf;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set cdkVirtualForOf(value) {\n    this._cdkVirtualForOf = value;\n    /** @type {?} */\n    const ds = value instanceof DataSource ? value :\n    // Slice the value if its an NgIterable to ensure we're working with an array.\n    new ArrayDataSource(value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n    this._dataSourceChanges.next(ds);\n  }\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   * @return {?}\n   */\n  get cdkVirtualForTrackBy() {\n    return this._cdkVirtualForTrackBy;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  set cdkVirtualForTrackBy(fn) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) : undefined;\n  }\n  /**\n   * The template used to stamp out new elements.\n   * @param {?} value\n   * @return {?}\n   */\n  set cdkVirtualForTemplate(value) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   * @param {?} range\n   * @param {?} orientation\n   * @return {?}\n   */\n  measureRangeSize(range, orientation) {\n    if (range.start >= range.end) {\n      return 0;\n    }\n    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    }\n    /** @type {?} */\n    const renderedStartIndex = range.start - this._renderedRange.start;\n    /** @type {?} */\n    const rangeLen = range.end - range.start;\n    /** @type {?} */\n    let totalSize = 0;\n    /** @type {?} */\n    let i = rangeLen;\n    while (i--) {\n      /** @type {?} */\n      const view = /** @type {?} */this._viewContainerRef.get(i + renderedStartIndex);\n      /** @type {?} */\n      let j = view ? view.rootNodes.length : 0;\n      while (j--) {\n        totalSize += getSize(orientation, /** @type {?} */view.rootNodes[j]);\n      }\n    }\n    return totalSize;\n  }\n  /**\n   * @return {?}\n   */\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      /** @type {?} */\n      const changes = this._differ.diff(this._renderedItems);\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n      this._needsUpdate = false;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._viewport.detach();\n    this._dataSourceChanges.complete();\n    this.viewChange.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n    for (let view of this._templateCache) {\n      view.destroy();\n    }\n  }\n  /**\n   * React to scroll state changes in the viewport.\n   * @return {?}\n   */\n  _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n    if (!this._differ) {\n      this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n    }\n    this._needsUpdate = true;\n  }\n  /**\n   * Swap out one `DataSource` for another.\n   * @param {?} oldDs\n   * @param {?} newDs\n   * @return {?}\n   */\n  _changeDataSource(oldDs, newDs) {\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n    this._needsUpdate = true;\n    return newDs.connect(this);\n  }\n  /**\n   * Update the `CdkVirtualForOfContext` for all views.\n   * @return {?}\n   */\n  _updateContext() {\n    /** @type {?} */\n    const count = this._data.length;\n    /** @type {?} */\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      /** @type {?} */\n      let view = /** @type {?} */this._viewContainerRef.get(i);\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n      view.detectChanges();\n    }\n  }\n  /**\n   * Apply changes to the DOM.\n   * @param {?} changes\n   * @return {?}\n   */\n  _applyChanges(changes) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n      if (record.previousIndex == null) {\n        // Item added.\n        /** @type {?} */\n        const view = this._getViewForNewItem();\n        this._viewContainerRef.insert(view, /** @type {?} */currentIndex);\n        view.context.$implicit = record.item;\n      } else if (currentIndex == null) {\n        // Item removed.\n        // Item removed.\n        this._cacheView( /** @type {?} */this._viewContainerRef.detach( /** @type {?} */adjustedPreviousIndex));\n      } else {\n        // Item moved.\n        /** @type {?} */\n        const view = /** @type {?} */this._viewContainerRef.get( /** @type {?} */adjustedPreviousIndex);\n        this._viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = record.item;\n      }\n    });\n    // Update $implicit for any items that had an identity change.\n    changes.forEachIdentityChange(record => {\n      /** @type {?} */\n      const view = /** @type {?} */this._viewContainerRef.get( /** @type {?} */record.currentIndex);\n      view.context.$implicit = record.item;\n    });\n    /** @type {?} */\n    const count = this._data.length;\n    /** @type {?} */\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      /** @type {?} */\n      const view = /** @type {?} */this._viewContainerRef.get(i);\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n  /**\n   * Cache the given detached view.\n   * @param {?} view\n   * @return {?}\n   */\n  _cacheView(view) {\n    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n      this._templateCache.push(view);\n    } else {\n      view.destroy();\n    }\n  }\n  /**\n   * Get a view for a new item, either from the cache or by creating a new one.\n   * @return {?}\n   */\n  _getViewForNewItem() {\n    return this._templateCache.pop() || this._viewContainerRef.createEmbeddedView(this._template, {\n      $implicit: /** @type {?} */null,\n      cdkVirtualForOf: this._cdkVirtualForOf,\n      index: -1,\n      count: -1,\n      first: false,\n      last: false,\n      odd: false,\n      even: false\n    });\n  }\n  /**\n   * Update the computed properties on the `CdkVirtualForOfContext`.\n   * @param {?} context\n   * @return {?}\n   */\n  _updateComputedContextProperties(context) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n}\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {\n  return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\nCdkVirtualForOf.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkVirtualForOf,\n  selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n  inputs: {\n    cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\",\n    cdkVirtualForOf: \"cdkVirtualForOf\",\n    cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n    cdkVirtualForTemplate: \"cdkVirtualForTemplate\"\n  }\n});\n/** @nocollapse */\nCdkVirtualForOf.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}, {\n  type: CdkVirtualScrollViewport,\n  decorators: [{\n    type: SkipSelf\n  }]\n}, {\n  type: NgZone\n}];\nCdkVirtualForOf.propDecorators = {\n  cdkVirtualForOf: [{\n    type: Input\n  }],\n  cdkVirtualForTrackBy: [{\n    type: Input\n  }],\n  cdkVirtualForTemplate: [{\n    type: Input\n  }],\n  cdkVirtualForTemplateCacheSize: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkVirtualFor][cdkVirtualForOf]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: CdkVirtualScrollViewport,\n      decorators: [{\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    cdkVirtualForTemplateCacheSize: [{\n      type: Input\n    }],\n    cdkVirtualForOf: [{\n      type: Input\n    }],\n    cdkVirtualForTrackBy: [{\n      type: Input\n    }],\n    cdkVirtualForTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass ScrollingModule {}\nScrollingModule.ɵfac = function ScrollingModule_Factory(t) {\n  return new (t || ScrollingModule)();\n};\nScrollingModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ScrollingModule\n});\nScrollingModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [BidiModule, PlatformModule, BidiModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PlatformModule],\n      exports: [BidiModule, CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport],\n      declarations: [CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, {\n    declarations: function () {\n      return [CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport];\n    },\n    imports: function () {\n      return [BidiModule, PlatformModule];\n    },\n    exports: function () {\n      return [BidiModule, CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport];\n    }\n  });\n})();\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * \\@breaking-change 8.0.0 delete this alias\n */\nclass ScrollDispatchModule {}\nScrollDispatchModule.ɵfac = function ScrollDispatchModule_Factory(t) {\n  return new (t || ScrollDispatchModule)();\n};\nScrollDispatchModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ScrollDispatchModule\n});\nScrollDispatchModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [ScrollingModule, ScrollingModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatchModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ScrollingModule],\n      exports: [ScrollingModule]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollDispatchModule, {\n    imports: [ScrollingModule],\n    exports: [ScrollingModule]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Time in ms to throttle the resize events by default.\n  @type {?} */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nclass ViewportRuler {\n  /**\n   * @param {?} _platform\n   * @param {?} ngZone\n   */\n  constructor(_platform, ngZone) {\n    this._platform = _platform;\n    ngZone.runOutsideAngular(() => {\n      this._change = _platform.isBrowser ? merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) : of();\n      // Note that we need to do the subscription inside `runOutsideAngular`\n      // since subscribing is what causes the event listener to be added.\n      this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._invalidateCache.unsubscribe();\n  }\n  /**\n   * Returns the viewport's width and height.\n   * @return {?}\n   */\n  getViewportSize() {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n    /** @type {?} */\n    const output = {\n      width: this._viewportSize.width,\n      height: this._viewportSize.height\n    };\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = /** @type {?} */null;\n    }\n    return output;\n  }\n  /**\n   * Gets a ClientRect for the viewport's bounds.\n   * @return {?}\n   */\n  getViewportRect() {\n    /** @type {?} */\n    const scrollPosition = this.getViewportScrollPosition();\n    const {\n      width,\n      height\n    } = this.getViewportSize();\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width\n    };\n  }\n  /**\n   * Gets the (top, left) scroll position of the viewport.\n   * @return {?}\n   */\n  getViewportScrollPosition() {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {\n        top: 0,\n        left: 0\n      };\n    }\n    /** @type {?} */\n    const documentElement = /** @type {?} */document.documentElement;\n    /** @type {?} */\n    const documentRect = documentElement.getBoundingClientRect();\n    /** @type {?} */\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n    /** @type {?} */\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n   * @return {?}\n   */\n  change(throttleTime = DEFAULT_RESIZE_TIME) {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n  /**\n   * Updates the cached viewport size.\n   * @return {?}\n   */\n  _updateViewportSize() {\n    this._viewportSize = this._platform.isBrowser ? {\n      width: window.innerWidth,\n      height: window.innerHeight\n    } : {\n      width: 0,\n      height: 0\n    };\n  }\n}\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) {\n  return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\nViewportRuler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ViewportRuler,\n  factory: ViewportRuler.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nViewportRuler.ctorParameters = () => [{\n  type: Platform\n}, {\n  type: NgZone\n}];\n/** @nocollapse */\nViewportRuler.ngInjectableDef = defineInjectable({\n  factory: function ViewportRuler_Factory() {\n    return new ViewportRuler(inject(Platform), inject(NgZone));\n  },\n  token: ViewportRuler,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n  return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport };","map":{"version":3,"names":["InjectionToken","Directive","forwardRef","Input","Injectable","NgZone","Optional","SkipSelf","ElementRef","NgModule","IterableDiffers","TemplateRef","ViewContainerRef","ChangeDetectionStrategy","ChangeDetectorRef","Component","Inject","Output","ViewChild","ViewEncapsulation","defineInjectable","inject","coerceNumberProperty","Subject","fromEvent","of","Observable","animationFrameScheduler","merge","distinctUntilChanged","auditTime","filter","takeUntil","startWith","pairwise","shareReplay","switchMap","Platform","getRtlScrollAxisType","RtlScrollAxisType","supportsScrollBehavior","PlatformModule","Directionality","BidiModule","ArrayDataSource","DataSource","ɵngcc0","ɵngcc1","ɵngcc2","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","constructor","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","pipe","_viewport","_itemSize","_minBufferPx","_maxBufferPx","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","complete","updateItemAndBufferSize","Error","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","startBuffer","expandStart","Math","ceil","max","min","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","value","ngOnChanges","ɵfac","CdkFixedSizeVirtualScroll_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","inputs","features","ɵɵProvidersFeature","provide","useFactory","deps","ɵɵNgOnChangesFeature","propDecorators","ngDevMode","ɵsetClassMetadata","args","selector","providers","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","register","scrollable","scrollSubscription","elementScrolled","subscribe","set","deregister","scrollableReference","get","unsubscribe","delete","scrolled","auditTimeInMs","isBrowser","create","observer","_addGlobalListener","subscription","_removeGlobalListener","ngOnDestroy","forEach","_","container","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","window","document","ScrollDispatcher_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","ngInjectableDef","SCROLL_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","ngZone","platform","SCROLL_DISPATCHER_PROVIDER","CdkScrollable","scrollDispatcher","dir","_destroyed","_elementScrolled","ngOnInit","scrollTo","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","NORMAL","scrollWidth","clientWidth","INVERTED","NEGATED","_applyScrollToOptions","scrollTop","scrollLeft","from","LEFT","RIGHT","CdkScrollable_Factory","ɵɵdirectiveInject","decorators","rangesEqual","r1","r2","CdkVirtualScrollViewport","_changeDetectorRef","_detachedSubject","_renderedRangeSubject","orientation","Promise","resolve","then","run","renderedRangeStream","asObservable","_totalContentSizeTransform","_totalContentSize","_renderedRange","_dataLength","_viewportSize","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_measureViewportSize","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","length","_doChangeDetection","size","axis","range","getOffsetToRenderedContentStart","offset","to","isHorizontal","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","checkViewportSize","viewportEl","runAfter","markForCheck","style","runAfterChangeDetection","fn","CdkVirtualScrollViewport_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","CdkVirtualScrollViewport_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","CdkVirtualScrollViewport_HostBindings","ɵɵclassProp","outputs","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","CdkVirtualScrollViewport_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵstyleProp","styles","encapsulation","changeDetection","undefined","host","None","OnPush","getSize","node","getBoundingClientRect","rect","width","height","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","prev","cur","_changeDataSource","_differ","_templateCache","_needsUpdate","_data","_onRenderedDataChange","cdkVirtualForOf","_cdkVirtualForOf","ds","Array","prototype","slice","call","cdkVirtualForTrackBy","_cdkVirtualForTrackBy","item","cdkVirtualForTemplate","renderedStartIndex","rangeLen","totalSize","i","view","j","rootNodes","ngDoCheck","changes","diff","_renderedItems","_updateContext","_applyChanges","destroy","find","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_getViewForNewItem","insert","$implicit","_cacheView","move","forEachIdentityChange","pop","createEmbeddedView","last","odd","even","CdkVirtualForOf_Factory","ScrollingModule","ScrollingModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","ScrollDispatchModule","ScrollDispatchModule_Factory","DEFAULT_RESIZE_TIME","ViewportRuler","_change","_invalidateCache","change","_updateViewportSize","output","getViewportRect","scrollPosition","getViewportScrollPosition","documentElement","documentRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","VIEWPORT_RULER_PROVIDER"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/scrolling.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, SkipSelf, ElementRef, NgModule, IterableDiffers, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Output, ViewChild, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent, of, Observable, animationFrameScheduler, merge } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, shareReplay, switchMap } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { ArrayDataSource, DataSource } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * The injection token used to specify the virtual scrolling strategy.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /**\n         * \\@docs-private Implemented as part of VirtualScrollStrategy.\n         */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /**\n         * The attached viewport.\n         */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentRendered() {\n        /* no-op */ \n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onRenderedOffsetChanged() {\n        /* no-op */ \n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @return {?}\n     */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @return {?}\n     */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        /** @type {?} */\n        const scrollOffset = this._viewport.measureScrollOffset();\n        /** @type {?} */\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        /** @type {?} */\n        const renderedRange = this._viewport.getRenderedRange();\n        /** @type {?} */\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        /** @type {?} */\n        const viewportSize = this._viewport.getViewportSize();\n        /** @type {?} */\n        const dataLength = this._viewport.getDataLength();\n        /** @type {?} */\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            /** @type {?} */\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            /** @type {?} */\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                /** @type {?} */\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /**\n         * The scroll strategy used by this directive.\n         */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /**\n     * The size of the items in the list (in pixels).\n     * @return {?}\n     */\n    get itemSize() { return this._itemSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) { return new (t || CdkFixedSizeVirtualScroll)(); };\nCdkFixedSizeVirtualScroll.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFixedSizeVirtualScroll, selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]], inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n            }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n                    }]\n            }]\n    }], function () { return []; }, { itemSize: [{\n            type: Input\n        }], minBufferPx: [{\n            type: Input\n        }], maxBufferPx: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Time in ms to throttle the scrolling events by default.\n  @type {?} */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    constructor(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new Subject();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    register(scrollable) {\n        /** @type {?} */\n        const scrollSubscription = scrollable.elementScrolled()\n            .subscribe(() => this._scrolled.next(scrollable));\n        this.scrollContainers.set(scrollable, scrollSubscription);\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    deregister(scrollable) {\n        /** @type {?} */\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return Observable.create((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            /** @type {?} */\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        /** @type {?} */\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    getAncestorScrollContainers(elementRef) {\n        /** @type {?} */\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _scrollableContainsElement(scrollable, elementRef) {\n        /** @type {?} */\n        let element = elementRef.nativeElement;\n        /** @type {?} */\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = /** @type {?} */ ((element)).parentElement);\n        return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @return {?}\n     */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @return {?}\n     */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nScrollDispatcher.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ScrollDispatcher, factory: ScrollDispatcher.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform }\n];\n/** @nocollapse */ ScrollDispatcher.ngInjectableDef = defineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(inject(NgZone), inject(Platform)); }, token: ScrollDispatcher, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst SCROLL_DISPATCHER_PROVIDER = {\n    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n    provide: ScrollDispatcher,\n    deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     * @param {?=} dir\n     */\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = Observable.create((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n    scrollTo(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n        options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top = el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                options.right = el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left = el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    _applyScrollToOptions(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        /** @type {?} */\n        const LEFT = 'left';\n        /** @type {?} */\n        const RIGHT = 'right';\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nCdkScrollable.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\n/** @nocollapse */\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`.\n */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} ngZone\n     * @param {?} _scrollStrategy\n     * @param {?} dir\n     * @param {?} scrollDispatcher\n     */\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /**\n         * Emits when the viewport is detached from a CdkVirtualForOf.\n         */\n        this._detachedSubject = new Subject();\n        /**\n         * Emits when the rendered range changes.\n         */\n        this._renderedRangeSubject = new Subject();\n        /**\n         * The direction the viewport scrolls.\n         */\n        this.orientation = 'vertical';\n        /**\n         * Emits when the index of the first element visible in the viewport changes.\n         */\n        this.scrolledIndexChange = Observable.create((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /**\n         * A stream that emits whenever the rendered range changes.\n         */\n        this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n        /**\n         * The transform used to scale the spacer to the same size as all content, including content that\n         * is not currently rendered.\n         */\n        this._totalContentSizeTransform = '';\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /**\n         * The currently rendered range of indices.\n         */\n        this._renderedRange = { start: 0, end: 0 };\n        /**\n         * The length of the data bound to this viewport (in number of items).\n         */\n        this._dataLength = 0;\n        /**\n         * The size of the viewport (in pixels).\n         */\n        this._viewportSize = 0;\n        /**\n         * The last rendered content offset that was set.\n         */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /**\n         * Whether there is a pending change detection cycle.\n         */\n        this._isChangeDetectionPending = false;\n        /**\n         * A list of functions to run after the next change detection cycle.\n         */\n        this._runAfterChangeDetection = [];\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(/** @type {?} */ ((null))), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, animationFrameScheduler))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        super.ngOnDestroy();\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n    attach(forOf) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                /** @type {?} */\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            /** @type {?} */\n            const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\n            this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        /** @type {?} */\n        const isHorizontal = this.orientation == 'horizontal';\n        /** @type {?} */\n        const axis = isHorizontal ? 'X' : 'Y';\n        /** @type {?} */\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        /** @type {?} */\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        /** @type {?} */\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        return super.measureScrollOffset(from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n    measureRenderedContentSize() {\n        /** @type {?} */\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @return {?}\n     */\n    _measureViewportSize() {\n        /** @type {?} */\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @param {?=} runAfter\n     * @return {?}\n     */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /**\n     * Run change detection.\n     * @return {?}\n     */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        /** @type {?} */\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n}\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) { return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher)); };\nCdkVirtualScrollViewport.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkVirtualScrollViewport, selectors: [[\"cdk-virtual-scroll-viewport\"]], viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    } }, hostAttrs: [1, \"cdk-virtual-scroll-viewport\"], hostVars: 4, hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation === \"vertical\");\n    } }, inputs: { orientation: \"orientation\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 2, consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]], template: function CdkVirtualScrollViewport_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"transform\", ctx._totalContentSizeTransform);\n    } }, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n        type: Component,\n        args: [{ selector: 'cdk-virtual-scroll-viewport', template: \"<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\"><ng-content></ng-content></div><div class=\\\"cdk-virtual-scroll-spacer\\\" [style.transform]=\\\"_totalContentSizeTransform\\\"></div>\", host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation === \"vertical\"'\n                }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [VIRTUAL_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ScrollDispatcher }]; }, { orientation: [{\n            type: Input\n        }], scrolledIndexChange: [{\n            type: Output\n        }], _contentWrapper: [{\n            type: ViewChild,\n            args: ['contentWrapper']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\nfunction getSize(orientation, node) {\n    /** @type {?} */\n    const el = /** @type {?} */ (node);\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    /** @type {?} */\n    const rect = el.getBoundingClientRect();\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\nclass CdkVirtualForOf {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _template\n     * @param {?} _differs\n     * @param {?} _viewport\n     * @param {?} ngZone\n     */\n    constructor(_viewContainerRef, _template, _differs, /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /**\n         * Emits when the rendered view of the data changes.\n         */\n        this.viewChange = new Subject();\n        /**\n         * Subject that emits when a new DataSource instance is given.\n         */\n        this._dataSourceChanges = new Subject();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /**\n         * Emits whenever the data in the current DataSource changes.\n         */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith(/** @type {?} */ ((null))), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /**\n         * The differ used to calculate changes to the data.\n         */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /**\n         * Whether the rendered data should be updated during the next ngDoCheck cycle.\n         */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            ngZone.run(() => this.viewChange.next(this._renderedRange));\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * The DataSource to display.\n     * @return {?}\n     */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        /** @type {?} */\n        const ds = value instanceof DataSource ? value :\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            new ArrayDataSource(value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n        this._dataSourceChanges.next(ds);\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n            undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        /** @type {?} */\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        /** @type {?} */\n        const rangeLen = range.end - range.start;\n        /** @type {?} */\n        let totalSize = 0;\n        /** @type {?} */\n        let i = rangeLen;\n        while (i--) {\n            /** @type {?} */\n            const view = /** @type {?} */ (this._viewContainerRef.get(i + renderedStartIndex));\n            /** @type {?} */\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, /** @type {?} */ ((view)).rootNodes[j]);\n            }\n        }\n        return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            /** @type {?} */\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @return {?}\n     */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs.connect(this);\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @return {?}\n     */\n    _updateContext() {\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            let view = /** @type {?} */ (this._viewContainerRef.get(i));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            if (record.previousIndex == null) { // Item added.\n                /** @type {?} */\n                const view = this._getViewForNewItem();\n                this._viewContainerRef.insert(view, /** @type {?} */ ((currentIndex)));\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                // Item removed.\n                this._cacheView(/** @type {?} */ (this._viewContainerRef.detach(/** @type {?} */ ((adjustedPreviousIndex)))));\n            }\n            else { // Item moved.\n                /** @type {?} */\n                const view = /** @type {?} */ (this._viewContainerRef.get(/** @type {?} */ ((adjustedPreviousIndex))));\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        });\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            /** @type {?} */\n            const view = /** @type {?} */ (this._viewContainerRef.get(/** @type {?} */ ((record.currentIndex))));\n            view.context.$implicit = record.item;\n        });\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            const view = /** @type {?} */ (this._viewContainerRef.get(i));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /**\n     * Cache the given detached view.\n     * @param {?} view\n     * @return {?}\n     */\n    _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            view.destroy();\n        }\n    }\n    /**\n     * Get a view for a new item, either from the cache or by creating a new one.\n     * @return {?}\n     */\n    _getViewForNewItem() {\n        return this._templateCache.pop() || this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: /** @type {?} */ ((null)),\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        });\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @param {?} context\n     * @return {?}\n     */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n}\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) { return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkVirtualForOf.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkVirtualForOf, selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]], inputs: { cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\", cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\" } });\n/** @nocollapse */\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: CdkVirtualScrollViewport, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.NgZone }]; }, { cdkVirtualForTemplateCacheSize: [{\n            type: Input\n        }], cdkVirtualForOf: [{\n            type: Input\n        }], cdkVirtualForTrackBy: [{\n            type: Input\n        }], cdkVirtualForTemplate: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵfac = function ScrollingModule_Factory(t) { return new (t || ScrollingModule)(); };\nScrollingModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ScrollingModule });\nScrollingModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [BidiModule, PlatformModule, BidiModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PlatformModule],\n                exports: [\n                    BidiModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, { declarations: function () { return [CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport]; }, imports: function () { return [BidiModule, PlatformModule]; }, exports: function () { return [BidiModule, CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport]; } }); })();\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * \\@breaking-change 8.0.0 delete this alias\n */\nclass ScrollDispatchModule {\n}\nScrollDispatchModule.ɵfac = function ScrollDispatchModule_Factory(t) { return new (t || ScrollDispatchModule)(); };\nScrollDispatchModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ScrollDispatchModule });\nScrollDispatchModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [ScrollingModule, ScrollingModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatchModule, [{\n        type: NgModule,\n        args: [{\n                imports: [ScrollingModule],\n                exports: [ScrollingModule]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollDispatchModule, { imports: [ScrollingModule], exports: [ScrollingModule] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Time in ms to throttle the resize events by default.\n  @type {?} */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nclass ViewportRuler {\n    /**\n     * @param {?} _platform\n     * @param {?} ngZone\n     */\n    constructor(_platform, ngZone) {\n        this._platform = _platform;\n        ngZone.runOutsideAngular(() => {\n            this._change = _platform.isBrowser ?\n                merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                of();\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        /** @type {?} */\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = /** @type {?} */ ((null));\n        }\n        return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    getViewportRect() {\n        /** @type {?} */\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        /** @type {?} */\n        const documentElement = /** @type {?} */ ((document.documentElement));\n        /** @type {?} */\n        const documentRect = documentElement.getBoundingClientRect();\n        /** @type {?} */\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        /** @type {?} */\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @return {?}\n     */\n    _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nViewportRuler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ViewportRuler, factory: ViewportRuler.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/** @nocollapse */ ViewportRuler.ngInjectableDef = defineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(inject(Platform), inject(NgZone)); }, token: ViewportRuler, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}