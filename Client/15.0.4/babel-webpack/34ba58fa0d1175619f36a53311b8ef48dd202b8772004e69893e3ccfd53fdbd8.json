{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} document\n   */\n  constructor(_viewportRuler, document) {\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @return {?}\n   */\n  attach() {}\n  /**\n   * Blocks page-level scroll while the attached overlay is open.\n   * @return {?}\n   */\n  enable() {\n    if (this._canBeEnabled()) {\n      /** @type {?} */\n      const root = /** @type {?} */this._document.documentElement;\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n  /**\n   * Unblocks page-level scroll while the attached overlay is open.\n   * @return {?}\n   */\n  disable() {\n    if (this._isEnabled) {\n      /** @type {?} */\n      const html = /** @type {?} */this._document.documentElement;\n      /** @type {?} */\n      const body = /** @type {?} */this._document.body;\n      /** @type {?} */\n      const htmlStyle = /** @type {?} */html.style;\n      /** @type {?} */\n      const bodyStyle = /** @type {?} */body.style;\n      /** @type {?} */\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      /** @type {?} */\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n      this._isEnabled = false;\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n      htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n      bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _canBeEnabled() {\n    /** @type {?} */\n    const html = /** @type {?} */this._document.documentElement;\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n    /** @type {?} */\n    const body = this._document.body;\n    /** @type {?} */\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n  /**\n   * @param {?} _scrollDispatcher\n   * @param {?} _ngZone\n   * @param {?} _viewportRuler\n   * @param {?=} _config\n   */\n  constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /**\n     * Detaches the overlay ref and disables the scroll strategy.\n     */\n    this._detach = () => {\n      this.disable();\n      if (this._overlayRef.hasAttached()) {\n        this._ngZone.run(() => this._overlayRef.detach());\n      }\n    };\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n  attach(overlayRef) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n    this._overlayRef = overlayRef;\n  }\n  /**\n   * Enables the closing of the attached overlay on scroll.\n   * @return {?}\n   */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n    /** @type {?} */\n    const stream = this._scrollDispatcher.scrolled(0);\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n      this._scrollSubscription = stream.subscribe(() => {\n        /** @type {?} */\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > /** @type {?} */ /** @type {?} */this._config.threshold) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n  /**\n   * Disables the closing the attached overlay on scroll.\n   * @return {?}\n   */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\nclass NoopScrollStrategy {\n  /**\n   * Does nothing, as this scroll strategy is a no-op.\n   * @return {?}\n   */\n  enable() {}\n  /**\n   * Does nothing, as this scroll strategy is a no-op.\n   * @return {?}\n   */\n  disable() {}\n  /**\n   * Does nothing, as this scroll strategy is a no-op.\n   * @return {?}\n   */\n  attach() {}\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(containerBounds => {\n    /** @type {?} */\n    const outsideAbove = element.bottom < containerBounds.top;\n    /** @type {?} */\n    const outsideBelow = element.top > containerBounds.bottom;\n    /** @type {?} */\n    const outsideLeft = element.right < containerBounds.left;\n    /** @type {?} */\n    const outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(scrollContainerRect => {\n    /** @type {?} */\n    const clippedAbove = element.top < scrollContainerRect.top;\n    /** @type {?} */\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    /** @type {?} */\n    const clippedLeft = element.left < scrollContainerRect.left;\n    /** @type {?} */\n    const clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n  /**\n   * @param {?} _scrollDispatcher\n   * @param {?} _viewportRuler\n   * @param {?} _ngZone\n   * @param {?=} _config\n   */\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n  attach(overlayRef) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n    this._overlayRef = overlayRef;\n  }\n  /**\n   * Enables repositioning of the attached overlay on scroll.\n   * @return {?}\n   */\n  enable() {\n    if (!this._scrollSubscription) {\n      /** @type {?} */\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          /** @type {?} */\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {\n            width,\n            height\n          } = this._viewportRuler.getViewportSize();\n          /** @type {?} */\n          const parentRects = [{\n            width,\n            height,\n            bottom: height,\n            right: width,\n            top: 0,\n            left: 0\n          }];\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Disables repositioning of the attached overlay on scroll.\n   * @return {?}\n   */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n  /**\n   * @param {?} _scrollDispatcher\n   * @param {?} _viewportRuler\n   * @param {?} _ngZone\n   * @param {?} document\n   */\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    /**\n     * Do nothing on scroll.\n     */\n    this.noop = () => new NoopScrollStrategy();\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * @param config Configuration to be used inside the scroll strategy.\n     */\n    this.close = config => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n    /**\n     * Block scrolling.\n     */\n    this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n    /**\n     * Update the overlay's position on scroll.\n     * @param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     */\n    this.reposition = config => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n    this._document = document;\n  }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {\n  return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\nScrollStrategyOptions.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ScrollStrategyOptions,\n  factory: ScrollStrategyOptions.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nScrollStrategyOptions.ctorParameters = () => [{\n  type: ScrollDispatcher\n}, {\n  type: ViewportRuler\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\nScrollStrategyOptions.ngInjectableDef = defineInjectable({\n  factory: function ScrollStrategyOptions_Factory() {\n    return new ScrollStrategyOptions(inject(ScrollDispatcher), inject(ViewportRuler), inject(NgZone), inject(DOCUMENT));\n  },\n  token: ScrollStrategyOptions,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nclass OverlayConfig {\n  /**\n   * @param {?=} config\n   */\n  constructor(config) {\n    /**\n     * Strategy to be used when handling scroll events while the overlay is open.\n     */\n    this.scrollStrategy = new NoopScrollStrategy();\n    /**\n     * Custom class to add to the overlay pane.\n     */\n    this.panelClass = '';\n    /**\n     * Whether the overlay has a backdrop.\n     */\n    this.hasBackdrop = false;\n    /**\n     * Custom class to add to the backdrop\n     */\n    this.backdropClass = 'cdk-overlay-dark-backdrop';\n    /**\n     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    this.disposeOnNavigation = false;\n    if (config) {\n      Object.keys(config).forEach(k => {\n        /** @type {?} */\n        const key = /** @type {?} */k;\n        if (typeof config[key] !== 'undefined') {\n          this[key] = config[key];\n        }\n      });\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nclass ConnectionPositionPair {\n  /**\n   * @param {?} origin\n   * @param {?} overlay\n   * @param {?=} offsetX\n   * @param {?=} offsetY\n   * @param {?=} panelClass\n   */\n  constructor(origin, overlay, offsetX, offsetY, panelClass) {\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.panelClass = panelClass;\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nclass ScrollingVisibility {}\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nclass ConnectedOverlayPositionChange {\n  /**\n   * @param {?} connectionPair\n   * @param {?} scrollableViewProperties\n   */\n  constructor(connectionPair, /** @docs-private */\n  scrollableViewProperties) {\n    this.connectionPair = connectionPair;\n    this.scrollableViewProperties = scrollableViewProperties;\n  }\n}\n/** @nocollapse */\nConnectedOverlayPositionChange.ctorParameters = () => [{\n  type: ConnectionPositionPair\n}, {\n  type: ScrollingVisibility,\n  decorators: [{\n    type: Optional\n  }]\n}];\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher {\n  /**\n   * @param {?} document\n   */\n  constructor(document) {\n    /**\n     * Currently attached overlays in the order they were attached.\n     */\n    this._attachedOverlays = [];\n    /**\n     * Keyboard event listener that will be attached to the body.\n     */\n    this._keydownListener = event => {\n      /** @type {?} */\n      const overlays = this._attachedOverlays;\n      for (let i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEventSubscriptions > 0) {\n          overlays[i]._keydownEvents.next(event);\n          break;\n        }\n      }\n    };\n    this._document = document;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._detach();\n  }\n  /**\n   * Add a new overlay to the list of attached overlay refs.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n  add(overlayRef) {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n      this._isAttached = true;\n    }\n    this._attachedOverlays.push(overlayRef);\n  }\n  /**\n   * Remove an overlay from the list of attached overlay refs.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n  remove(overlayRef) {\n    /** @type {?} */\n    const index = this._attachedOverlays.indexOf(overlayRef);\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n  /**\n   * Detaches the global keyboard event listener.\n   * @return {?}\n   */\n  _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n      this._isAttached = false;\n    }\n  }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n  return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\nOverlayKeyboardDispatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayKeyboardDispatcher,\n  factory: OverlayKeyboardDispatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nOverlayKeyboardDispatcher.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\nOverlayKeyboardDispatcher.ngInjectableDef = defineInjectable({\n  factory: function OverlayKeyboardDispatcher_Factory() {\n    return new OverlayKeyboardDispatcher(inject(DOCUMENT));\n  },\n  token: OverlayKeyboardDispatcher,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [[new Optional(), new SkipSelf(), OverlayKeyboardDispatcher], /** @type {?} */\n  // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n  // of the type expected by Angular\n  DOCUMENT],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nclass OverlayContainer {\n  /**\n   * @param {?} _document\n   */\n  constructor(_document) {\n    this._document = _document;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @return {?} the container element\n   */\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n    return this._containerElement;\n  }\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   * @return {?}\n   */\n  _createContainer() {\n    /** @type {?} */\n    const container = this._document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\nOverlayContainer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayContainer,\n  factory: OverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nOverlayContainer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\nOverlayContainer.ngInjectableDef = defineInjectable({\n  factory: function OverlayContainer_Factory() {\n    return new OverlayContainer(inject(DOCUMENT));\n  },\n  token: OverlayContainer,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n  return parentContainer || new OverlayContainer(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer], /** @type {?} */DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n  // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n  /**\n   * @param {?} _portalOutlet\n   * @param {?} _host\n   * @param {?} _pane\n   * @param {?} _config\n   * @param {?} _ngZone\n   * @param {?} _keyboardDispatcher\n   * @param {?} _document\n   * @param {?=} _location\n   */\n  constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n    this._keydownEventsObservable = Observable.create(observer => {\n      /** @type {?} */\n      const subscription = this._keydownEvents.subscribe(observer);\n      this._keydownEventSubscriptions++;\n      return () => {\n        subscription.unsubscribe();\n        this._keydownEventSubscriptions--;\n      };\n    });\n    /**\n     * Stream of keydown events dispatched to this overlay.\n     */\n    this._keydownEvents = new Subject();\n    /**\n     * Amount of subscriptions to the keydown events.\n     */\n    this._keydownEventSubscriptions = 0;\n    if (_config.scrollStrategy) {\n      _config.scrollStrategy.attach(this);\n    }\n    this._positionStrategy = _config.positionStrategy;\n  }\n  /**\n   * The overlay's HTML element\n   * @return {?}\n   */\n  get overlayElement() {\n    return this._pane;\n  }\n  /**\n   * The overlay's backdrop HTML element.\n   * @return {?}\n   */\n  get backdropElement() {\n    return this._backdropElement;\n  }\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   * @return {?}\n   */\n  get hostElement() {\n    return this._host;\n  }\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param {?} portal Portal instance to which to attach the overlay.\n   * @return {?} The portal attachment result.\n   */\n  attach(portal) {\n    /** @type {?} */\n    let attachResult = this._portalOutlet.attach(portal);\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n    // Update the pane element with the given configuration.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.enable();\n    }\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      // The overlay could've been detached before the zone has stabilized.\n      if (this.hasAttached()) {\n        this.updatePosition();\n      }\n    });\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n    // @breaking-change 8.0.0 remove the null check for `_location`\n    // once the constructor parameter is made required.\n    if (this._config.disposeOnNavigation && this._location) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n    return attachResult;\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @return {?} The portal detachment result.\n   */\n  detach() {\n    if (!this.hasAttached()) {\n      return;\n    }\n    this.detachBackdrop();\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n    /** @type {?} */\n    const detachmentResult = this._portalOutlet.detach();\n    // Only emit after everything is detached.\n    this._detachments.next();\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n    // Keeping the host element in DOM the can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n    // Stop listening for location changes.\n    this._locationChanges.unsubscribe();\n    return detachmentResult;\n  }\n  /**\n   * Cleans up the overlay from the DOM.\n   * @return {?}\n   */\n  dispose() {\n    /** @type {?} */\n    const isAttached = this.hasAttached();\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n    this.detachBackdrop();\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = /** @type {?} */null;\n    }\n    this._previousHostParent = this._pane = /** @type {?} */null;\n    if (isAttached) {\n      this._detachments.next();\n    }\n    this._detachments.complete();\n  }\n  /**\n   * Whether the overlay has attached content.\n   * @return {?}\n   */\n  hasAttached() {\n    return this._portalOutlet.hasAttached();\n  }\n  /**\n   * Gets an observable that emits when the backdrop has been clicked.\n   * @return {?}\n   */\n  backdropClick() {\n    return this._backdropClick.asObservable();\n  }\n  /**\n   * Gets an observable that emits when the overlay has been attached.\n   * @return {?}\n   */\n  attachments() {\n    return this._attachments.asObservable();\n  }\n  /**\n   * Gets an observable that emits when the overlay has been detached.\n   * @return {?}\n   */\n  detachments() {\n    return this._detachments.asObservable();\n  }\n  /**\n   * Gets an observable of keydown events targeted to this overlay.\n   * @return {?}\n   */\n  keydownEvents() {\n    return this._keydownEventsObservable;\n  }\n  /**\n   * Gets the the current overlay configuration, which is immutable.\n   * @return {?}\n   */\n  getConfig() {\n    return this._config;\n  }\n  /**\n   * Updates the position of the overlay based on the position strategy.\n   * @return {?}\n   */\n  updatePosition() {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n  /**\n   * Switches to a new position strategy and updates the overlay position.\n   * @param {?} strategy\n   * @return {?}\n   */\n  updatePositionStrategy(strategy) {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n    this._positionStrategy = strategy;\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n  /**\n   * Update the size properties of the overlay.\n   * @param {?} sizeConfig\n   * @return {?}\n   */\n  updateSize(sizeConfig) {\n    this._config = Object.assign({}, this._config, sizeConfig);\n    this._updateElementSize();\n  }\n  /**\n   * Sets the LTR/RTL direction for the overlay.\n   * @param {?} dir\n   * @return {?}\n   */\n  setDirection(dir) {\n    this._config = Object.assign({}, this._config, {\n      direction: dir\n    });\n    this._updateElementDirection();\n  }\n  /**\n   * Returns the layout direction of the overlay panel.\n   * @return {?}\n   */\n  getDirection() {\n    /** @type {?} */\n    const direction = this._config.direction;\n    if (!direction) {\n      return 'ltr';\n    }\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n  /**\n   * Updates the text direction of the overlay panel.\n   * @return {?}\n   */\n  _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n  /**\n   * Updates the size of the overlay element based on the overlay config.\n   * @return {?}\n   */\n  _updateElementSize() {\n    /** @type {?} */\n    const style = this._pane.style;\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n  /**\n   * Toggles the pointer events for the overlay pane element.\n   * @param {?} enablePointer\n   * @return {?}\n   */\n  _togglePointerEvents(enablePointer) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n  /**\n   * Attaches a backdrop for this overlay.\n   * @return {?}\n   */\n  _attachBackdrop() {\n    /** @type {?} */\n    const showingClass = 'cdk-overlay-backdrop-showing';\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    } /** @type {?} */\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement.insertBefore(this._backdropElement, this._host);\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', event => this._backdropClick.next(event));\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   * @return {?}\n   */\n  _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      /** @type {?} */this._host.parentNode.appendChild(this._host);\n    }\n  }\n  /**\n   * Detaches the backdrop (if any) associated with the overlay.\n   * @return {?}\n   */\n  detachBackdrop() {\n    /** @type {?} */\n    let backdropToDetach = this._backdropElement;\n    if (backdropToDetach) {\n      /** @type {?} */\n      let timeoutId;\n      /** @type {?} */\n      let finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n        clearTimeout(timeoutId);\n      };\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n      }\n      this._ngZone.runOutsideAngular(() => {\n        /** @type {?} */backdropToDetach.addEventListener('transitionend', finishDetach);\n      });\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n  }\n  /**\n   * Toggles a single CSS class or an array of classes on an element.\n   * @param {?} element\n   * @param {?} cssClasses\n   * @param {?} isAdd\n   * @return {?}\n   */\n  _toggleClasses(element, cssClasses, isAdd) {\n    /** @type {?} */\n    const classList = element.classList;\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n    });\n  }\n  /**\n   * Detaches the overlay content next time the zone stabilizes.\n   * @return {?}\n   */\n  _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      /** @type {?} */\n      const subscription = this._ngZone.onStable.asObservable().pipe(takeUntil(merge(this._attachments, this._detachments))).subscribe(() => {\n        // Needs a couple of checks for the pane and host, because\n        // they may have been removed by the time the zone stabilizes.\n        if (!this._pane || !this._host || this._pane.children.length === 0) {\n          if (this._pane && this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, false);\n          }\n          if (this._host && this._host.parentElement) {\n            this._previousHostParent = this._host.parentElement;\n            this._previousHostParent.removeChild(this._host);\n          }\n          subscription.unsubscribe();\n        }\n      });\n    });\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Class to be added to the overlay bounding box.\n  @type {?} */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n  /**\n   * @param {?} connectedTo\n   * @param {?} _viewportRuler\n   * @param {?} _document\n   * @param {?=} _platform\n   * @param {?=} _overlayContainer\n   */\n  constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /**\n     * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n     */\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /**\n     * Whether the overlay was pushed in a previous positioning.\n     */\n    this._isPushed = false;\n    /**\n     * Whether the overlay can be pushed on-screen on the initial open.\n     */\n    this._canPush = true;\n    /**\n     * Whether the overlay can grow via flexible width/height after the initial open.\n     */\n    this._growAfterOpen = false;\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     */\n    this._hasFlexibleDimensions = true;\n    /**\n     * Whether the overlay position is locked.\n     */\n    this._positionLocked = false;\n    /**\n     * Amount of space that must be maintained between the overlay and the edge of the viewport.\n     */\n    this._viewportMargin = 0;\n    /**\n     * The Scrollable containers used to check scrollable view properties on position change.\n     */\n    this.scrollables = [];\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     */\n    this._preferredPositions = [];\n    /**\n     * Subject that emits whenever the position changes.\n     */\n    this._positionChanges = new Subject();\n    /**\n     * Subscription to viewport size changes.\n     */\n    this._resizeSubscription = Subscription.EMPTY;\n    /**\n     * Default offset for the overlay along the x axis.\n     */\n    this._offsetX = 0;\n    /**\n     * Default offset for the overlay along the y axis.\n     */\n    this._offsetY = 0;\n    /**\n     * Amount of subscribers to the `positionChanges` stream.\n     */\n    this._positionChangeSubscriptions = 0;\n    /**\n     * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n     */\n    this._appliedPanelClasses = [];\n    /**\n     * Observable sequence of position changes.\n     */\n    this.positionChanges = Observable.create(observer => {\n      /** @type {?} */\n      const subscription = this._positionChanges.subscribe(observer);\n      this._positionChangeSubscriptions++;\n      return () => {\n        subscription.unsubscribe();\n        this._positionChangeSubscriptions--;\n      };\n    });\n    this.setOrigin(connectedTo);\n  }\n  /**\n   * Ordered list of preferred positions, from most to least desirable.\n   * @return {?}\n   */\n  get positions() {\n    return this._preferredPositions;\n  }\n  /**\n   * Attaches this position strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n  attach(overlayRef) {\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n    this._validatePositions();\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * \\@docs-private\n   * @return {?}\n   */\n  apply() {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    // @breaking-change 8.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n    if (this._isDisposed || this._platform && !this._platform.isBrowser) {\n      return;\n    }\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._origin.getBoundingClientRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n    /** @type {?} */\n    const originRect = this._originRect;\n    /** @type {?} */\n    const overlayRect = this._overlayRect;\n    /** @type {?} */\n    const viewportRect = this._viewportRect;\n    /** @type {?} */\n    const flexibleFits = [];\n    /** @type {?} */\n    let fallback;\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      /** @type {?} */\n      let originPoint = this._getOriginPoint(originRect, pos);\n      /** @type {?} */\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n      /** @type {?} */\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n        continue;\n      }\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {\n          overlayFit,\n          overlayPoint,\n          originPoint,\n          position: pos,\n          overlayRect\n        };\n      }\n    }\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      /** @type {?} */\n      let bestFit = null;\n      /** @type {?} */\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        /** @type {?} */\n        const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n      this._isPushed = false;\n      this._applyPosition( /** @type {?} */bestFit.position, /** @type {?} */bestFit.origin);\n      return;\n    }\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition( /** @type {?} */fallback.position, /** @type {?} */fallback.originPoint);\n      return;\n    }\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition( /** @type {?} */fallback.position, /** @type {?} */fallback.originPoint);\n  }\n  /**\n   * @return {?}\n   */\n  detach() {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n  /**\n   * Cleanup after the element gets destroyed.\n   * @return {?}\n   */\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    }\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, /** @type {?} */{\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = /** @type {?} */null;\n    this._isDisposed = true;\n  }\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   * @return {?}\n   */\n  reapplyLastPosition() {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._origin.getBoundingClientRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n      /** @type {?} */\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      /** @type {?} */\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   * @param {?} scrollables\n   * @return {?}\n   */\n  withScrollableContainers(scrollables) {\n    this.scrollables = scrollables;\n  }\n  /**\n   * Adds new preferred positions.\n   * @param {?} positions List of positions options for this overlay.\n   * @return {?}\n   */\n  withPositions(positions) {\n    this._preferredPositions = positions;\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf( /** @type {?} */this._lastPosition) === -1) {\n      this._lastPosition = null;\n    }\n    this._validatePositions();\n    return this;\n  }\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n   * @return {?}\n   */\n  withViewportMargin(margin) {\n    this._viewportMargin = margin;\n    return this;\n  }\n  /**\n   * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n   * @param {?=} flexibleDimensions\n   * @return {?}\n   */\n  withFlexibleDimensions(flexibleDimensions = true) {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n  /**\n   * Sets whether the overlay can grow after the initial open via flexible width/height.\n   * @param {?=} growAfterOpen\n   * @return {?}\n   */\n  withGrowAfterOpen(growAfterOpen = true) {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n  /**\n   * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n   * @param {?=} canPush\n   * @return {?}\n   */\n  withPush(canPush = true) {\n    this._canPush = canPush;\n    return this;\n  }\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param {?=} isLocked Whether the overlay should locked in.\n   * @return {?}\n   */\n  withLockedPosition(isLocked = true) {\n    this._positionLocked = isLocked;\n    return this;\n  }\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param {?} origin Reference to the new origin element.\n   * @return {?}\n   */\n  setOrigin(origin) {\n    this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n    return this;\n  }\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param {?} offset New offset in the X axis.\n   * @return {?}\n   */\n  withDefaultOffsetX(offset) {\n    this._offsetX = offset;\n    return this;\n  }\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param {?} offset New offset in the Y axis.\n   * @return {?}\n   */\n  withDefaultOffsetY(offset) {\n    this._offsetY = offset;\n    return this;\n  }\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param {?} selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   * @return {?}\n   */\n  withTransformOriginOn(selector) {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   * @param {?} originRect\n   * @param {?} pos\n   * @return {?}\n   */\n  _getOriginPoint(originRect, pos) {\n    /** @type {?} */\n    let x;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + originRect.width / 2;\n    } else {\n      /** @type {?} */\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      /** @type {?} */\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n    /** @type {?} */\n    let y;\n    if (pos.originY == 'center') {\n      y = originRect.top + originRect.height / 2;\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n    return {\n      x,\n      y\n    };\n  }\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   * @param {?} originPoint\n   * @param {?} overlayRect\n   * @param {?} pos\n   * @return {?}\n   */\n  _getOverlayPoint(originPoint, overlayRect, pos) {\n    /** @type {?} */\n    let overlayStartX;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n    /** @type {?} */\n    let overlayStartY;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY\n    };\n  }\n  /**\n   * Gets how well an overlay at the given point will fit within the viewport.\n   * @param {?} point\n   * @param {?} overlay\n   * @param {?} viewport\n   * @param {?} position\n   * @return {?}\n   */\n  _getOverlayFit(point, overlay, viewport, position) {\n    let {\n      x,\n      y\n    } = point;\n    /** @type {?} */\n    let offsetX = this._getOffset(position, 'x');\n    /** @type {?} */\n    let offsetY = this._getOffset(position, 'y');\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n    if (offsetY) {\n      y += offsetY;\n    }\n    /** @type {?} */\n    let leftOverflow = 0 - x;\n    /** @type {?} */\n    let rightOverflow = x + overlay.width - viewport.width;\n    /** @type {?} */\n    let topOverflow = 0 - y;\n    /** @type {?} */\n    let bottomOverflow = y + overlay.height - viewport.height;\n    /** @type {?} */\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    /** @type {?} */\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    /** @type {?} */\n    let visibleArea = visibleWidth * visibleHeight;\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width\n    };\n  }\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param {?} fit How well the overlay fits in the viewport at some position.\n   * @param {?} point The (x, y) coordinates of the overlat at some position.\n   * @param {?} viewport The geometry of the viewport.\n   * @return {?}\n   */\n  _canFitWithFlexibleDimensions(fit, point, viewport) {\n    if (this._hasFlexibleDimensions) {\n      /** @type {?} */\n      const availableHeight = viewport.bottom - point.y;\n      /** @type {?} */\n      const availableWidth = viewport.right - point.x;\n      /** @type {?} */\n      const minHeight = this._overlayRef.getConfig().minHeight;\n      /** @type {?} */\n      const minWidth = this._overlayRef.getConfig().minWidth;\n      /** @type {?} */\n      const verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n      /** @type {?} */\n      const horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n      return verticalFit && horizontalFit;\n    }\n  }\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param {?} start Starting point from which the overlay is pushed.\n   * @param {?} overlay Dimensions of the overlay.\n   * @param {?} scrollPosition Current viewport scroll position.\n   * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  _pushOverlayOnScreen(start, overlay, scrollPosition) {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    }\n    /** @type {?} */\n    const viewport = this._viewportRect;\n    /** @type {?} */\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n    /** @type {?} */\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n    /** @type {?} */\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    /** @type {?} */\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n    /** @type {?} */\n    let pushX = 0;\n    /** @type {?} */\n    let pushY = 0;\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width < viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n    }\n    if (overlay.height < viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n    }\n    this._previousPushAmount = {\n      x: pushX,\n      y: pushY\n    };\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY\n    };\n  }\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param {?} position The position preference\n   * @param {?} originPoint The point on the origin element where the overlay is connected.\n   * @return {?}\n   */\n  _applyPosition(position, originPoint) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n    if (this._positionChangeSubscriptions > 0) {\n      /** @type {?} */\n      const scrollableViewProperties = this._getScrollVisibility();\n      /** @type {?} */\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n    this._isInitialRender = false;\n  }\n  /**\n   * Sets the transform origin based on the configured selector and the passed-in position.\n   * @param {?} position\n   * @return {?}\n   */\n  _setTransformOrigin(position) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n    /** @type {?} */\n    const elements = /** @type {?} */this._boundingBox.querySelectorAll(this._transformOriginSelector);\n    /** @type {?} */\n    let xOrigin;\n    /** @type {?} */\n    let yOrigin = position.overlayY;\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   * @param {?} origin\n   * @param {?} position\n   * @return {?}\n   */\n  _calculateBoundingBoxRect(origin, position) {\n    /** @type {?} */\n    const viewport = this._viewportRect;\n    /** @type {?} */\n    const isRtl = this._isRtl();\n    /** @type {?} */\n    let height;\n    /** @type {?} */\n    let top;\n    /** @type {?} */\n    let bottom;\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.bottom - origin.y;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      /** @type {?} */\n      const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n      /** @type {?} */\n      const previousHeight = this._lastBoundingBoxSize.height;\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - previousHeight / 2;\n      }\n    }\n    /** @type {?} */\n    const isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl;\n    /** @type {?} */\n    const isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n    /** @type {?} */\n    let width;\n    /** @type {?} */\n    let left;\n    /** @type {?} */\n    let right;\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.right - origin.x + this._viewportMargin;\n      width = origin.x - viewport.left;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      /** @type {?} */\n      const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      /** @type {?} */\n      const previousWidth = this._lastBoundingBoxSize.width;\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - previousWidth / 2;\n      }\n    }\n    return {\n      top: /** @type {?} */top,\n      left: /** @type {?} */left,\n      bottom: /** @type {?} */bottom,\n      right: /** @type {?} */right,\n      width,\n      height\n    };\n  }\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param {?} origin The point on the origin element where the overlay is connected.\n   * @param {?} position The position preference\n   * @return {?}\n   */\n  _setBoundingBoxStyles(origin, position) {\n    /** @type {?} */\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n    /** @type {?} */\n    const styles = /** @type {?} */{};\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = '';\n      styles.width = styles.height = '100%';\n    } else {\n      /** @type {?} */\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      /** @type {?} */\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n    this._lastBoundingBoxSize = boundingBoxRect;\n    extendStyles( /** @type {?} */this._boundingBox.style, styles);\n  }\n  /**\n   * Resets the styles for the bounding box so that a new positioning can be computed.\n   * @return {?}\n   */\n  _resetBoundingBoxStyles() {\n    extendStyles( /** @type {?} */this._boundingBox.style, /** @type {?} */{\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: ''\n    });\n  }\n  /**\n   * Resets the styles for the overlay pane so that a new positioning can be computed.\n   * @return {?}\n   */\n  _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, /** @type {?} */{\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: ''\n    });\n  }\n  /**\n   * Sets positioning styles to the overlay element.\n   * @param {?} originPoint\n   * @param {?} position\n   * @return {?}\n   */\n  _setOverlayElementStyles(originPoint, position) {\n    /** @type {?} */\n    const styles = /** @type {?} */{};\n    if (this._hasExactPosition()) {\n      /** @type {?} */\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n    /** @type {?} */\n    let transformString = '';\n    /** @type {?} */\n    let offsetX = this._getOffset(position, 'x');\n    /** @type {?} */\n    let offsetY = this._getOffset(position, 'y');\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n    styles.transform = transformString.trim();\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n      styles.maxHeight = '';\n    }\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n      styles.maxWidth = '';\n    }\n    extendStyles(this._pane.style, styles);\n  }\n  /**\n   * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n   * @param {?} position\n   * @param {?} originPoint\n   * @param {?} scrollPosition\n   * @return {?}\n   */\n  _getExactOverlayY(position, originPoint, scrollPosition) {\n    /** @type {?} */\n    let styles = /** @type {?} */{\n      top: null,\n      bottom: null\n    };\n    /** @type {?} */\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n    /** @type {?} */\n    let virtualKeyboardOffset = this._overlayContainer ? this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    overlayPoint.y -= virtualKeyboardOffset;\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      /** @type {?} */\n      const documentHeight = /** @type {?} */this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n    return styles;\n  }\n  /**\n   * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n   * @param {?} position\n   * @param {?} originPoint\n   * @param {?} scrollPosition\n   * @return {?}\n   */\n  _getExactOverlayX(position, originPoint, scrollPosition) {\n    /** @type {?} */\n    let styles = /** @type {?} */{\n      left: null,\n      right: null\n    };\n    /** @type {?} */\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n    /** @type {?} */\n    let horizontalStyleProperty;\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      /** @type {?} */\n      const documentWidth = /** @type {?} */this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n    return styles;\n  }\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   * @return {?}\n   */\n  _getScrollVisibility() {\n    /** @type {?} */\n    const originBounds = this._origin.getBoundingClientRect();\n    /** @type {?} */\n    const overlayBounds = this._pane.getBoundingClientRect();\n    /** @type {?} */\n    const scrollContainerBounds = this.scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n    };\n  }\n  /**\n   * Subtracts the amount that an element is overflowing on an axis from it's length.\n   * @param {?} length\n   * @param {...?} overflows\n   * @return {?}\n   */\n  _subtractOverflows(length, ...overflows) {\n    return overflows.reduce((currentValue, currentOverflow) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n  /**\n   * Narrows the given viewport rect by the current _viewportMargin.\n   * @return {?}\n   */\n  _getNarrowedViewportRect() {\n    /** @type {?} */\n    const width = /** @type {?} */this._document.documentElement.clientWidth;\n    /** @type {?} */\n    const height = /** @type {?} */this._document.documentElement.clientHeight;\n    /** @type {?} */\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n    return {\n      top: scrollPosition.top + this._viewportMargin,\n      left: scrollPosition.left + this._viewportMargin,\n      right: scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width: width - 2 * this._viewportMargin,\n      height: height - 2 * this._viewportMargin\n    };\n  }\n  /**\n   * Whether the we're dealing with an RTL context\n   * @return {?}\n   */\n  _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n  /**\n   * Determines whether the overlay uses exact or flexible positioning.\n   * @return {?}\n   */\n  _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n  /**\n   * Retrieves the offset of a position along the x or y axis.\n   * @param {?} position\n   * @param {?} axis\n   * @return {?}\n   */\n  _getOffset(position, axis) {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n  /**\n   * Validates that the current position match the expected values.\n   * @return {?}\n   */\n  _validatePositions() {\n    if (!this._preferredPositions.length) {\n      throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n    }\n    // TODO(crisbeto): remove these once Angular's template type\n    // checking is advanced enough to catch these cases.\n    this._preferredPositions.forEach(pair => {\n      validateHorizontalPosition('originX', pair.originX);\n      validateVerticalPosition('originY', pair.originY);\n      validateHorizontalPosition('overlayX', pair.overlayX);\n      validateVerticalPosition('overlayY', pair.overlayY);\n    });\n  }\n  /**\n   * Adds a single CSS class or an array of classes on the overlay panel.\n   * @param {?} cssClasses\n   * @return {?}\n   */\n  _addPanelClasses(cssClasses) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n  /**\n   * Clears the classes that the position strategy has applied from the overlay panel.\n   * @return {?}\n   */\n  _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => this._pane.classList.remove(cssClass));\n      this._appliedPanelClasses = [];\n    }\n  }\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n  return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n  /**\n   * @param {?} originPos\n   * @param {?} overlayPos\n   * @param {?} connectedTo\n   * @param {?} viewportRuler\n   * @param {?} document\n   * @param {?=} platform\n   */\n  constructor(originPos, overlayPos, connectedTo, viewportRuler, document,\n  // @breaking-change 8.0.0 `platform` parameter to be made required.\n  platform) {\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     */\n    this._preferredPositions = [];\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform).withFlexibleDimensions(false).withPush(false).withViewportMargin(0);\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n  /**\n   * Whether the we're dealing with an RTL context\n   * @return {?}\n   */\n  get _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n  /**\n   * Emits an event when the connection point changes.\n   * @return {?}\n   */\n  get onPositionChange() {\n    return this._positionStrategy.positionChanges;\n  }\n  /**\n   * Ordered list of preferred positions, from most to least desirable.\n   * @return {?}\n   */\n  get positions() {\n    return this._preferredPositions;\n  }\n  /**\n   * Attach this position strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n  attach(overlayRef) {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n  /**\n   * Disposes all resources used by the position strategy.\n   * @return {?}\n   */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n  /**\n   * \\@docs-private\n   * @return {?}\n   */\n  detach() {\n    this._positionStrategy.detach();\n  }\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * \\@docs-private\n   * @return {?}\n   */\n  apply() {\n    this._positionStrategy.apply();\n  }\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   * @return {?}\n   */\n  recalculateLastPosition() {\n    this._positionStrategy.reapplyLastPosition();\n  }\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   * @param {?} scrollables\n   * @return {?}\n   */\n  withScrollableContainers(scrollables) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n  /**\n   * Adds a new preferred fallback position.\n   * @param {?} originPos\n   * @param {?} overlayPos\n   * @param {?=} offsetX\n   * @param {?=} offsetY\n   * @return {?}\n   */\n  withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n    /** @type {?} */\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param {?} dir New layout direction.\n   * @return {?}\n   */\n  withDirection(dir) {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n    return this;\n  }\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param {?} offset New offset in the X axis.\n   * @return {?}\n   */\n  withOffsetX(offset) {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param {?} offset New offset in the Y axis.\n   * @return {?}\n   */\n  withOffsetY(offset) {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param {?} isLocked Whether the overlay should locked in.\n   * @return {?}\n   */\n  withLockedPosition(isLocked) {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param {?} positions Position pairs to be set on the strategy.\n   * @return {?}\n   */\n  withPositions(positions) {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param {?} origin Reference to the new origin element.\n   * @return {?}\n   */\n  setOrigin(origin) {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Class to be added to the overlay pane wrapper.\n  @type {?} */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n  constructor() {\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._leftOffset = '';\n    this._rightOffset = '';\n    this._alignItems = '';\n    this._justifyContent = '';\n    this._width = '';\n    this._height = '';\n  }\n  /**\n   * @param {?} overlayRef\n   * @return {?}\n   */\n  attach(overlayRef) {\n    /** @type {?} */\n    const config = overlayRef.getConfig();\n    this._overlayRef = overlayRef;\n    if (this._width && !config.width) {\n      overlayRef.updateSize({\n        width: this._width\n      });\n    }\n    if (this._height && !config.height) {\n      overlayRef.updateSize({\n        height: this._height\n      });\n    }\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param {?=} value New top offset.\n   * @return {?}\n   */\n  top(value = '') {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param {?=} value New left offset.\n   * @return {?}\n   */\n  left(value = '') {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param {?=} value New bottom offset.\n   * @return {?}\n   */\n  bottom(value = '') {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param {?=} value New right offset.\n   * @return {?}\n   */\n  right(value = '') {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * \\@breaking-change 8.0.0\n   * @param {?=} value New width for the overlay\n   * @return {?}\n   */\n  width(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({\n        width: value\n      });\n    } else {\n      this._width = value;\n    }\n    return this;\n  }\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * \\@breaking-change 8.0.0\n   * @param {?=} value New height for the overlay\n   * @return {?}\n   */\n  height(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({\n        height: value\n      });\n    } else {\n      this._height = value;\n    }\n    return this;\n  }\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param {?=} offset Overlay offset from the horizontal center.\n   * @return {?}\n   */\n  centerHorizontally(offset = '') {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param {?=} offset Overlay offset from the vertical center.\n   * @return {?}\n   */\n  centerVertically(offset = '') {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n  /**\n   * Apply the position to the element.\n   * \\@docs-private\n   * @return {?}\n   */\n  apply() {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n    /** @type {?} */\n    const styles = this._overlayRef.overlayElement.style;\n    /** @type {?} */\n    const parentStyles = this._overlayRef.hostElement.style;\n    /** @type {?} */\n    const config = this._overlayRef.getConfig();\n    styles.position = this._cssPosition;\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n    if (config.width === '100%') {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n  }\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * \\@docs-private\n   * @return {?}\n   */\n  dispose() {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n    /** @type {?} */\n    const styles = this._overlayRef.overlayElement.style;\n    /** @type {?} */\n    const parent = this._overlayRef.hostElement;\n    /** @type {?} */\n    const parentStyles = parent.style;\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n    this._overlayRef = /** @type {?} */null;\n    this._isDisposed = true;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nclass OverlayPositionBuilder {\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} _document\n   * @param {?=} _platform\n   * @param {?=} _overlayContainer\n   */\n  constructor(_viewportRuler, _document,\n  // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n  _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n  /**\n   * Creates a global position strategy.\n   * @return {?}\n   */\n  global() {\n    return new GlobalPositionStrategy();\n  }\n  /**\n   * Creates a relative position strategy.\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * \\@breaking-change 8.0.0\n   * @param {?} elementRef\n   * @param {?} originPos\n   * @param {?} overlayPos\n   * @return {?}\n   */\n  connectedTo(elementRef, originPos, overlayPos) {\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);\n  }\n  /**\n   * Creates a flexible position strategy.\n   * @param {?} elementRef\n   * @return {?}\n   */\n  flexibleConnectedTo(elementRef) {\n    return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n  }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {\n  return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform, 8), ɵngcc0.ɵɵinject(OverlayContainer, 8));\n};\nOverlayPositionBuilder.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayPositionBuilder,\n  factory: OverlayPositionBuilder.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nOverlayPositionBuilder.ctorParameters = () => [{\n  type: ViewportRuler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: OverlayContainer,\n  decorators: [{\n    type: Optional\n  }]\n}];\n/** @nocollapse */\nOverlayPositionBuilder.ngInjectableDef = defineInjectable({\n  factory: function OverlayPositionBuilder_Factory() {\n    return new OverlayPositionBuilder(inject(ViewportRuler), inject(DOCUMENT), inject(Platform, 8), inject(OverlayContainer, 8));\n  },\n  token: OverlayPositionBuilder,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: OverlayContainer,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Next overlay unique ID.\n  @type {?} */\nlet nextUniqueId = 0;\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n  /**\n   * @param {?} scrollStrategies\n   * @param {?} _overlayContainer\n   * @param {?} _componentFactoryResolver\n   * @param {?} _positionBuilder\n   * @param {?} _keyboardDispatcher\n   * @param {?} _injector\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?} _directionality\n   * @param {?=} _location\n   */\n  constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality,\n  // @breaking-change 8.0.0 `_location` parameter to be made required.\n  _location) {\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n    this._location = _location;\n  }\n  /**\n   * Creates an overlay.\n   * @param {?=} config Configuration applied to the overlay.\n   * @return {?} Reference to the created overlay.\n   */\n  create(config) {\n    /** @type {?} */\n    const host = this._createHostElement();\n    /** @type {?} */\n    const pane = this._createPaneElement(host);\n    /** @type {?} */\n    const portalOutlet = this._createPortalOutlet(pane);\n    /** @type {?} */\n    const overlayConfig = new OverlayConfig(config);\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n  }\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @return {?} An overlay position builder.\n   */\n  position() {\n    return this._positionBuilder;\n  }\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @param {?} host\n   * @return {?} Newly-created pane element\n   */\n  _createPaneElement(host) {\n    /** @type {?} */\n    const pane = this._document.createElement('div');\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n    return pane;\n  }\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @return {?} Newly-create host element.\n   */\n  _createHostElement() {\n    /** @type {?} */\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param {?} pane The DOM element to turn into a portal outlet.\n   * @return {?} A portal outlet for the given DOM element.\n   */\n  _createPortalOutlet(pane) {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get(ApplicationRef);\n    }\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n}\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8));\n};\nOverlay.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac\n});\n/** @nocollapse */\nOverlay.ctorParameters = () => [{\n  type: ScrollStrategyOptions\n}, {\n  type: OverlayContainer\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: OverlayPositionBuilder\n}, {\n  type: OverlayKeyboardDispatcher\n}, {\n  type: Injector\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Directionality\n}, {\n  type: Location,\n  decorators: [{\n    type: Optional\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScrollStrategyOptions\n    }, {\n      type: OverlayContainer\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: OverlayPositionBuilder\n    }, {\n      type: OverlayKeyboardDispatcher\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc3.Directionality\n    }, {\n      type: ɵngcc4.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n  @type {?} */\nconst defaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/** *\n * Injection token that determines the scroll handling while the connected overlay is open.\n  @type {?} */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n  /**\n   * @param {?} elementRef\n   */\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n  }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {\n  return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkOverlayOrigin,\n  selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n  exportAs: [\"cdkOverlayOrigin\"]\n});\n/** @nocollapse */\nCdkOverlayOrigin.ctorParameters = () => [{\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n  /**\n   * @param {?} _overlay\n   * @param {?} templateRef\n   * @param {?} viewContainerRef\n   * @param {?} scrollStrategyFactory\n   * @param {?} _dir\n   */\n  constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n    this._overlay = _overlay;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    /**\n     * Margin between the overlay and the viewport edges.\n     */\n    this.viewportMargin = 0;\n    /**\n     * Whether the overlay is open.\n     */\n    this.open = false;\n    /**\n     * Event emitted when the backdrop is clicked.\n     */\n    this.backdropClick = new EventEmitter();\n    /**\n     * Event emitted when the position has changed.\n     */\n    this.positionChange = new EventEmitter();\n    /**\n     * Event emitted when the overlay has been attached.\n     */\n    this.attach = new EventEmitter();\n    /**\n     * Event emitted when the overlay has been detached.\n     */\n    this.detach = new EventEmitter();\n    /**\n     * Emits when there are keyboard events that are targeted at the overlay.\n     */\n    this.overlayKeydown = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n  /**\n   * The offset in pixels for the overlay connection point on the x-axis\n   * @return {?}\n   */\n  get offsetX() {\n    return this._offsetX;\n  }\n  /**\n   * @param {?} offsetX\n   * @return {?}\n   */\n  set offsetX(offsetX) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n  /**\n   * The offset in pixels for the overlay connection point on the y-axis\n   * @return {?}\n   */\n  get offsetY() {\n    return this._offsetY;\n  }\n  /**\n   * @param {?} offsetY\n   * @return {?}\n   */\n  set offsetY(offsetY) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n  /**\n   * Whether or not the overlay should attach a backdrop.\n   * @return {?}\n   */\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether or not the overlay should be locked when scrolling.\n   * @return {?}\n   */\n  get lockPosition() {\n    return this._lockPosition;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set lockPosition(value) {\n    this._lockPosition = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the overlay's width and height can be constrained to fit within the viewport.\n   * @return {?}\n   */\n  get flexibleDimensions() {\n    return this._flexibleDimensions;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set flexibleDimensions(value) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n   * @return {?}\n   */\n  get growAfterOpen() {\n    return this._growAfterOpen;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set growAfterOpen(value) {\n    this._growAfterOpen = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n   * @return {?}\n   */\n  get push() {\n    return this._push;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set push(value) {\n    this._push = coerceBooleanProperty(value);\n  }\n  /**\n   * The associated overlay reference.\n   * @return {?}\n   */\n  get overlayRef() {\n    return this._overlayRef;\n  }\n  /**\n   * The element's layout direction.\n   * @return {?}\n   */\n  get dir() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._destroyOverlay();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n  /**\n   * Creates an overlay\n   * @return {?}\n   */\n  _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n    this._overlayRef = this._overlay.create(this._buildConfig());\n    this._overlayRef.keydownEvents().subscribe(event => {\n      this.overlayKeydown.next(event);\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\n  /**\n   * Builds the overlay config based on the directive's inputs\n   * @return {?}\n   */\n  _buildConfig() {\n    /** @type {?} */\n    const positionStrategy = this._position = this._createPositionStrategy();\n    /** @type {?} */\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n    return overlayConfig;\n  }\n  /**\n   * Updates the state of a position strategy, based on the values of the directive inputs.\n   * @param {?} positionStrategy\n   * @return {?}\n   */\n  _updatePositionStrategy(positionStrategy) {\n    /** @type {?} */\n    const positions = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY\n    }));\n    return positionStrategy.setOrigin(this.origin.elementRef).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition);\n  }\n  /**\n   * Returns the position strategy of the overlay to be set on the overlay config\n   * @return {?}\n   */\n  _createPositionStrategy() {\n    /** @type {?} */\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n    this._updatePositionStrategy(strategy);\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n    return strategy;\n  }\n  /**\n   * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n   * @return {?}\n   */\n  _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight\n      });\n    }\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    }\n  }\n  /**\n   * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n   * @return {?}\n   */\n  _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n    this._backdropSubscription.unsubscribe();\n  }\n  /**\n   * Destroys the overlay created by this directive.\n   * @return {?}\n   */\n  _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n    this._backdropSubscription.unsubscribe();\n  }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {\n  return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkConnectedOverlay,\n  selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n  inputs: {\n    viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n    open: [\"cdkConnectedOverlayOpen\", \"open\"],\n    scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n    offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n    offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n    hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n    lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n    flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n    growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n    push: [\"cdkConnectedOverlayPush\", \"push\"],\n    positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n    origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n    width: [\"cdkConnectedOverlayWidth\", \"width\"],\n    height: [\"cdkConnectedOverlayHeight\", \"height\"],\n    minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n    minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n    backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n    panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"]\n  },\n  outputs: {\n    backdropClick: \"backdropClick\",\n    positionChange: \"positionChange\",\n    attach: \"attach\",\n    detach: \"detach\",\n    overlayKeydown: \"overlayKeydown\"\n  },\n  exportAs: [\"cdkConnectedOverlay\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\nCdkConnectedOverlay.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: TemplateRef\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\nCdkConnectedOverlay.propDecorators = {\n  origin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOrigin']\n  }],\n  positions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPositions']\n  }],\n  offsetX: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetX']\n  }],\n  offsetY: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetY']\n  }],\n  width: [{\n    type: Input,\n    args: ['cdkConnectedOverlayWidth']\n  }],\n  height: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHeight']\n  }],\n  minWidth: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinWidth']\n  }],\n  minHeight: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinHeight']\n  }],\n  backdropClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayBackdropClass']\n  }],\n  panelClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPanelClass']\n  }],\n  viewportMargin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayViewportMargin']\n  }],\n  scrollStrategy: [{\n    type: Input,\n    args: ['cdkConnectedOverlayScrollStrategy']\n  }],\n  open: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOpen']\n  }],\n  hasBackdrop: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHasBackdrop']\n  }],\n  lockPosition: [{\n    type: Input,\n    args: ['cdkConnectedOverlayLockPosition']\n  }],\n  flexibleDimensions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayFlexibleDimensions']\n  }],\n  growAfterOpen: [{\n    type: Input,\n    args: ['cdkConnectedOverlayGrowAfterOpen']\n  }],\n  push: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPush']\n  }],\n  backdropClick: [{\n    type: Output\n  }],\n  positionChange: [{\n    type: Output\n  }],\n  attach: [{\n    type: Output\n  }],\n  detach: [{\n    type: Output\n  }],\n  overlayKeydown: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay'\n    }]\n  }], function () {\n    return [{\n      type: Overlay\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }],\n    open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }],\n    backdropClick: [{\n      type: Output\n    }],\n    positionChange: [{\n      type: Output\n    }],\n    attach: [{\n      type: Output\n    }],\n    detach: [{\n      type: Output\n    }],\n    overlayKeydown: [{\n      type: Output\n    }],\n    scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }],\n    offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }],\n    offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }],\n    lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }],\n    flexibleDimensions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }],\n    growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }],\n    push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }],\n    positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }],\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }],\n    width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }],\n    height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }],\n    minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }],\n    minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }],\n    backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPanelClass']\n    }]\n  });\n})();\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass OverlayModule {}\nOverlayModule.ɵfac = function OverlayModule_Factory(t) {\n  return new (t || OverlayModule)();\n};\nOverlayModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: OverlayModule\n});\nOverlayModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n  imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollingModule],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n      declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, {\n    declarations: function () {\n      return [CdkConnectedOverlay, CdkOverlayOrigin];\n    },\n    imports: function () {\n      return [BidiModule, PortalModule, ScrollingModule];\n    },\n    exports: function () {\n      return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule];\n    }\n  });\n})();\n/** *\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\nconst OVERLAY_PROVIDERS = [Overlay, OverlayPositionBuilder, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, OVERLAY_CONTAINER_PROVIDER, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n  /**\n   * @param {?} _document\n   */\n  constructor(_document) {\n    super(_document);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _createContainer() {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n  /**\n   * @return {?}\n   */\n  _adjustParentForFullscreenChange() {\n    if (!this._containerElement) {\n      return;\n    }\n    /** @type {?} */\n    const fullscreenElement = this.getFullscreenElement();\n    /** @type {?} */\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  _addFullscreenChangeListener(fn) {\n    /** @type {?} */\n    const eventName = this._getEventName();\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _getEventName() {\n    if (!this._fullScreenEventName) {\n      if (this._document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (this._document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if ( /** @type {?} */this._document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if ( /** @type {?} */this._document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n    return this._fullScreenEventName;\n  }\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   * @return {?}\n   */\n  getFullscreenElement() {\n    return this._document.fullscreenElement || this._document.webkitFullscreenElement || /** @type {?} */this._document.mozFullScreenElement || /** @type {?} */this._document.msFullscreenElement || null;\n  }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n  return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\nFullscreenOverlayContainer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FullscreenOverlayContainer,\n  factory: FullscreenOverlayContainer.ɵfac\n});\n/** @nocollapse */\nFullscreenOverlayContainer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };","map":{"version":3,"names":["coerceCssPixelValue","coerceArray","coerceBooleanProperty","ScrollDispatcher","ViewportRuler","ScrollingModule","VIEWPORT_RULER_PROVIDER","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","CdkScrollable","DOCUMENT","Location","Inject","Injectable","NgZone","Optional","NgModule","SkipSelf","ApplicationRef","ComponentFactoryResolver","Injector","ElementRef","Directive","EventEmitter","InjectionToken","Input","Output","TemplateRef","ViewContainerRef","defineInjectable","inject","Observable","Subject","merge","Subscription","take","takeUntil","Platform","Directionality","BidiModule","DomPortalOutlet","TemplatePortal","PortalModule","ESCAPE","BlockScrollStrategy","constructor","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","disable","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","ScrollStrategyOptions_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","undefined","decorators","args","ngInjectableDef","ngDevMode","ɵsetClassMetadata","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","Object","keys","forEach","k","key","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","i","length","_keydownEventSubscriptions","_keydownEvents","next","ngOnDestroy","_isAttached","addEventListener","push","index","indexOf","splice","removeEventListener","OverlayKeyboardDispatcher_Factory","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","provide","deps","useFactory","OverlayContainer","_containerElement","parentNode","removeChild","getContainerElement","_createContainer","container","createElement","appendChild","OverlayContainer_Factory","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","OVERLAY_CONTAINER_PROVIDER","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_keydownEventsObservable","create","observer","subscription","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","complete","backdropClick","attachments","detachments","keydownEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","assign","setDirection","dir","direction","getDirection","setAttribute","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","children","boundingBoxClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_positionChangeSubscriptions","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","isBrowser","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","nativeElement","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","querySelectorAll","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","virtualKeyboardOffset","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","dest","source","hasOwnProperty","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","withFallbackPosition","onPositionChange","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","global","elementRef","flexibleConnectedTo","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","Overlay_Factory","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","CdkOverlayOrigin_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","viewportMargin","open","positionChange","overlayKeydown","_templatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","lockPosition","_destroyOverlay","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","keyCode","_createPositionStrategy","currentPosition","p","emit","CdkConnectedOverlay_Factory","inputs","outputs","features","ɵɵNgOnChangesFeature","propDecorators","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","OverlayModule","OverlayModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","OVERLAY_PROVIDERS","FullscreenOverlayContainer","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory","ɵg","ɵf","ɵb","ɵa","ɵc","ɵe","ɵd"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/overlay.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} document\n     */\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    attach() { }\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    enable() {\n        if (this._canBeEnabled()) {\n            /** @type {?} */\n            const root = /** @type {?} */ ((this._document.documentElement));\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    disable() {\n        if (this._isEnabled) {\n            /** @type {?} */\n            const html = /** @type {?} */ ((this._document.documentElement));\n            /** @type {?} */\n            const body = /** @type {?} */ ((this._document.body));\n            /** @type {?} */\n            const htmlStyle = /** @type {?} */ (html.style);\n            /** @type {?} */\n            const bodyStyle = /** @type {?} */ (body.style);\n            /** @type {?} */\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            /** @type {?} */\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _canBeEnabled() {\n        /** @type {?} */\n        const html = /** @type {?} */ ((this._document.documentElement));\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        /** @type {?} */\n        const body = this._document.body;\n        /** @type {?} */\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        /** @type {?} */\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                /** @type {?} */\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > /** @type {?} */ ((/** @type {?} */ ((this._config)).threshold))) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\nclass NoopScrollStrategy {\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    enable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    disable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    attach() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        /** @type {?} */\n        const outsideAbove = element.bottom < containerBounds.top;\n        /** @type {?} */\n        const outsideBelow = element.top > containerBounds.bottom;\n        /** @type {?} */\n        const outsideLeft = element.right < containerBounds.left;\n        /** @type {?} */\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        /** @type {?} */\n        const clippedAbove = element.top < scrollContainerRect.top;\n        /** @type {?} */\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        /** @type {?} */\n        const clippedLeft = element.left < scrollContainerRect.left;\n        /** @type {?} */\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (!this._scrollSubscription) {\n            /** @type {?} */\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    /** @type {?} */\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    /** @type {?} */\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?} document\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /**\n         * Block scrolling.\n         */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ScrollStrategyOptions, factory: ScrollStrategyOptions.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = defineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(inject(ScrollDispatcher), inject(ViewportRuler), inject(NgZone), inject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nclass OverlayConfig {\n    /**\n     * @param {?=} config\n     */\n    constructor(config) {\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            Object.keys(config).forEach(k => {\n                /** @type {?} */\n                const key = /** @type {?} */ (k);\n                if (typeof config[key] !== 'undefined') {\n                    this[key] = config[key];\n                }\n            });\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nclass ConnectionPositionPair {\n    /**\n     * @param {?} origin\n     * @param {?} overlay\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @param {?=} panelClass\n     */\n    constructor(origin, overlay, offsetX, offsetY, panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nclass ScrollingVisibility {\n}\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nclass ConnectedOverlayPositionChange {\n    /**\n     * @param {?} connectionPair\n     * @param {?} scrollableViewProperties\n     */\n    constructor(connectionPair, /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/** @nocollapse */\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = (event) => {\n            /** @type {?} */\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._detach();\n    }\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener, true);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    }\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    remove(overlayRef) {\n        /** @type {?} */\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    }\n    /**\n     * Detaches the global keyboard event listener.\n     * @return {?}\n     */\n    _detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener, true);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OverlayKeyboardDispatcher, factory: OverlayKeyboardDispatcher.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = defineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(inject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        /** @type {?} */ ((\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT))\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nclass OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        this._document = _document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    _createContainer() {\n        /** @type {?} */\n        const container = this._document.createElement('div');\n        container.classList.add('cdk-overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayContainer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OverlayContainer, factory: OverlayContainer.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayContainer.ngInjectableDef = defineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(inject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        /** @type {?} */ (DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n        ) // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    /**\n     * @param {?} _portalOutlet\n     * @param {?} _host\n     * @param {?} _pane\n     * @param {?} _config\n     * @param {?} _ngZone\n     * @param {?} _keyboardDispatcher\n     * @param {?} _document\n     * @param {?=} _location\n     */\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._keydownEventsObservable = Observable.create((observer) => {\n            /** @type {?} */\n            const subscription = this._keydownEvents.subscribe(observer);\n            this._keydownEventSubscriptions++;\n            return () => {\n                subscription.unsubscribe();\n                this._keydownEventSubscriptions--;\n            };\n        });\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            _config.scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /**\n     * The overlay's HTML element\n     * @return {?}\n     */\n    get overlayElement() {\n        return this._pane;\n    }\n    /**\n     * The overlay's backdrop HTML element.\n     * @return {?}\n     */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     * @return {?}\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    attach(portal) {\n        /** @type {?} */\n        let attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        /** @type {?} */\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    }\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        /** @type {?} */\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = /** @type {?} */ ((null));\n        }\n        this._previousHostParent = this._pane = /** @type {?} */ ((null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._backdropClick.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    attachments() {\n        return this._attachments.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    detachments() {\n        return this._detachments.asObservable();\n    }\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._keydownEventsObservable;\n    }\n    /**\n     * Gets the the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    getConfig() {\n        return this._config;\n    }\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    updateSize(sizeConfig) {\n        this._config = Object.assign({}, this._config, sizeConfig);\n        this._updateElementSize();\n    }\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    setDirection(dir) {\n        this._config = Object.assign({}, this._config, { direction: dir });\n        this._updateElementDirection();\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    getDirection() {\n        /** @type {?} */\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @return {?}\n     */\n    _updateElementSize() {\n        /** @type {?} */\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    _attachBackdrop() {\n        /** @type {?} */\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        } /** @type {?} */\n        ((\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', (event) => this._backdropClick.next(event));\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            /** @type {?} */ ((this._host.parentNode)).appendChild(this._host);\n        }\n    }\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    detachBackdrop() {\n        /** @type {?} */\n        let backdropToDetach = this._backdropElement;\n        if (backdropToDetach) {\n            /** @type {?} */\n            let timeoutId;\n            /** @type {?} */\n            let finishDetach = () => {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (this._backdropElement == backdropToDetach) {\n                    this._backdropElement = null;\n                }\n                clearTimeout(timeoutId);\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                /** @type {?} */ ((backdropToDetach)).addEventListener('transitionend', finishDetach);\n            });\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n        }\n    }\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    _toggleClasses(element, cssClasses, isAdd) {\n        /** @type {?} */\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        });\n    }\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @return {?}\n     */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            /** @type {?} */\n            const subscription = this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Class to be added to the overlay bounding box.\n  @type {?} */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /**\n     * @param {?} connectedTo\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?=} _platform\n     * @param {?=} _overlayContainer\n     */\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this.scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Amount of subscribers to the `positionChanges` stream.\n         */\n        this._positionChangeSubscriptions = 0;\n        /**\n         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n         */\n        this._appliedPanelClasses = [];\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = Observable.create((observer) => {\n            /** @type {?} */\n            const subscription = this._positionChanges.subscribe(observer);\n            this._positionChangeSubscriptions++;\n            return () => {\n                subscription.unsubscribe();\n                this._positionChangeSubscriptions--;\n            };\n        });\n        this.setOrigin(connectedTo);\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        // @breaking-change 8.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n        if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        const originRect = this._originRect;\n        /** @type {?} */\n        const overlayRect = this._overlayRect;\n        /** @type {?} */\n        const viewportRect = this._viewportRect;\n        /** @type {?} */\n        const flexibleFits = [];\n        /** @type {?} */\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            /** @type {?} */\n            let originPoint = this._getOriginPoint(originRect, pos);\n            /** @type {?} */\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            /** @type {?} */\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            /** @type {?} */\n            let bestFit = null;\n            /** @type {?} */\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                /** @type {?} */\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(/** @type {?} */ ((bestFit)).position, /** @type {?} */ ((bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, /** @type {?} */ ({\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            }));\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = /** @type {?} */ ((null));\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._origin.getBoundingClientRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            /** @type {?} */\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            /** @type {?} */\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this.scrollables = scrollables;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param {?} positions List of positions options for this overlay.\n     * @return {?}\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(/** @type {?} */ ((this._lastPosition))) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {?}\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @param {?=} flexibleDimensions\n     * @return {?}\n     */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @param {?=} growAfterOpen\n     * @return {?}\n     */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @param {?=} canPush\n     * @return {?}\n     */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    setOrigin(origin) {\n        this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {?}\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOriginPoint(originRect, pos) {\n        /** @type {?} */\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            /** @type {?} */\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            /** @type {?} */\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        /** @type {?} */\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        /** @type {?} */\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        /** @type {?} */\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        /** @type {?} */\n        let leftOverflow = 0 - x;\n        /** @type {?} */\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        /** @type {?} */\n        let topOverflow = 0 - y;\n        /** @type {?} */\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        /** @type {?} */\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        /** @type {?} */\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        /** @type {?} */\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            /** @type {?} */\n            const availableHeight = viewport.bottom - point.y;\n            /** @type {?} */\n            const availableWidth = viewport.right - point.x;\n            /** @type {?} */\n            const minHeight = this._overlayRef.getConfig().minHeight;\n            /** @type {?} */\n            const minWidth = this._overlayRef.getConfig().minWidth;\n            /** @type {?} */\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            /** @type {?} */\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        /** @type {?} */\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        /** @type {?} */\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        /** @type {?} */\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        /** @type {?} */\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        /** @type {?} */\n        let pushX = 0;\n        /** @type {?} */\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width < viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height < viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChangeSubscriptions > 0) {\n            /** @type {?} */\n            const scrollableViewProperties = this._getScrollVisibility();\n            /** @type {?} */\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @param {?} position\n     * @return {?}\n     */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        /** @type {?} */\n        const elements = /** @type {?} */ ((this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        /** @type {?} */\n        let xOrigin;\n        /** @type {?} */\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        let height;\n        /** @type {?} */\n        let top;\n        /** @type {?} */\n        let bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.bottom - origin.y;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            /** @type {?} */\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        /** @type {?} */\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        /** @type {?} */\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        /** @type {?} */\n        let width;\n        /** @type {?} */\n        let left;\n        /** @type {?} */\n        let right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            /** @type {?} */\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: /** @type {?} */ ((top)), left: /** @type {?} */ ((left)), bottom: /** @type {?} */ ((bottom)), right: /** @type {?} */ ((right)), width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    _setBoundingBoxStyles(origin, position) {\n        /** @type {?} */\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        /** @type {?} */\n        const styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            /** @type {?} */\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            /** @type {?} */\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, styles);\n    }\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @return {?}\n     */\n    _resetBoundingBoxStyles() {\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, /** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        }));\n    }\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @return {?}\n     */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, /** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n        }));\n    }\n    /**\n     * Sets positioning styles to the overlay element.\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    _setOverlayElementStyles(originPoint, position) {\n        /** @type {?} */\n        const styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            /** @type {?} */\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        /** @type {?} */\n        let transformString = '';\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        /** @type {?} */\n        let styles = /** @type {?} */ ({ top: null, bottom: null });\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        let virtualKeyboardOffset = this._overlayContainer ?\n            this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            /** @type {?} */\n            const documentHeight = /** @type {?} */ ((this._document.documentElement)).clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        /** @type {?} */\n        let styles = /** @type {?} */ ({ left: null, right: null });\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            /** @type {?} */\n            const documentWidth = /** @type {?} */ ((this._document.documentElement)).clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @return {?}\n     */\n    _getScrollVisibility() {\n        /** @type {?} */\n        const originBounds = this._origin.getBoundingClientRect();\n        /** @type {?} */\n        const overlayBounds = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        const scrollContainerBounds = this.scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @return {?}\n     */\n    _getNarrowedViewportRect() {\n        /** @type {?} */\n        const width = /** @type {?} */ ((this._document.documentElement)).clientWidth;\n        /** @type {?} */\n        const height = /** @type {?} */ ((this._document.documentElement)).clientHeight;\n        /** @type {?} */\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @return {?}\n     */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /**\n     * Validates that the current position match the expected values.\n     * @return {?}\n     */\n    _validatePositions() {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach(pair => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    }\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @return {?}\n     */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => this._pane.classList.remove(cssClass));\n            this._appliedPanelClasses = [];\n        }\n    }\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    /**\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?} connectedTo\n     * @param {?} viewportRuler\n     * @param {?} document\n     * @param {?=} platform\n     */\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, \n    // @breaking-change 8.0.0 `platform` parameter to be made required.\n    platform) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy =\n            new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Emits an event when the connection point changes.\n     * @return {?}\n     */\n    get onPositionChange() {\n        return this._positionStrategy.positionChanges;\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {?}\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        /** @type {?} */\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {?}\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Class to be added to the overlay pane wrapper.\n  @type {?} */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        /** @type {?} */\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parentStyles = this._overlayRef.hostElement.style;\n        /** @type {?} */\n        const config = this._overlayRef.getConfig();\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parent = this._overlayRef.hostElement;\n        /** @type {?} */\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = /** @type {?} */ ((null));\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nclass OverlayPositionBuilder {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?=} _platform\n     * @param {?=} _overlayContainer\n     */\n    constructor(_viewportRuler, _document, \n    // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    flexibleConnectedTo(elementRef) {\n        return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform, 8), ɵngcc0.ɵɵinject(OverlayContainer, 8)); };\nOverlayPositionBuilder.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OverlayPositionBuilder, factory: OverlayPositionBuilder.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform, decorators: [{ type: Optional }] },\n    { type: OverlayContainer, decorators: [{ type: Optional }] }\n];\n/** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = defineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(inject(ViewportRuler), inject(DOCUMENT), inject(Platform, 8), inject(OverlayContainer, 8)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform, decorators: [{\n                type: Optional\n            }] }, { type: OverlayContainer, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Next overlay unique ID.\n  @type {?} */\nlet nextUniqueId = 0;\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    /**\n     * @param {?} scrollStrategies\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _positionBuilder\n     * @param {?} _keyboardDispatcher\n     * @param {?} _injector\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?} _directionality\n     * @param {?=} _location\n     */\n    constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    create(config) {\n        /** @type {?} */\n        const host = this._createHostElement();\n        /** @type {?} */\n        const pane = this._createPaneElement(host);\n        /** @type {?} */\n        const portalOutlet = this._createPortalOutlet(pane);\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    _createPaneElement(host) {\n        /** @type {?} */\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @return {?} Newly-create host element.\n     */\n    _createHostElement() {\n        /** @type {?} */\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8)); };\nOverlay.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\n/** @nocollapse */\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n  @type {?} */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** *\n * Injection token that determines the scroll handling while the connected overlay is open.\n  @type {?} */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\n/** @nocollapse */\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    /**\n     * @param {?} _overlay\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} scrollStrategyFactory\n     * @param {?} _dir\n     */\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the x-axis\n     * @return {?}\n     */\n    get offsetX() { return this._offsetX; }\n    /**\n     * @param {?} offsetX\n     * @return {?}\n     */\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the y-axis\n     * @return {?}\n     */\n    get offsetY() { return this._offsetY; }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * Whether or not the overlay should attach a backdrop.\n     * @return {?}\n     */\n    get hasBackdrop() { return this._hasBackdrop; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /**\n     * Whether or not the overlay should be locked when scrolling.\n     * @return {?}\n     */\n    get lockPosition() { return this._lockPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @return {?}\n     */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n     * @return {?}\n     */\n    get growAfterOpen() { return this._growAfterOpen; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @return {?}\n     */\n    get push() { return this._push; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /**\n     * The associated overlay reference.\n     * @return {?}\n     */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /**\n     * The element's layout direction.\n     * @return {?}\n     */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyOverlay();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /**\n     * Creates an overlay\n     * @return {?}\n     */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n        this._overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE) {\n                this._detachOverlay();\n            }\n        });\n    }\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    _buildConfig() {\n        /** @type {?} */\n        const positionStrategy = this._position = this._createPositionStrategy();\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _updatePositionStrategy(positionStrategy) {\n        /** @type {?} */\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n    }\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    _createPositionStrategy() {\n        /** @type {?} */\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n        return strategy;\n    }\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n    }\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    _destroyOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }] }); })();\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = function OverlayModule_Factory(t) { return new (t || OverlayModule)(); };\nOverlayModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n/** *\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        super(_document);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    /**\n     * @return {?}\n     */\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        /** @type {?} */\n        const fullscreenElement = this.getFullscreenElement();\n        /** @type {?} */\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    _addFullscreenChangeListener(fn) {\n        /** @type {?} */\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            if (this._document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (this._document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    getFullscreenElement() {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            (/** @type {?} */ (this._document)).mozFullScreenElement ||\n            (/** @type {?} */ (this._document)).msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nFullscreenOverlayContainer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FullscreenOverlayContainer, factory: FullscreenOverlayContainer.ɵfac });\n/** @nocollapse */\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}