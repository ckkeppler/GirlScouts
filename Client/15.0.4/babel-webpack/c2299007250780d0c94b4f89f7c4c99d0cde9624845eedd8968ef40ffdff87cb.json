{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Subscription, defer, fromEvent, merge, of, Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n  }\n}\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n  /**\n   * @param {?} source\n   * @param {?} option\n   */\n  constructor(source, option) {\n    this.source = source;\n    this.option = option;\n  }\n}\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** *\n * Injection token to be used to override the default options for `mat-autocomplete`.\n  @type {?} */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} defaults\n   */\n  constructor(_changeDetectorRef, _elementRef, defaults) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    /**\n     * Whether the autocomplete panel should be visible, depending on option length.\n     */\n    this.showPanel = false;\n    this._isOpen = false;\n    /**\n     * Function that maps an option's control value to its display value in the trigger.\n     */\n    this.displayWith = null;\n    /**\n     * Event that is emitted whenever an option from the list is selected.\n     */\n    this.optionSelected = new EventEmitter();\n    /**\n     * Event that is emitted when the autocomplete panel is opened.\n     */\n    this.opened = new EventEmitter();\n    /**\n     * Event that is emitted when the autocomplete panel is closed.\n     */\n    this.closed = new EventEmitter();\n    this._classList = {};\n    /**\n     * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n     */\n    this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n  /**\n   * Whether the autocomplete panel is open.\n   * @return {?}\n   */\n  get isOpen() {\n    return this._isOpen && this.showPanel;\n  }\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   * @return {?}\n   */\n  get autoActiveFirstOption() {\n    return this._autoActiveFirstOption;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set autoActiveFirstOption(value) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   * @param {?} value\n   * @return {?}\n   */\n  set classList(value) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   * @param {?} scrollTop\n   * @return {?}\n   */\n  _setScrollTop(scrollTop) {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n  /**\n   * Returns the panel's scrollTop.\n   * @return {?}\n   */\n  _getScrollTop() {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n  /**\n   * Panel should hide itself when the option list is empty.\n   * @return {?}\n   */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Emits the `select` event.\n   * @param {?} option\n   * @return {?}\n   */\n  _emitSelectEvent(option) {\n    /** @type {?} */\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) {\n  return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS));\n};\nMatAutocomplete.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatAutocomplete,\n  selectors: [[\"mat-autocomplete\"]],\n  contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  viewQuery: function MatAutocomplete_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-autocomplete\"],\n  inputs: {\n    disableRipple: \"disableRipple\",\n    displayWith: \"displayWith\",\n    autoActiveFirstOption: \"autoActiveFirstOption\",\n    classList: [\"class\", \"classList\"],\n    panelWidth: \"panelWidth\"\n  },\n  outputs: {\n    optionSelected: \"optionSelected\",\n    opened: \"opened\",\n    closed: \"closed\"\n  },\n  exportAs: [\"matAutocomplete\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatAutocomplete\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n  template: function MatAutocomplete_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    }\n  },\n  dependencies: [ɵngcc1.NgClass],\n  styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n  }]\n}];\nMatAutocomplete.propDecorators = {\n  template: [{\n    type: ViewChild,\n    args: [TemplateRef]\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MatOptgroup]\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  autoActiveFirstOption: [{\n    type: Input\n  }],\n  panelWidth: [{\n    type: Input\n  }],\n  optionSelected: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  closed: [{\n    type: Output\n  }],\n  classList: [{\n    type: Input,\n    args: ['class']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      inputs: ['disableRipple'],\n      host: {\n        'class': 'mat-autocomplete'\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }],\n      styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    displayWith: [{\n      type: Input\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    autoActiveFirstOption: [{\n      type: Input\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }],\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MatOptgroup]\n    }],\n    panelWidth: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n  /**\n   * @param {?} elementRef\n   */\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n  }\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) {\n  return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteOrigin,\n  selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n  exportAs: [\"matAutocompleteOrigin\"]\n});\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [{\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * The height of each autocomplete option.\n  @type {?} */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** *\n * The total height of the autocomplete panel.\n  @type {?} */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** *\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n  @type {?} */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/** *\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n  @type {?} */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n  /**\n   * @param {?} _element\n   * @param {?} _overlay\n   * @param {?} _viewContainerRef\n   * @param {?} _zone\n   * @param {?} _changeDetectorRef\n   * @param {?} scrollStrategy\n   * @param {?} _dir\n   * @param {?} _formField\n   * @param {?} _document\n   * @param {?=} _viewportRuler\n   */\n  constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /**\n     * Whether or not the label state is being overridden.\n     */\n    this._manuallyFloatingLabel = false;\n    /**\n     * Subscription to viewport size changes.\n     */\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    this._canOpenOnNextFocus = true;\n    /**\n     * Stream of keyboard events that can close the panel.\n     */\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    this._windowBlurHandler = () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /**\n     * `View -> model callback called when value changes`\n     */\n    this._onChange = () => {};\n    /**\n     * `View -> model callback called when autocomplete has been touched`\n     */\n    this._onTouched = () => {};\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * \\@docs-private\n     */\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /**\n     * Stream of autocomplete option selections.\n     */\n    this.optionSelections = defer(() => {\n      if (this.autocomplete && this.autocomplete.options) {\n        return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n      }\n      // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n      return this._zone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionSelections));\n    });\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   * @return {?}\n   */\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set autocompleteDisabled(value) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n  /**\n   * Whether or not the autocomplete panel is open.\n   * @return {?}\n   */\n  get panelOpen() {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  /**\n   * Opens the autocomplete suggestion panel.\n   * @return {?}\n   */\n  openPanel() {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n  /**\n   * Closes the autocomplete suggestion panel.\n   * @return {?}\n   */\n  closePanel() {\n    this._resetLabel();\n    if (!this._overlayAttached) {\n      return;\n    }\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n    this.autocomplete._isOpen = this._overlayAttached = false;\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   * @return {?}\n   */\n  updatePosition() {\n    if (this._overlayAttached) {\n      /** @type {?} */this._overlayRef.updatePosition();\n    }\n  }\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   * @return {?}\n   */\n  get panelClosingActions() {\n    return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe(\n    // Normalize the output so we return a consistent type.\n    map(event => event instanceof MatOptionSelectionChange ? event : null));\n  }\n  /**\n   * The currently active option, coerced to MatOption type.\n   * @return {?}\n   */\n  get activeOption() {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n    return null;\n  }\n  /**\n   * Stream of clicks outside of the autocomplete panel.\n   * @return {?}\n   */\n  _getOutsideClickStream() {\n    if (!this._document) {\n      return of(null);\n    }\n    return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n      /** @type {?} */\n      const clickTarget = /** @type {?} */event.target;\n      /** @type {?} */\n      const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n      return this._overlayAttached && clickTarget !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget);\n    }));\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _handleKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      /** @type {?} */\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      /** @type {?} */\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _handleInput(event) {\n    /** @type {?} */\n    let target = /** @type {?} */event.target;\n    /** @type {?} */\n    let value = target.value;\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _handleFocus() {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n   * @return {?}\n   */\n  _floatLabel(shouldAnimate = false) {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n      this._manuallyFloatingLabel = true;\n    }\n  }\n  /**\n   * If the label has been manually elevated, return it to its normal state.\n   * @return {?}\n   */\n  _resetLabel() {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   * @return {?}\n   */\n  _scrollToOption() {\n    /** @type {?} */\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    /** @type {?} */\n    const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n    /** @type {?} */\n    const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   * @return {?}\n   */\n  _subscribeToClosingActions() {\n    /** @type {?} */\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    /** @type {?} */\n    const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()),\n    // Defer emitting to the stream until the next tick, because changing\n    // bindings in here will cause \"changed after checked\" errors.\n    delay(0));\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges).pipe(\n    // create a new stream of panelClosingActions, replacing any previous streams\n    // that were created, and flatten it so our stream only emits closing events...\n    switchMap(() => {\n      this._resetActiveItem();\n      this.autocomplete._setVisibility();\n      if (this.panelOpen) {\n        /** @type {?} */this._overlayRef.updatePosition();\n      }\n      return this.panelClosingActions;\n    }),\n    // when the first closing event occurs...\n    take(1))\n    // set the value, close the panel, and complete.\n    .subscribe(event => this._setValueAndClose(event));\n  }\n  /**\n   * Destroys the autocomplete suggestion panel.\n   * @return {?}\n   */\n  _destroyPanel() {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  _setTriggerValue(value) {\n    /** @type {?} */\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    /** @type {?} */\n    const inputValue = toDisplay != null ? toDisplay : '';\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n    this._previousValue = inputValue;\n  }\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   * @param {?} event\n   * @return {?}\n   */\n  _setValueAndClose(event) {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n    this.closePanel();\n  }\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   * @param {?} skip\n   * @return {?}\n   */\n  _clearPreviousSelectedOption(skip) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n  _attachOverlay() {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || event.keyCode === UP_ARROW && event.altKey) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({\n              width: this._getPanelWidth()\n            });\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({\n        width: this._getPanelWidth()\n      });\n    }\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n    /** @type {?} */\n    const wasOpen = this.panelOpen;\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n  /**\n   * @return {?}\n   */\n  _getOverlayPosition() {\n    this._positionStrategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false).withPositions([{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    }]);\n    return this._positionStrategy;\n  }\n  /**\n   * @return {?}\n   */\n  _getConnectedElement() {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n  /**\n   * @return {?}\n   */\n  _getPanelWidth() {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n  /**\n   * Returns the width of the input element, so the panel width can match it.\n   * @return {?}\n   */\n  _getHostWidth() {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   * @return {?}\n   */\n  _resetActiveItem() {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n  /**\n   * Determines whether the panel can be opened.\n   * @return {?}\n   */\n  _canOpen() {\n    /** @type {?} */\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) {\n  return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.MatFormField, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler));\n};\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteTrigger,\n  selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n  hostVars: 6,\n  hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n        return ctx._onTouched();\n      })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n        return ctx._handleInput($event);\n      })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.activeOption == null ? null : ctx.activeOption.id)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id);\n    }\n  },\n  inputs: {\n    autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n    autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"],\n    autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n    connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"]\n  },\n  exportAs: [\"matAutocompleteTrigger\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR])]\n});\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Overlay\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Host\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: ViewportRuler\n}];\nMatAutocompleteTrigger.propDecorators = {\n  autocomplete: [{\n    type: Input,\n    args: ['matAutocomplete']\n  }],\n  connectedTo: [{\n    type: Input,\n    args: ['matAutocompleteConnectedTo']\n  }],\n  autocompleteAttribute: [{\n    type: Input,\n    args: ['autocomplete']\n  }],\n  autocompleteDisabled: [{\n    type: Input,\n    args: ['matAutocompleteDisabled']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n      host: {\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': 'activeOption?.id',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.Overlay\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Host\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc5.ViewportRuler\n    }];\n  }, {\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: ['matAutocompleteDisabled']\n    }],\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) {\n  return new (t || MatAutocompleteModule)();\n};\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatAutocompleteModule\n});\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule, MatOptionModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n      exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, {\n    declarations: function () {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin];\n    },\n    imports: function () {\n      return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule];\n    },\n    exports: function () {\n      return [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MatAutocompleteBase, _MatAutocompleteMixinBase, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin as ɵa29 };","map":{"version":3,"names":["ActiveDescendantKeyManager","coerceBooleanProperty","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","ElementRef","EventEmitter","Inject","InjectionToken","Input","Output","TemplateRef","ViewChild","ViewEncapsulation","Directive","forwardRef","Host","NgZone","Optional","ViewContainerRef","NgModule","MAT_OPTION_PARENT_COMPONENT","MatOptgroup","MatOption","mixinDisableRipple","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionSelectionChange","MatOptionModule","MatCommonModule","Directionality","DOWN_ARROW","ENTER","ESCAPE","TAB","UP_ARROW","Overlay","OverlayConfig","OverlayModule","TemplatePortal","DOCUMENT","CommonModule","filter","take","switchMap","delay","tap","map","ViewportRuler","NG_VALUE_ACCESSOR","MatFormField","Subscription","defer","fromEvent","merge","of","Subject","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵproperty","id","_classList","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","showPanel","_isOpen","displayWith","optionSelected","opened","closed","_autoActiveFirstOption","isOpen","value","classList","length","split","forEach","className","trim","nativeElement","ngAfterContentInit","_keyManager","options","withWrap","_setVisibility","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","emit","ɵfac","MatAutocomplete_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","optionGroups","viewQuery","MatAutocomplete_Query","ɵɵviewQuery","template","first","hostAttrs","inputs","disableRipple","panelWidth","outputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","dependencies","NgClass","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","descendants","ngDevMode","ɵsetClassMetadata","selector","None","OnPush","host","providers","MatAutocompleteOrigin","elementRef","MatAutocompleteOrigin_Factory","ɵdir","ɵɵdefineDirective","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","EMPTY","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","document","activeElement","panelOpen","_onChange","_onTouched","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","asObservable","pipe","window","runOutsideAngular","addEventListener","_scrollStrategy","autocompleteDisabled","ngOnDestroy","removeEventListener","unsubscribe","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_overlayRef","hasAttached","detach","_closingActionsSubscription","detectChanges","updatePosition","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","target","formField","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","_handleInput","parseFloat","_previousValue","_handleFocus","shouldAnimate","floatLabel","_animateAndLockLabel","index","activeItemIndex","labelCount","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","changes","_positionStrategy","reapplyLastPosition","subscribe","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","selected","deselect","_portal","create","_getOverlayConfig","keydownEvents","altKey","next","change","updateSize","width","_getPanelWidth","attach","wasOpen","positionStrategy","_getOverlayPosition","direction","position","flexibleConnectedTo","_getConnectedElement","withFlexibleDimensions","withPush","withPositions","originX","originY","overlayX","overlayY","panelClass","connectedTo","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","ɵɵlistener","MatAutocompleteTrigger_focusin_HostBindingHandler","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","MatAutocompleteTrigger_keydown_HostBindingHandler","ɵɵattribute","toString","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","ɵa29"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/material/__ivy_ngcc__/esm2015/autocomplete.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Subscription, defer, fromEvent, merge, of, Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** *\n * Injection token to be used to override the default options for `mat-autocomplete`.\n  @type {?} */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            value.split(' ').forEach(className => this._classList[className.trim()] = true);\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mat-autocomplete-visible'] = this.showPanel;\n        this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)); };\nMatAutocomplete.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatAutocomplete_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\", displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, dependencies: [ɵngcc1.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef,] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{ selector: 'mat-autocomplete', template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', inputs: ['disableRipple'], host: {\n                    'class': 'mat-autocomplete'\n                }, providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"] }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup]\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"] });\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * The height of each autocomplete option.\n  @type {?} */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** *\n * The total height of the autocomplete panel.\n  @type {?} */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** *\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n  @type {?} */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** *\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n  @type {?} */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = () => { };\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = () => { };\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        if (typeof window !== 'undefined') {\n            _zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            });\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            /** @type {?} */ ((this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        if (!this._document) {\n            return of(null);\n        }\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            /** @type {?} */\n            const clickTarget = /** @type {?} */ (event.target);\n            /** @type {?} */\n            const formField = this._formField ?\n                this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = /** @type {?} */ (event.target);\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value && document.activeElement === event.target) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen()) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        /** @type {?} */\n        const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n        this.autocomplete._setScrollTop(newScrollPosition);\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                /** @type {?} */ ((this._overlayRef)).updatePosition();\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        if (!this._overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            this._overlayRef = this._overlay.create(this._getOverlayConfig());\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            this._overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                }\n            });\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && this._overlayRef) {\n                        this._overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                });\n            }\n        }\n        else {\n            // Update the panel width and direction, in case anything has changed.\n            this._overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (this._overlayRef && !this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        this._positionStrategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top'\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                // The overlay edge connected to the trigger should have squared corners, while\n                // the opposite end has rounded corners. We apply a CSS class to swap the\n                // border-radius based on the overlay position.\n                panelClass: 'mat-autocomplete-panel-above'\n            }\n        ]);\n        return this._positionStrategy;\n    }\n    /**\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.MatFormField, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler)); };\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostVars: 6, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.activeOption == null ? null : ctx.activeOption.id)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id);\n    } }, inputs: { autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR])] });\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': 'activeOption?.id',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }]; }, { autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); };\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule, MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule]; }, exports: function () { return [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MatAutocompleteBase, _MatAutocompleteMixinBase, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin as ɵa29 };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}