{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Observable, BehaviorSubject, of, Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Directive, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, Input, IterableDiffers, ViewChild, ViewEncapsulation, Optional, Renderer2, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n  constructor() {\n    /**\n     * A selection model with multi-selection to track expansion status.\n     */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /**\n   * Toggles one single data node's expanded/collapsed state.\n   * @param {?} dataNode\n   * @return {?}\n   */\n  toggle(dataNode) {\n    this.expansionModel.toggle(dataNode);\n  }\n  /**\n   * Expands one single data node.\n   * @param {?} dataNode\n   * @return {?}\n   */\n  expand(dataNode) {\n    this.expansionModel.select(dataNode);\n  }\n  /**\n   * Collapses one single data node.\n   * @param {?} dataNode\n   * @return {?}\n   */\n  collapse(dataNode) {\n    this.expansionModel.deselect(dataNode);\n  }\n  /**\n   * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n   * @param {?} dataNode\n   * @return {?}\n   */\n  isExpanded(dataNode) {\n    return this.expansionModel.isSelected(dataNode);\n  }\n  /**\n   * Toggles a subtree rooted at `node` recursively.\n   * @param {?} dataNode\n   * @return {?}\n   */\n  toggleDescendants(dataNode) {\n    this.expansionModel.isSelected(dataNode) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n  }\n  /**\n   * Collapse all dataNodes in the tree.\n   * @return {?}\n   */\n  collapseAll() {\n    this.expansionModel.clear();\n  }\n  /**\n   * Expands a subtree rooted at given data node recursively.\n   * @param {?} dataNode\n   * @return {?}\n   */\n  expandDescendants(dataNode) {\n    /** @type {?} */\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed);\n  }\n  /**\n   * Collapses a subtree rooted at given data node recursively.\n   * @param {?} dataNode\n   * @return {?}\n   */\n  collapseDescendants(dataNode) {\n    /** @type {?} */\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\nclass FlatTreeControl extends BaseTreeControl {\n  /**\n   * Construct with flat tree data node functions getLevel and isExpandable.\n   * @param {?} getLevel\n   * @param {?} isExpandable\n   */\n  constructor(getLevel, isExpandable) {\n    super();\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   * @param {?} dataNode\n   * @return {?}\n   */\n  getDescendants(dataNode) {\n    /** @type {?} */\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    /** @type {?} */\n    const results = [];\n    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n    for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n      results.push(this.dataNodes[i]);\n    }\n    return results;\n  }\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   * @return {?}\n   */\n  expandAll() {\n    this.expansionModel.select(...this.dataNodes);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\nclass NestedTreeControl extends BaseTreeControl {\n  /**\n   * Construct with nested tree function getChildren.\n   * @param {?} getChildren\n   */\n  constructor(getChildren) {\n    super();\n    this.getChildren = getChildren;\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   * @return {?}\n   */\n  expandAll() {\n    this.expansionModel.clear();\n    /** @type {?} */\n    const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes);\n  }\n  /**\n   * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n   * @param {?} dataNode\n   * @return {?}\n   */\n  getDescendants(dataNode) {\n    /** @type {?} */\n    const descendants = [];\n    this._getDescendants(descendants, dataNode);\n    // Remove the node itself\n    return descendants.splice(1);\n  }\n  /**\n   * A helper function to get descendants recursively.\n   * @param {?} descendants\n   * @param {?} dataNode\n   * @return {?}\n   */\n  _getDescendants(descendants, dataNode) {\n    descendants.push(dataNode);\n    /** @type {?} */\n    const childrenNodes = this.getChildren(dataNode);\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach(child => this._getDescendants(descendants, child));\n    } else if (childrenNodes instanceof Observable) {\n      childrenNodes.pipe(take(1)).subscribe(children => {\n        children.forEach(child => this._getDescendants(descendants, child));\n      });\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Context provided to the tree node component.\n * @template T\n */\nclass CdkTreeNodeOutletContext {\n  /**\n   * @param {?} data\n   */\n  constructor(data) {\n    this.$implicit = data;\n  }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n * @template T\n */\nclass CdkTreeNodeDef {\n  /**\n   * \\@docs-private\n   * @param {?} template\n   */\n  constructor(template) {\n    this.template = template;\n  }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) {\n  return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nCdkTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeDef,\n  selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"cdkTreeNodeDefWhen\", \"when\"]\n  }\n});\n/** @nocollapse */\nCdkTreeNodeDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeDef]',\n      inputs: ['when: cdkTreeNodeDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n  /**\n   * @param {?} viewContainer\n   */\n  constructor(viewContainer) {\n    this.viewContainer = viewContainer;\n  }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n  return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\nCdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeOutlet,\n  selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]]\n});\n/** @nocollapse */\nCdkTreeNodeOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n * @template T\n */\nclass CdkTree {\n  /**\n   * @param {?} _differs\n   * @param {?} _changeDetectorRef\n   */\n  constructor(_differs, _changeDetectorRef) {\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n    this._onDestroy = new Subject();\n    /**\n     * Level of nodes\n     */\n    this._levels = new Map();\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n  }\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   * @return {?}\n   */\n  get dataSource() {\n    return this._dataSource;\n  }\n  /**\n   * @param {?} dataSource\n   * @return {?}\n   */\n  set dataSource(dataSource) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\n    if (!this.treeControl) {\n      throw getTreeControlMissingError();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._nodeOutlet.viewContainer.clear();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n    if (this._dataSource && typeof /** @type {?} */this._dataSource.disconnect === 'function') {\n      /** @type {?} */this.dataSource.disconnect(this);\n    }\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentChecked() {\n    /** @type {?} */\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n    if (defaultNodeDefs.length > 1) {\n      throw getTreeMultipleDefaultNodeDefsError();\n    }\n    this._defaultNodeDef = defaultNodeDefs[0];\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   * @param {?} dataSource\n   * @return {?}\n   */\n  _switchDataSource(dataSource) {\n    if (this._dataSource && typeof /** @type {?} */this._dataSource.disconnect === 'function') {\n      /** @type {?} */this.dataSource.disconnect(this);\n    }\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n    // Remove the all dataNodes if there is now no data source\n    if (!dataSource) {\n      this._nodeOutlet.viewContainer.clear();\n    }\n    this._dataSource = dataSource;\n    if (this._nodeDefs) {\n      this._observeRenderChanges();\n    }\n  }\n  /**\n   * Set up a subscription for the data provided by the data source.\n   * @return {?}\n   */\n  _observeRenderChanges() {\n    /** @type {?} */\n    let dataStream;\n    // Cannot use `instanceof DataSource` since the data source could be a literal with\n    // `connect` function and may not extends DataSource.\n    if (typeof /** @type {?} */this._dataSource.connect === 'function') {\n      dataStream = /** @type {?} */this._dataSource.connect(this);\n    } else if (this._dataSource instanceof Observable) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = of(this._dataSource);\n    }\n    if (dataStream) {\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => this.renderNodeChanges(data));\n    } else {\n      throw getTreeNoValidDataSourceError();\n    }\n  }\n  /**\n   * Check for changes made in the data and render each change (node added/removed/moved).\n   * @param {?} data\n   * @param {?=} dataDiffer\n   * @param {?=} viewContainer\n   * @param {?=} parentData\n   * @return {?}\n   */\n  renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n    /** @type {?} */\n    const changes = dataDiffer.diff(data);\n    if (!changes) {\n      return;\n    }\n    changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n      if (item.previousIndex == null) {\n        this.insertNode(data[/** @type {?} */currentIndex], /** @type {?} */currentIndex, viewContainer, parentData);\n      } else if (currentIndex == null) {\n        viewContainer.remove( /** @type {?} */adjustedPreviousIndex);\n        this._levels.delete(item.item);\n      } else {\n        /** @type {?} */\n        const view = viewContainer.get( /** @type {?} */adjustedPreviousIndex);\n        viewContainer.move( /** @type {?} */view, currentIndex);\n      }\n    });\n    this._changeDetectorRef.detectChanges();\n  }\n  /**\n   * Finds the matching node definition that should be used for this node data. If there is only\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\n   * predicate that returns true with the data. If none return true, return the default node\n   * definition.\n   * @param {?} data\n   * @param {?} i\n   * @return {?}\n   */\n  _getNodeDef(data, i) {\n    if (this._nodeDefs.length === 1) {\n      return this._nodeDefs.first;\n    }\n    /** @type {?} */\n    const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n    if (!nodeDef) {\n      throw getTreeMissingMatchingNodeDefError();\n    }\n    return nodeDef;\n  }\n  /**\n   * Create the embedded view for the data node template and place it in the correct index location\n   * within the data node view container.\n   * @param {?} nodeData\n   * @param {?} index\n   * @param {?=} viewContainer\n   * @param {?=} parentData\n   * @return {?}\n   */\n  insertNode(nodeData, index, viewContainer, parentData) {\n    /** @type {?} */\n    const node = this._getNodeDef(nodeData, index);\n    /** @type {?} */\n    const context = new CdkTreeNodeOutletContext(nodeData);\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\n    // Otherwise, use the level of parent node.\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n      context.level = /** @type {?} */this._levels.get(parentData) + 1;\n    } else {\n      context.level = 0;\n    }\n    this._levels.set(nodeData, context.level);\n    /** @type {?} */\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n    container.createEmbeddedView(node.template, context, index);\n    // Set the data to just created `CdkTreeNode`.\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n    if (CdkTreeNode.mostRecentTreeNode) {\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\n    }\n  }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) {\n  return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\nCdkTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkTree,\n  selectors: [[\"cdk-tree\"]],\n  contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    }\n  },\n  viewQuery: function CdkTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n  inputs: {\n    dataSource: \"dataSource\",\n    treeControl: \"treeControl\",\n    trackBy: \"trackBy\"\n  },\n  exportAs: [\"cdkTree\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n  template: function CdkTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkTreeNodeOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nCdkTree.ctorParameters = () => [{\n  type: IterableDiffers\n}, {\n  type: ChangeDetectorRef\n}];\nCdkTree.propDecorators = {\n  dataSource: [{\n    type: Input\n  }],\n  treeControl: [{\n    type: Input\n  }],\n  trackBy: [{\n    type: Input\n  }],\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [CdkTreeNodeOutlet]\n  }],\n  _nodeDefs: [{\n    type: ContentChildren,\n    args: [CdkTreeNodeDef]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-tree',\n      exportAs: 'cdkTree',\n      template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'cdk-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    dataSource: [{\n      type: Input\n    }],\n    treeControl: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [CdkTreeNodeOutlet]\n    }],\n    _nodeDefs: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeDef]\n    }]\n  });\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n * @template T\n */\nclass CdkTreeNode {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   */\n  constructor(_elementRef, _tree) {\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n    this._destroyed = new Subject();\n    /**\n     * The role of the node should be 'group' if it's an internal node,\n     * and 'treeitem' if it's a leaf node.\n     */\n    this.role = 'treeitem';\n    CdkTreeNode.mostRecentTreeNode = /** @type {?} */this;\n  }\n  /**\n   * The tree node's data.\n   * @return {?}\n   */\n  get data() {\n    return this._data;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set data(value) {\n    this._data = value;\n    this._setRoleFromData();\n  }\n  /**\n   * @return {?}\n   */\n  get isExpanded() {\n    return this._tree.treeControl.isExpanded(this._data);\n  }\n  /**\n   * @return {?}\n   */\n  get level() {\n    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    // If this is the last tree node being destroyed,\n    // clear out the reference to avoid leaking memory.\n    if (CdkTreeNode.mostRecentTreeNode === this) {\n      CdkTreeNode.mostRecentTreeNode = null;\n    }\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /**\n   * Focuses the menu item. Implements for FocusableOption.\n   * @return {?}\n   */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n  /**\n   * @return {?}\n   */\n  _setRoleFromData() {\n    if (this._tree.treeControl.isExpandable) {\n      this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n    } else {\n      if (!this._tree.treeControl.getChildren) {\n        throw getTreeControlFunctionsMissingError();\n      }\n      /** @type {?} */\n      const childrenNodes = this._tree.treeControl.getChildren(this._data);\n      if (Array.isArray(childrenNodes)) {\n        this._setRoleFromChildren( /** @type {?} */childrenNodes);\n      } else if (childrenNodes instanceof Observable) {\n        childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(children => this._setRoleFromChildren(children));\n      }\n    }\n  }\n  /**\n   * @param {?} children\n   * @return {?}\n   */\n  _setRoleFromChildren(children) {\n    this.role = children && children.length ? 'group' : 'treeitem';\n  }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) {\n  return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree));\n};\nCdkTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNode,\n  selectors: [[\"cdk-tree-node\"]],\n  hostAttrs: [1, \"cdk-tree-node\"],\n  hostVars: 3,\n  hostBindings: function CdkTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    role: \"role\"\n  },\n  exportAs: [\"cdkTreeNode\"]\n});\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\n/** @nocollapse */\nCdkTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}];\nCdkTreeNode.propDecorators = {\n  role: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-tree-node',\n      exportAs: 'cdkTreeNode',\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role',\n        'class': 'cdk-tree-node'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: CdkTree\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n * @template T\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} _differs\n   */\n  constructor(_elementRef, _tree, _differs) {\n    super(_elementRef, _tree);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this._differs = _differs;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n    if (!this._tree.treeControl.getChildren) {\n      throw getTreeControlFunctionsMissingError();\n    }\n    /** @type {?} */\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\n    if (Array.isArray(childrenNodes)) {\n      this.updateChildrenNodes( /** @type {?} */childrenNodes);\n    } else if (childrenNodes instanceof Observable) {\n      childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(result => this.updateChildrenNodes(result));\n    }\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateChildrenNodes());\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._clear();\n    super.ngOnDestroy();\n  }\n  /**\n   * Add children dataNodes to the NodeOutlet\n   * @param {?=} children\n   * @return {?}\n   */\n  updateChildrenNodes(children) {\n    if (children) {\n      this._children = children;\n    }\n    if (this.nodeOutlet.length && this._children) {\n      /** @type {?} */\n      const viewContainer = this.nodeOutlet.first.viewContainer;\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n    } else {\n      // Reset the data differ if there's no children nodes displayed\n      this._dataDiffer.diff([]);\n    }\n  }\n  /**\n   * Clear the children dataNodes.\n   * @return {?}\n   */\n  _clear() {\n    if (this.nodeOutlet && this.nodeOutlet.first) {\n      this.nodeOutlet.first.viewContainer.clear();\n      this._dataDiffer.diff([]);\n    }\n  }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) {\n  return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\nCdkNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkNestedTreeNode,\n  selectors: [[\"cdk-nested-tree-node\"]],\n  contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    }\n  },\n  hostAttrs: [1, \"cdk-tree-node\", \"cdk-nested-tree-node\"],\n  hostVars: 2,\n  hostBindings: function CdkNestedTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    }\n  },\n  exportAs: [\"cdkNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: CdkNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\nCdkNestedTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: IterableDiffers\n}];\nCdkNestedTreeNode.propDecorators = {\n  nodeOutlet: [{\n    type: ContentChildren,\n    args: [CdkTreeNodeOutlet]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-nested-tree-node',\n      exportAs: 'cdkNestedTreeNode',\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        'class': 'cdk-tree-node cdk-nested-tree-node'\n      },\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: CdkNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, {\n    nodeOutlet: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeOutlet]\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Regex used to split a string on its CSS units.\n  @type {?} */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n * @template T\n */\nclass CdkTreeNodePadding {\n  /**\n   * @param {?} _treeNode\n   * @param {?} _tree\n   * @param {?} _renderer\n   * @param {?} _element\n   * @param {?} _dir\n   */\n  constructor(_treeNode, _tree, _renderer, _element, _dir) {\n    this._treeNode = _treeNode;\n    this._tree = _tree;\n    this._renderer = _renderer;\n    this._element = _element;\n    this._dir = _dir;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n    this._destroyed = new Subject();\n    /**\n     * CSS units used for the indentation value.\n     */\n    this.indentUnits = 'px';\n    this._indent = 40;\n    this._setPadding();\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding());\n    }\n  }\n  /**\n   * The level of depth of the tree node. The padding will be `level * indent` pixels.\n   * @return {?}\n   */\n  get level() {\n    return this._level;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set level(value) {\n    this._level = coerceNumberProperty(value);\n    this._setPadding();\n  }\n  /**\n   * The indent for each level. Can be a number or a CSS string.\n   * Default number 40px from material design menu sub-menu spec.\n   * @return {?}\n   */\n  get indent() {\n    return this._indent;\n  }\n  /**\n   * @param {?} indent\n   * @return {?}\n   */\n  set indent(indent) {\n    /** @type {?} */\n    let value = indent;\n    /** @type {?} */\n    let units = 'px';\n    if (typeof indent === 'string') {\n      /** @type {?} */\n      const parts = indent.split(cssUnitPattern);\n      value = parts[0];\n      units = parts[1] || units;\n    }\n    this.indentUnits = units;\n    this._indent = coerceNumberProperty(value);\n    this._setPadding();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /**\n   * The padding indent value for the tree node. Returns a string with px numbers if not null.\n   * @return {?}\n   */\n  _paddingIndent() {\n    /** @type {?} */\n    const nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n    /** @type {?} */\n    const level = this._level || nodeLevel;\n    return level ? `${level * this._indent}${this.indentUnits}` : null;\n  }\n  /**\n   * @return {?}\n   */\n  _setPadding() {\n    /** @type {?} */\n    const padding = this._paddingIndent();\n    /** @type {?} */\n    const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n    this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n  }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) {\n  return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n};\nCdkTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodePadding,\n  selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"cdkTreeNodePadding\", \"level\"],\n    indent: [\"cdkTreeNodePaddingIndent\", \"indent\"]\n  }\n});\n/** @nocollapse */\nCdkTreeNodePadding.ctorParameters = () => [{\n  type: CdkTreeNode\n}, {\n  type: CdkTree\n}, {\n  type: Renderer2\n}, {\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\nCdkTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['cdkTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['cdkTreeNodePaddingIndent']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodePadding]'\n    }]\n  }], function () {\n    return [{\n      type: CdkTreeNode\n    }, {\n      type: CdkTree\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    level: [{\n      type: Input,\n      args: ['cdkTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['cdkTreeNodePaddingIndent']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Node toggle to expand/collapse the node.\n * @template T\n */\nclass CdkTreeNodeToggle {\n  /**\n   * @param {?} _tree\n   * @param {?} _treeNode\n   */\n  constructor(_tree, _treeNode) {\n    this._tree = _tree;\n    this._treeNode = _treeNode;\n    this._recursive = false;\n  }\n  /**\n   * Whether expand/collapse the node recursively.\n   * @return {?}\n   */\n  get recursive() {\n    return this._recursive;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set recursive(value) {\n    this._recursive = coerceBooleanProperty(value);\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _toggle(event) {\n    this.recursive ? this._tree.treeControl.toggleDescendants(this._treeNode.data) : this._tree.treeControl.toggle(this._treeNode.data);\n    event.stopPropagation();\n  }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n  return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode));\n};\nCdkTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeToggle,\n  selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n  hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n        return ctx._toggle($event);\n      });\n    }\n  },\n  inputs: {\n    recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"]\n  }\n});\n/** @nocollapse */\nCdkTreeNodeToggle.ctorParameters = () => [{\n  type: CdkTree\n}, {\n  type: CdkTreeNode\n}];\nCdkTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['cdkTreeNodeToggleRecursive']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeToggle]',\n      host: {\n        '(click)': '_toggle($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkTree\n    }, {\n      type: CdkTreeNode\n    }];\n  }, {\n    recursive: [{\n      type: Input,\n      args: ['cdkTreeNodeToggleRecursive']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\nclass CdkTreeModule {}\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) {\n  return new (t || CdkTreeModule)();\n};\nCdkTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CdkTreeModule\n});\nCdkTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [FocusMonitor, CdkTreeNodeDef],\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS,\n      providers: [FocusMonitor, CdkTreeNodeDef]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, {\n    declarations: function () {\n      return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNode, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle };","map":{"version":3,"names":["SelectionModel","Observable","BehaviorSubject","of","Subject","take","takeUntil","Directive","TemplateRef","ViewContainerRef","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","ElementRef","Input","IterableDiffers","ViewChild","ViewEncapsulation","Optional","Renderer2","NgModule","Directionality","coerceNumberProperty","coerceBooleanProperty","FocusMonitor","CommonModule","ɵngcc0","ɵngcc1","BaseTreeControl","constructor","expansionModel","toggle","dataNode","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","toBeProcessed","push","getDescendants","FlatTreeControl","getLevel","isExpandable","startIndex","dataNodes","indexOf","results","i","length","expandAll","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","childrenNodes","Array","isArray","forEach","child","pipe","subscribe","children","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","ɵfac","CdkTreeNodeDef_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","inputs","when","ctorParameters","ngDevMode","ɵsetClassMetadata","args","selector","CdkTreeNodeOutlet","viewContainer","CdkTreeNodeOutlet_Factory","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","Map","viewChange","start","end","Number","MAX_VALUE","dataSource","_dataSource","_switchDataSource","ngOnInit","_dataDiffer","find","create","trackBy","treeControl","ngOnDestroy","_nodeOutlet","next","complete","disconnect","_dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","_nodeDefs","filter","def","_defaultNodeDef","_observeRenderChanges","dataStream","connect","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","_getNodeDef","first","nodeDef","nodeData","index","node","context","level","has","set","container","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","CdkTree_Factory","ɵcmp","ɵɵdefineComponent","contentQueries","CdkTree_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","CdkTree_Query","ɵɵviewQuery","hostAttrs","exportAs","decls","vars","consts","CdkTree_Template","ɵɵelementContainer","dependencies","encapsulation","changeDetection","propDecorators","host","None","OnPush","_elementRef","_tree","_destroyed","role","_data","value","_setRoleFromData","focus","nativeElement","_setRoleFromChildren","CdkTreeNode_Factory","hostVars","hostBindings","CdkTreeNode_HostBindings","ɵɵattribute","CdkNestedTreeNode","ngAfterContentInit","updateChildrenNodes","result","nodeOutlet","_clear","_children","CdkNestedTreeNode_Factory","CdkNestedTreeNode_ContentQueries","CdkNestedTreeNode_HostBindings","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","providers","cssUnitPattern","CdkTreeNodePadding","_treeNode","_renderer","_element","_dir","indentUnits","_indent","_setPadding","change","_level","indent","units","parts","split","_paddingIndent","nodeLevel","padding","paddingProp","setStyle","CdkTreeNodePadding_Factory","decorators","CdkTreeNodeToggle","_recursive","recursive","_toggle","event","stopPropagation","CdkTreeNodeToggle_Factory","CdkTreeNodeToggle_HostBindings","ɵɵlistener","CdkTreeNodeToggle_click_HostBindingHandler","$event","EXPORTED_DECLARATIONS","CdkTreeModule","CdkTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/tree.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Observable, BehaviorSubject, of, Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Directive, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, Input, IterableDiffers, ViewChild, ViewEncapsulation, Optional, Renderer2, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /**\n         * A selection model with multi-selection to track expansion status.\n         */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /**\n     * Toggles one single data node's expanded/collapsed state.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggle(dataNode) {\n        this.expansionModel.toggle(dataNode);\n    }\n    /**\n     * Expands one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expand(dataNode) {\n        this.expansionModel.select(dataNode);\n    }\n    /**\n     * Collapses one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapse(dataNode) {\n        this.expansionModel.deselect(dataNode);\n    }\n    /**\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(dataNode);\n    }\n    /**\n     * Toggles a subtree rooted at `node` recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n    /**\n     * Collapse all dataNodes in the tree.\n     * @return {?}\n     */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /**\n     * Expands a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expandDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n    /**\n     * Collapses a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapseDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\nclass FlatTreeControl extends BaseTreeControl {\n    /**\n     * Construct with flat tree data node functions getLevel and isExpandable.\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     */\n    constructor(getLevel, isExpandable) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        /** @type {?} */\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\nclass NestedTreeControl extends BaseTreeControl {\n    /**\n     * Construct with nested tree function getChildren.\n     * @param {?} getChildren\n     */\n    constructor(getChildren) {\n        super();\n        this.getChildren = getChildren;\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        /** @type {?} */\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes);\n    }\n    /**\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /**\n     * A helper function to get descendants recursively.\n     * @param {?} descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        /** @type {?} */\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (childrenNodes instanceof Observable) {\n            childrenNodes.pipe(take(1)).subscribe(children => {\n                children.forEach((child) => this._getDescendants(descendants, child));\n            });\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Context provided to the tree node component.\n * @template T\n */\nclass CdkTreeNodeOutletContext {\n    /**\n     * @param {?} data\n     */\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n * @template T\n */\nclass CdkTreeNodeDef {\n    /**\n     * \\@docs-private\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\n/** @nocollapse */\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     */\n    constructor(viewContainer) {\n        this.viewContainer = viewContainer;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\n/** @nocollapse */\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n * @template T\n */\nclass CdkTree {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Level of nodes\n         */\n        this._levels = new Map();\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     * @return {?}\n     */\n    get dataSource() { return this._dataSource; }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof (/** @type {?} */ (this._dataSource)).disconnect === 'function') {\n            (/** @type {?} */ (this.dataSource)).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        /** @type {?} */\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof (/** @type {?} */ (this._dataSource)).disconnect === 'function') {\n            (/** @type {?} */ (this.dataSource)).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        /** @type {?} */\n        let dataStream;\n        // Cannot use `instanceof DataSource` since the data source could be a literal with\n        // `connect` function and may not extends DataSource.\n        if (typeof (/** @type {?} */ (this._dataSource)).connect === 'function') {\n            dataStream = (/** @type {?} */ (this._dataSource)).connect(this);\n        }\n        else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this.renderNodeChanges(data));\n        }\n        else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /**\n     * Check for changes made in the data and render each change (node added/removed/moved).\n     * @param {?} data\n     * @param {?=} dataDiffer\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        /** @type {?} */\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[/** @type {?} */ ((currentIndex))], /** @type {?} */ ((currentIndex)), viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(/** @type {?} */ ((adjustedPreviousIndex)));\n                this._levels.delete(item.item);\n            }\n            else {\n                /** @type {?} */\n                const view = viewContainer.get(/** @type {?} */ ((adjustedPreviousIndex)));\n                viewContainer.move(/** @type {?} */ ((view)), currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        /** @type {?} */\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n        if (!nodeDef) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     * @param {?} nodeData\n     * @param {?} index\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        /** @type {?} */\n        const node = this._getNodeDef(nodeData, index);\n        /** @type {?} */\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = /** @type {?} */ ((this._levels.get(parentData))) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        /** @type {?} */\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [CdkTreeNodeOutlet], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet,] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{ selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef]\n        }] }); })();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n * @template T\n */\nclass CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     */\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * The role of the node should be 'group' if it's an internal node,\n         * and 'treeitem' if it's a leaf node.\n         */\n        this.role = 'treeitem';\n        CdkTreeNode.mostRecentTreeNode = /** @type {?} */ (this);\n    }\n    /**\n     * The tree node's data.\n     * @return {?}\n     */\n    get data() { return this._data; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        this._data = value;\n        this._setRoleFromData();\n    }\n    /**\n     * @return {?}\n     */\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    get level() {\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Focuses the menu item. Implements for FocusableOption.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n    _setRoleFromData() {\n        if (this._tree.treeControl.isExpandable) {\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        }\n        else {\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n            /** @type {?} */\n            const childrenNodes = this._tree.treeControl.getChildren(this._data);\n            if (Array.isArray(childrenNodes)) {\n                this._setRoleFromChildren(/** @type {?} */ (childrenNodes));\n            }\n            else if (childrenNodes instanceof Observable) {\n                childrenNodes.pipe(takeUntil(this._destroyed))\n                    .subscribe(children => this._setRoleFromChildren(children));\n            }\n        }\n    }\n    /**\n     * @param {?} children\n     * @return {?}\n     */\n    _setRoleFromChildren(children) {\n        this.role = children && children.length ? 'group' : 'treeitem';\n    }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], hostAttrs: [1, \"cdk-tree-node\"], hostVars: 3, hostBindings: function CdkTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\n/** @nocollapse */\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n * @template T\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     */\n    constructor(_elementRef, _tree, _differs) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        /** @type {?} */\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(/** @type {?} */ (childrenNodes));\n        }\n        else if (childrenNodes instanceof Observable) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe(result => this.updateChildrenNodes(result));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /**\n     * Add children dataNodes to the NodeOutlet\n     * @param {?=} children\n     * @return {?}\n     */\n    updateChildrenNodes(children) {\n        if (children) {\n            this._children = children;\n        }\n        if (this.nodeOutlet.length && this._children) {\n            /** @type {?} */\n            const viewContainer = this.nodeOutlet.first.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /**\n     * Clear the children dataNodes.\n     * @return {?}\n     */\n    _clear() {\n        if (this.nodeOutlet && this.nodeOutlet.first) {\n            this.nodeOutlet.first.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, hostAttrs: [1, \"cdk-tree-node\", \"cdk-nested-tree-node\"], hostVars: 2, hostBindings: function CdkNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node cdk-nested-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: CdkNestedTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Regex used to split a string on its CSS units.\n  @type {?} */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n * @template T\n */\nclass CdkTreeNodePadding {\n    /**\n     * @param {?} _treeNode\n     * @param {?} _tree\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_treeNode, _tree, _renderer, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * CSS units used for the indentation value.\n         */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding());\n        }\n    }\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @return {?}\n     */\n    get level() { return this._level; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set level(value) {\n        this._level = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     * @return {?}\n     */\n    get indent() { return this._indent; }\n    /**\n     * @param {?} indent\n     * @return {?}\n     */\n    set indent(indent) {\n        /** @type {?} */\n        let value = indent;\n        /** @type {?} */\n        let units = 'px';\n        if (typeof indent === 'string') {\n            /** @type {?} */\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\n     * @return {?}\n     */\n    _paddingIndent() {\n        /** @type {?} */\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        /** @type {?} */\n        const level = this._level || nodeLevel;\n        return level ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    /**\n     * @return {?}\n     */\n    _setPadding() {\n        /** @type {?} */\n        const padding = this._paddingIndent();\n        /** @type {?} */\n        const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n        this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n    }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\n/** @nocollapse */\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Node toggle to expand/collapse the node.\n * @template T\n */\nclass CdkTreeNodeToggle {\n    /**\n     * @param {?} _tree\n     * @param {?} _treeNode\n     */\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /**\n     * Whether expand/collapse the node recursively.\n     * @return {?}\n     */\n    get recursive() { return this._recursive; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\n/** @nocollapse */\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeToggle]',\n                host: {\n                    '(click)': '_toggle($event)'\n                }\n            }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); };\nCdkTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [FocusMonitor, CdkTreeNodeDef], imports: [CommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                providers: [FocusMonitor, CdkTreeNodeDef]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: function () { return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet]; }, imports: function () { return [CommonModule]; }, exports: function () { return [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNode, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle };\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,0BAA0B;AACzD,SAASC,UAAU,EAAEC,eAAe,EAAEC,EAAE,EAAEC,OAAO,QAAQ,MAAM;AAC/D,SAASC,IAAI,EAAEC,SAAS,QAAQ,gBAAgB;AAChD,SAASC,SAAS,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,uBAAuB,EAAEC,iBAAiB,EAAEC,SAAS,EAAEC,eAAe,EAAEC,UAAU,EAAEC,KAAK,EAAEC,eAAe,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,eAAe;AACjP,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAASC,oBAAoB,EAAEC,qBAAqB,QAAQ,uBAAuB;AACnF,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,YAAY,QAAQ,iBAAiB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,OAAO,KAAKC,MAAM,MAAM,mBAAmB;AAC3C,MAAMC,eAAe,CAAC;EAClBC,WAAW,GAAG;IACV;AACR;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,IAAI/B,cAAc,CAAC,IAAI,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;EACIgC,MAAM,CAACC,QAAQ,EAAE;IACb,IAAI,CAACF,cAAc,CAACC,MAAM,CAACC,QAAQ,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;EACIC,MAAM,CAACD,QAAQ,EAAE;IACb,IAAI,CAACF,cAAc,CAACI,MAAM,CAACF,QAAQ,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;EACIG,QAAQ,CAACH,QAAQ,EAAE;IACf,IAAI,CAACF,cAAc,CAACM,QAAQ,CAACJ,QAAQ,CAAC;EAC1C;EACA;AACJ;AACA;AACA;AACA;EACIK,UAAU,CAACL,QAAQ,EAAE;IACjB,OAAO,IAAI,CAACF,cAAc,CAACQ,UAAU,CAACN,QAAQ,CAAC;EACnD;EACA;AACJ;AACA;AACA;AACA;EACIO,iBAAiB,CAACP,QAAQ,EAAE;IACxB,IAAI,CAACF,cAAc,CAACQ,UAAU,CAACN,QAAQ,CAAC,GAClC,IAAI,CAACQ,mBAAmB,CAACR,QAAQ,CAAC,GAClC,IAAI,CAACS,iBAAiB,CAACT,QAAQ,CAAC;EAC1C;EACA;AACJ;AACA;AACA;EACIU,WAAW,GAAG;IACV,IAAI,CAACZ,cAAc,CAACa,KAAK,EAAE;EAC/B;EACA;AACJ;AACA;AACA;AACA;EACIF,iBAAiB,CAACT,QAAQ,EAAE;IACxB;IACA,IAAIY,aAAa,GAAG,CAACZ,QAAQ,CAAC;IAC9BY,aAAa,CAACC,IAAI,CAAC,GAAG,IAAI,CAACC,cAAc,CAACd,QAAQ,CAAC,CAAC;IACpD,IAAI,CAACF,cAAc,CAACI,MAAM,CAAC,GAAGU,aAAa,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;EACIJ,mBAAmB,CAACR,QAAQ,EAAE;IAC1B;IACA,IAAIY,aAAa,GAAG,CAACZ,QAAQ,CAAC;IAC9BY,aAAa,CAACC,IAAI,CAAC,GAAG,IAAI,CAACC,cAAc,CAACd,QAAQ,CAAC,CAAC;IACpD,IAAI,CAACF,cAAc,CAACM,QAAQ,CAAC,GAAGQ,aAAa,CAAC;EAClD;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,eAAe,SAASnB,eAAe,CAAC;EAC1C;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACmB,QAAQ,EAAEC,YAAY,EAAE;IAChC,KAAK,EAAE;IACP,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,YAAY,GAAGA,YAAY;EACpC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIH,cAAc,CAACd,QAAQ,EAAE;IACrB;IACA,MAAMkB,UAAU,GAAG,IAAI,CAACC,SAAS,CAACC,OAAO,CAACpB,QAAQ,CAAC;IACnD;IACA,MAAMqB,OAAO,GAAG,EAAE;IAClB;IACA;IACA;IACA;IACA;IACA;IACA,KAAK,IAAIC,CAAC,GAAGJ,UAAU,GAAG,CAAC,EAAEI,CAAC,GAAG,IAAI,CAACH,SAAS,CAACI,MAAM,IAAI,IAAI,CAACP,QAAQ,CAAChB,QAAQ,CAAC,GAAG,IAAI,CAACgB,QAAQ,CAAC,IAAI,CAACG,SAAS,CAACG,CAAC,CAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;MACvHD,OAAO,CAACR,IAAI,CAAC,IAAI,CAACM,SAAS,CAACG,CAAC,CAAC,CAAC;IACnC;IACA,OAAOD,OAAO;EAClB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,SAAS,GAAG;IACR,IAAI,CAAC1B,cAAc,CAACI,MAAM,CAAC,GAAG,IAAI,CAACiB,SAAS,CAAC;EACjD;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,iBAAiB,SAAS7B,eAAe,CAAC;EAC5C;AACJ;AACA;AACA;EACIC,WAAW,CAAC6B,WAAW,EAAE;IACrB,KAAK,EAAE;IACP,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIF,SAAS,GAAG;IACR,IAAI,CAAC1B,cAAc,CAACa,KAAK,EAAE;IAC3B;IACA,MAAMgB,QAAQ,GAAG,IAAI,CAACR,SAAS,CAACS,MAAM,CAAC,CAACC,WAAW,EAAE7B,QAAQ,KAAK,CAAC,GAAG6B,WAAW,EAAE,GAAG,IAAI,CAACf,cAAc,CAACd,QAAQ,CAAC,EAAEA,QAAQ,CAAC,EAAE,EAAE,CAAC;IACnI,IAAI,CAACF,cAAc,CAACI,MAAM,CAAC,GAAGyB,QAAQ,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;EACIb,cAAc,CAACd,QAAQ,EAAE;IACrB;IACA,MAAM8B,WAAW,GAAG,EAAE;IACtB,IAAI,CAACC,eAAe,CAACD,WAAW,EAAE9B,QAAQ,CAAC;IAC3C;IACA,OAAO8B,WAAW,CAACE,MAAM,CAAC,CAAC,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;EACID,eAAe,CAACD,WAAW,EAAE9B,QAAQ,EAAE;IACnC8B,WAAW,CAACjB,IAAI,CAACb,QAAQ,CAAC;IAC1B;IACA,MAAMiC,aAAa,GAAG,IAAI,CAACP,WAAW,CAAC1B,QAAQ,CAAC;IAChD,IAAIkC,KAAK,CAACC,OAAO,CAACF,aAAa,CAAC,EAAE;MAC9BA,aAAa,CAACG,OAAO,CAAEC,KAAK,IAAK,IAAI,CAACN,eAAe,CAACD,WAAW,EAAEO,KAAK,CAAC,CAAC;IAC9E,CAAC,MACI,IAAIJ,aAAa,YAAYjE,UAAU,EAAE;MAC1CiE,aAAa,CAACK,IAAI,CAAClE,IAAI,CAAC,CAAC,CAAC,CAAC,CAACmE,SAAS,CAACC,QAAQ,IAAI;QAC9CA,QAAQ,CAACJ,OAAO,CAAEC,KAAK,IAAK,IAAI,CAACN,eAAe,CAACD,WAAW,EAAEO,KAAK,CAAC,CAAC;MACzE,CAAC,CAAC;IACN;EACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,wBAAwB,CAAC;EAC3B;AACJ;AACA;EACI5C,WAAW,CAAC6C,IAAI,EAAE;IACd,IAAI,CAACC,SAAS,GAAGD,IAAI;EACzB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,cAAc,CAAC;EACjB;AACJ;AACA;AACA;EACI/C,WAAW,CAACgD,QAAQ,EAAE;IAClB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B;AACJ;AACAD,cAAc,CAACE,IAAI,GAAG,SAASC,sBAAsB,CAACC,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIJ,cAAc,EAAElD,MAAM,CAACuD,iBAAiB,CAACvD,MAAM,CAACnB,WAAW,CAAC,CAAC;AAAE,CAAC;AAC5IqE,cAAc,CAACM,IAAI,GAAG,aAAcxD,MAAM,CAACyD,iBAAiB,CAAC;EAAEC,IAAI,EAAER,cAAc;EAAES,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;EAAEC,MAAM,EAAE;IAAEC,IAAI,EAAE,CAAC,oBAAoB,EAAE,MAAM;EAAE;AAAE,CAAC,CAAC;AACjL;AACAX,cAAc,CAACY,cAAc,GAAG,MAAM,CAClC;EAAEJ,IAAI,EAAE7E;AAAY,CAAC,CACxB;AACD,CAAC,YAAY;EAAE,CAAC,OAAOkF,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK/D,MAAM,CAACgE,iBAAiB,CAACd,cAAc,EAAE,CAAC;IACpGQ,IAAI,EAAE9E,SAAS;IACfqF,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,kBAAkB;MAC5BN,MAAM,EAAE,CACJ,0BAA0B;IAElC,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEF,IAAI,EAAE1D,MAAM,CAACnB;IAAY,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsF,iBAAiB,CAAC;EACpB;AACJ;AACA;EACIhE,WAAW,CAACiE,aAAa,EAAE;IACvB,IAAI,CAACA,aAAa,GAAGA,aAAa;EACtC;AACJ;AACAD,iBAAiB,CAACf,IAAI,GAAG,SAASiB,yBAAyB,CAACf,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIa,iBAAiB,EAAEnE,MAAM,CAACuD,iBAAiB,CAACvD,MAAM,CAAClB,gBAAgB,CAAC,CAAC;AAAE,CAAC;AAC1JqF,iBAAiB,CAACX,IAAI,GAAG,aAAcxD,MAAM,CAACyD,iBAAiB,CAAC;EAAEC,IAAI,EAAES,iBAAiB;EAAER,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,mBAAmB,EAAE,EAAE,CAAC;AAAE,CAAC,CAAC;AACxI;AACAQ,iBAAiB,CAACL,cAAc,GAAG,MAAM,CACrC;EAAEJ,IAAI,EAAE5E;AAAiB,CAAC,CAC7B;AACD,CAAC,YAAY;EAAE,CAAC,OAAOiF,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK/D,MAAM,CAACgE,iBAAiB,CAACG,iBAAiB,EAAE,CAAC;IACvGT,IAAI,EAAE9E,SAAS;IACfqF,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE;IACd,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAER,IAAI,EAAE1D,MAAM,CAAClB;IAAiB,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;;AAEhF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASwF,6BAA6B,GAAG;EACrC,OAAOC,KAAK,CAAE,uCAAsC,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mCAAmC,GAAG;EAC3C,OAAOD,KAAK,CAAE,sEAAqE,CAAC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,kCAAkC,GAAG;EAC1C,OAAOF,KAAK,CAAE,uEAAsE,CAAC;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,0BAA0B,GAAG;EAClC,OAAOH,KAAK,CAAE,6CAA4C,CAAC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,mCAAmC,GAAG;EAC3C,OAAOJ,KAAK,CAAE,gEAA+D,CAAC;AAClF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,OAAO,CAAC;EACV;AACJ;AACA;AACA;EACIzE,WAAW,CAAC0E,QAAQ,EAAEC,kBAAkB,EAAE;IACtC,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C;AACR;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,IAAItG,OAAO,EAAE;IAC/B;AACR;AACA;IACQ,IAAI,CAACuG,OAAO,GAAG,IAAIC,GAAG,EAAE;IACxB;AACR;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,IAAI3G,eAAe,CAAC;MAAE4G,KAAK,EAAE,CAAC;MAAEC,GAAG,EAAEC,MAAM,CAACC;IAAU,CAAC,CAAC;EAC9E;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIC,UAAU,GAAG;IAAE,OAAO,IAAI,CAACC,WAAW;EAAE;EAC5C;AACJ;AACA;AACA;EACI,IAAID,UAAU,CAACA,UAAU,EAAE;IACvB,IAAI,IAAI,CAACC,WAAW,KAAKD,UAAU,EAAE;MACjC,IAAI,CAACE,iBAAiB,CAACF,UAAU,CAAC;IACtC;EACJ;EACA;AACJ;AACA;EACIG,QAAQ,GAAG;IACP,IAAI,CAACC,WAAW,GAAG,IAAI,CAACd,QAAQ,CAACe,IAAI,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,IAAI,CAACC,OAAO,CAAC;IAC9D,IAAI,CAAC,IAAI,CAACC,WAAW,EAAE;MACnB,MAAMrB,0BAA0B,EAAE;IACtC;EACJ;EACA;AACJ;AACA;EACIsB,WAAW,GAAG;IACV,IAAI,CAACC,WAAW,CAAC7B,aAAa,CAACnD,KAAK,EAAE;IACtC,IAAI,CAAC8D,UAAU,CAACmB,IAAI,EAAE;IACtB,IAAI,CAACnB,UAAU,CAACoB,QAAQ,EAAE;IAC1B,IAAI,IAAI,CAACX,WAAW,IAAI,OAAQ,gBAAkB,IAAI,CAACA,WAAW,CAAGY,UAAU,KAAK,UAAU,EAAE;MAC3F,gBAAkB,IAAI,CAACb,UAAU,CAAGa,UAAU,CAAC,IAAI,CAAC;IACzD;IACA,IAAI,IAAI,CAACC,iBAAiB,EAAE;MACxB,IAAI,CAACA,iBAAiB,CAACC,WAAW,EAAE;MACpC,IAAI,CAACD,iBAAiB,GAAG,IAAI;IACjC;EACJ;EACA;AACJ;AACA;EACIE,qBAAqB,GAAG;IACpB;IACA,MAAMC,eAAe,GAAG,IAAI,CAACC,SAAS,CAACC,MAAM,CAACC,GAAG,IAAI,CAACA,GAAG,CAAC9C,IAAI,CAAC;IAC/D,IAAI2C,eAAe,CAAC3E,MAAM,GAAG,CAAC,EAAE;MAC5B,MAAM2C,mCAAmC,EAAE;IAC/C;IACA,IAAI,CAACoC,eAAe,GAAGJ,eAAe,CAAC,CAAC,CAAC;IACzC,IAAI,IAAI,CAACjB,UAAU,IAAI,IAAI,CAACkB,SAAS,IAAI,CAAC,IAAI,CAACJ,iBAAiB,EAAE;MAC9D,IAAI,CAACQ,qBAAqB,EAAE;IAChC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIpB,iBAAiB,CAACF,UAAU,EAAE;IAC1B,IAAI,IAAI,CAACC,WAAW,IAAI,OAAQ,gBAAkB,IAAI,CAACA,WAAW,CAAGY,UAAU,KAAK,UAAU,EAAE;MAC3F,gBAAkB,IAAI,CAACb,UAAU,CAAGa,UAAU,CAAC,IAAI,CAAC;IACzD;IACA,IAAI,IAAI,CAACC,iBAAiB,EAAE;MACxB,IAAI,CAACA,iBAAiB,CAACC,WAAW,EAAE;MACpC,IAAI,CAACD,iBAAiB,GAAG,IAAI;IACjC;IACA;IACA,IAAI,CAACd,UAAU,EAAE;MACb,IAAI,CAACU,WAAW,CAAC7B,aAAa,CAACnD,KAAK,EAAE;IAC1C;IACA,IAAI,CAACuE,WAAW,GAAGD,UAAU;IAC7B,IAAI,IAAI,CAACkB,SAAS,EAAE;MAChB,IAAI,CAACI,qBAAqB,EAAE;IAChC;EACJ;EACA;AACJ;AACA;AACA;EACIA,qBAAqB,GAAG;IACpB;IACA,IAAIC,UAAU;IACd;IACA;IACA,IAAI,OAAQ,gBAAkB,IAAI,CAACtB,WAAW,CAAGuB,OAAO,KAAK,UAAU,EAAE;MACrED,UAAU,GAAI,gBAAkB,IAAI,CAACtB,WAAW,CAAGuB,OAAO,CAAC,IAAI,CAAC;IACpE,CAAC,MACI,IAAI,IAAI,CAACvB,WAAW,YAAYlH,UAAU,EAAE;MAC7CwI,UAAU,GAAG,IAAI,CAACtB,WAAW;IACjC,CAAC,MACI,IAAIhD,KAAK,CAACC,OAAO,CAAC,IAAI,CAAC+C,WAAW,CAAC,EAAE;MACtCsB,UAAU,GAAGtI,EAAE,CAAC,IAAI,CAACgH,WAAW,CAAC;IACrC;IACA,IAAIsB,UAAU,EAAE;MACZ,IAAI,CAACT,iBAAiB,GAAGS,UAAU,CAAClE,IAAI,CAACjE,SAAS,CAAC,IAAI,CAACoG,UAAU,CAAC,CAAC,CAC/DlC,SAAS,CAACG,IAAI,IAAI,IAAI,CAACgE,iBAAiB,CAAChE,IAAI,CAAC,CAAC;IACxD,CAAC,MACI;MACD,MAAMsB,6BAA6B,EAAE;IACzC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI0C,iBAAiB,CAAChE,IAAI,EAAEiE,UAAU,GAAG,IAAI,CAACtB,WAAW,EAAEvB,aAAa,GAAG,IAAI,CAAC6B,WAAW,CAAC7B,aAAa,EAAE8C,UAAU,EAAE;IAC/G;IACA,MAAMC,OAAO,GAAGF,UAAU,CAACG,IAAI,CAACpE,IAAI,CAAC;IACrC,IAAI,CAACmE,OAAO,EAAE;MACV;IACJ;IACAA,OAAO,CAACE,gBAAgB,CAAC,CAACC,IAAI,EAAEC,qBAAqB,EAAEC,YAAY,KAAK;MACpE,IAAIF,IAAI,CAACG,aAAa,IAAI,IAAI,EAAE;QAC5B,IAAI,CAACC,UAAU,CAAC1E,IAAI,CAAC,gBAAmBwE,YAAY,CAAG,EAAE,gBAAmBA,YAAY,EAAIpD,aAAa,EAAE8C,UAAU,CAAC;MAC1H,CAAC,MACI,IAAIM,YAAY,IAAI,IAAI,EAAE;QAC3BpD,aAAa,CAACuD,MAAM,EAAC,gBAAmBJ,qBAAqB,CAAG;QAChE,IAAI,CAACvC,OAAO,CAAC4C,MAAM,CAACN,IAAI,CAACA,IAAI,CAAC;MAClC,CAAC,MACI;QACD;QACA,MAAMO,IAAI,GAAGzD,aAAa,CAAC0D,GAAG,EAAC,gBAAmBP,qBAAqB,CAAG;QAC1EnD,aAAa,CAAC2D,IAAI,EAAC,gBAAmBF,IAAI,EAAIL,YAAY,CAAC;MAC/D;IACJ,CAAC,CAAC;IACF,IAAI,CAAC1C,kBAAkB,CAACkD,aAAa,EAAE;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACjF,IAAI,EAAEpB,CAAC,EAAE;IACjB,IAAI,IAAI,CAAC6E,SAAS,CAAC5E,MAAM,KAAK,CAAC,EAAE;MAC7B,OAAO,IAAI,CAAC4E,SAAS,CAACyB,KAAK;IAC/B;IACA;IACA,MAAMC,OAAO,GAAG,IAAI,CAAC1B,SAAS,CAACb,IAAI,CAACe,GAAG,IAAIA,GAAG,CAAC9C,IAAI,IAAI8C,GAAG,CAAC9C,IAAI,CAACjC,CAAC,EAAEoB,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC4D,eAAe;IACjG,IAAI,CAACuB,OAAO,EAAE;MACV,MAAM1D,kCAAkC,EAAE;IAC9C;IACA,OAAO0D,OAAO;EAClB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIT,UAAU,CAACU,QAAQ,EAAEC,KAAK,EAAEjE,aAAa,EAAE8C,UAAU,EAAE;IACnD;IACA,MAAMoB,IAAI,GAAG,IAAI,CAACL,WAAW,CAACG,QAAQ,EAAEC,KAAK,CAAC;IAC9C;IACA,MAAME,OAAO,GAAG,IAAIxF,wBAAwB,CAACqF,QAAQ,CAAC;IACtD;IACA;IACA,IAAI,IAAI,CAACrC,WAAW,CAACzE,QAAQ,EAAE;MAC3BiH,OAAO,CAACC,KAAK,GAAG,IAAI,CAACzC,WAAW,CAACzE,QAAQ,CAAC8G,QAAQ,CAAC;IACvD,CAAC,MACI,IAAI,OAAOlB,UAAU,KAAK,WAAW,IAAI,IAAI,CAAClC,OAAO,CAACyD,GAAG,CAACvB,UAAU,CAAC,EAAE;MACxEqB,OAAO,CAACC,KAAK,GAAG,gBAAmB,IAAI,CAACxD,OAAO,CAAC8C,GAAG,CAACZ,UAAU,CAAC,GAAK,CAAC;IACzE,CAAC,MACI;MACDqB,OAAO,CAACC,KAAK,GAAG,CAAC;IACrB;IACA,IAAI,CAACxD,OAAO,CAAC0D,GAAG,CAACN,QAAQ,EAAEG,OAAO,CAACC,KAAK,CAAC;IACzC;IACA,MAAMG,SAAS,GAAGvE,aAAa,GAAGA,aAAa,GAAG,IAAI,CAAC6B,WAAW,CAAC7B,aAAa;IAChFuE,SAAS,CAACC,kBAAkB,CAACN,IAAI,CAACnF,QAAQ,EAAEoF,OAAO,EAAEF,KAAK,CAAC;IAC3D;IACA;IACA;IACA,IAAIQ,WAAW,CAACC,kBAAkB,EAAE;MAChCD,WAAW,CAACC,kBAAkB,CAAC9F,IAAI,GAAGoF,QAAQ;IAClD;EACJ;AACJ;AACAxD,OAAO,CAACxB,IAAI,GAAG,SAAS2F,eAAe,CAACzF,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIsB,OAAO,EAAE5E,MAAM,CAACuD,iBAAiB,CAACvD,MAAM,CAACX,eAAe,CAAC,EAAEW,MAAM,CAACuD,iBAAiB,CAACvD,MAAM,CAAChB,iBAAiB,CAAC,CAAC;AAAE,CAAC;AAC/K4F,OAAO,CAACoE,IAAI,GAAG,aAAchJ,MAAM,CAACiJ,iBAAiB,CAAC;EAAEvF,IAAI,EAAEkB,OAAO;EAAEjB,SAAS,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC;EAAEuF,cAAc,EAAE,SAASC,sBAAsB,CAACC,EAAE,EAAEC,GAAG,EAAEC,QAAQ,EAAE;IAAE,IAAIF,EAAE,GAAG,CAAC,EAAE;MAC3KpJ,MAAM,CAACuJ,cAAc,CAACD,QAAQ,EAAEpG,cAAc,EAAE,CAAC,CAAC;IACtD;IAAE,IAAIkG,EAAE,GAAG,CAAC,EAAE;MACV,IAAII,EAAE;MACNxJ,MAAM,CAACyJ,cAAc,CAACD,EAAE,GAAGxJ,MAAM,CAAC0J,WAAW,EAAE,CAAC,KAAKL,GAAG,CAAC5C,SAAS,GAAG+C,EAAE,CAAC;IAC5E;EAAE,CAAC;EAAEG,SAAS,EAAE,SAASC,aAAa,CAACR,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MAC1DpJ,MAAM,CAAC6J,WAAW,CAAC1F,iBAAiB,EAAE,CAAC,CAAC;IAC5C;IAAE,IAAIiF,EAAE,GAAG,CAAC,EAAE;MACV,IAAII,EAAE;MACNxJ,MAAM,CAACyJ,cAAc,CAACD,EAAE,GAAGxJ,MAAM,CAAC0J,WAAW,EAAE,CAAC,KAAKL,GAAG,CAACpD,WAAW,GAAGuD,EAAE,CAACtB,KAAK,CAAC;IACpF;EAAE,CAAC;EAAE4B,SAAS,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,UAAU,CAAC;EAAElG,MAAM,EAAE;IAAE2B,UAAU,EAAE,YAAY;IAAEQ,WAAW,EAAE,aAAa;IAAED,OAAO,EAAE;EAAU,CAAC;EAAEiE,QAAQ,EAAE,CAAC,SAAS,CAAC;EAAEC,KAAK,EAAE,CAAC;EAAEC,IAAI,EAAE,CAAC;EAAEC,MAAM,EAAE,CAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;EAAE/G,QAAQ,EAAE,SAASgH,gBAAgB,CAACf,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MAC7QpJ,MAAM,CAACoK,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC;IACnC;EAAE,CAAC;EAAEC,YAAY,EAAE,CAAClG,iBAAiB,CAAC;EAAEmG,aAAa,EAAE,CAAC;EAAEC,eAAe,EAAE;AAAE,CAAC,CAAC;AACnF;AACA3F,OAAO,CAACd,cAAc,GAAG,MAAM,CAC3B;EAAEJ,IAAI,EAAErE;AAAgB,CAAC,EACzB;EAAEqE,IAAI,EAAE1E;AAAkB,CAAC,CAC9B;AACD4F,OAAO,CAAC4F,cAAc,GAAG;EACrBjF,UAAU,EAAE,CAAC;IAAE7B,IAAI,EAAEtE;EAAM,CAAC,CAAC;EAC7B2G,WAAW,EAAE,CAAC;IAAErC,IAAI,EAAEtE;EAAM,CAAC,CAAC;EAC9B0G,OAAO,EAAE,CAAC;IAAEpC,IAAI,EAAEtE;EAAM,CAAC,CAAC;EAC1B6G,WAAW,EAAE,CAAC;IAAEvC,IAAI,EAAEpE,SAAS;IAAE2E,IAAI,EAAE,CAACE,iBAAiB;EAAG,CAAC,CAAC;EAC9DsC,SAAS,EAAE,CAAC;IAAE/C,IAAI,EAAExE,eAAe;IAAE+E,IAAI,EAAE,CAACf,cAAc;EAAG,CAAC;AAClE,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOa,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK/D,MAAM,CAACgE,iBAAiB,CAACY,OAAO,EAAE,CAAC;IAC7FlB,IAAI,EAAEzE,SAAS;IACfgF,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAE,UAAU;MACrB6F,QAAQ,EAAE,SAAS;MACnB5G,QAAQ,EAAG,iDAAgD;MAC3DsH,IAAI,EAAE;QACF,OAAO,EAAE,UAAU;QACnB,MAAM,EAAE;MACZ,CAAC;MACDH,aAAa,EAAE/K,iBAAiB,CAACmL,IAAI;MACrCH,eAAe,EAAExL,uBAAuB,CAAC4L;IAC7C,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEjH,IAAI,EAAE1D,MAAM,CAACX;IAAgB,CAAC,EAAE;MAAEqE,IAAI,EAAE1D,MAAM,CAAChB;IAAkB,CAAC,CAAC;EAAE,CAAC,EAAE;IAAEuG,UAAU,EAAE,CAAC;MAC3G7B,IAAI,EAAEtE;IACV,CAAC,CAAC;IAAE2G,WAAW,EAAE,CAAC;MACdrC,IAAI,EAAEtE;IACV,CAAC,CAAC;IAAE0G,OAAO,EAAE,CAAC;MACVpC,IAAI,EAAEtE;IACV,CAAC,CAAC;IAAE6G,WAAW,EAAE,CAAC;MACdvC,IAAI,EAAEpE,SAAS;MACf2E,IAAI,EAAE,CAACE,iBAAiB;IAC5B,CAAC,CAAC;IAAEsC,SAAS,EAAE,CAAC;MACZ/C,IAAI,EAAExE,eAAe;MACrB+E,IAAI,EAAE,CAACf,cAAc;IACzB,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;AACnB;AACA;AACA;AACA;AACA,MAAM2F,WAAW,CAAC;EACd;AACJ;AACA;AACA;EACI1I,WAAW,CAACyK,WAAW,EAAEC,KAAK,EAAE;IAC5B,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB;AACR;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,IAAIrM,OAAO,EAAE;IAC/B;AACR;AACA;AACA;IACQ,IAAI,CAACsM,IAAI,GAAG,UAAU;IACtBlC,WAAW,CAACC,kBAAkB,GAAG,gBAAkB,IAAK;EAC5D;EACA;AACJ;AACA;AACA;EACI,IAAI9F,IAAI,GAAG;IAAE,OAAO,IAAI,CAACgI,KAAK;EAAE;EAChC;AACJ;AACA;AACA;EACI,IAAIhI,IAAI,CAACiI,KAAK,EAAE;IACZ,IAAI,CAACD,KAAK,GAAGC,KAAK;IAClB,IAAI,CAACC,gBAAgB,EAAE;EAC3B;EACA;AACJ;AACA;EACI,IAAIvK,UAAU,GAAG;IACb,OAAO,IAAI,CAACkK,KAAK,CAAC9E,WAAW,CAACpF,UAAU,CAAC,IAAI,CAACqK,KAAK,CAAC;EACxD;EACA;AACJ;AACA;EACI,IAAIxC,KAAK,GAAG;IACR,OAAO,IAAI,CAACqC,KAAK,CAAC9E,WAAW,CAACzE,QAAQ,GAAG,IAAI,CAACuJ,KAAK,CAAC9E,WAAW,CAACzE,QAAQ,CAAC,IAAI,CAAC0J,KAAK,CAAC,GAAG,CAAC;EAC5F;EACA;AACJ;AACA;EACIhF,WAAW,GAAG;IACV;IACA;IACA,IAAI6C,WAAW,CAACC,kBAAkB,KAAK,IAAI,EAAE;MACzCD,WAAW,CAACC,kBAAkB,GAAG,IAAI;IACzC;IACA,IAAI,CAACgC,UAAU,CAAC5E,IAAI,EAAE;IACtB,IAAI,CAAC4E,UAAU,CAAC3E,QAAQ,EAAE;EAC9B;EACA;AACJ;AACA;AACA;EACIgF,KAAK,GAAG;IACJ,IAAI,CAACP,WAAW,CAACQ,aAAa,CAACD,KAAK,EAAE;EAC1C;EACA;AACJ;AACA;EACID,gBAAgB,GAAG;IACf,IAAI,IAAI,CAACL,KAAK,CAAC9E,WAAW,CAACxE,YAAY,EAAE;MACrC,IAAI,CAACwJ,IAAI,GAAG,IAAI,CAACF,KAAK,CAAC9E,WAAW,CAACxE,YAAY,CAAC,IAAI,CAACyJ,KAAK,CAAC,GAAG,OAAO,GAAG,UAAU;IACtF,CAAC,MACI;MACD,IAAI,CAAC,IAAI,CAACH,KAAK,CAAC9E,WAAW,CAAC/D,WAAW,EAAE;QACrC,MAAM2C,mCAAmC,EAAE;MAC/C;MACA;MACA,MAAMpC,aAAa,GAAG,IAAI,CAACsI,KAAK,CAAC9E,WAAW,CAAC/D,WAAW,CAAC,IAAI,CAACgJ,KAAK,CAAC;MACpE,IAAIxI,KAAK,CAACC,OAAO,CAACF,aAAa,CAAC,EAAE;QAC9B,IAAI,CAAC8I,oBAAoB,EAAC,gBAAkB9I,aAAa,CAAE;MAC/D,CAAC,MACI,IAAIA,aAAa,YAAYjE,UAAU,EAAE;QAC1CiE,aAAa,CAACK,IAAI,CAACjE,SAAS,CAAC,IAAI,CAACmM,UAAU,CAAC,CAAC,CACzCjI,SAAS,CAACC,QAAQ,IAAI,IAAI,CAACuI,oBAAoB,CAACvI,QAAQ,CAAC,CAAC;MACnE;IACJ;EACJ;EACA;AACJ;AACA;AACA;EACIuI,oBAAoB,CAACvI,QAAQ,EAAE;IAC3B,IAAI,CAACiI,IAAI,GAAGjI,QAAQ,IAAIA,QAAQ,CAACjB,MAAM,GAAG,OAAO,GAAG,UAAU;EAClE;AACJ;AACAgH,WAAW,CAACzF,IAAI,GAAG,SAASkI,mBAAmB,CAAChI,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIuF,WAAW,EAAE7I,MAAM,CAACuD,iBAAiB,CAACvD,MAAM,CAACb,UAAU,CAAC,EAAEa,MAAM,CAACuD,iBAAiB,CAACqB,OAAO,CAAC,CAAC;AAAE,CAAC;AACrKiE,WAAW,CAACrF,IAAI,GAAG,aAAcxD,MAAM,CAACyD,iBAAiB,CAAC;EAAEC,IAAI,EAAEmF,WAAW;EAAElF,SAAS,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC;EAAEmG,SAAS,EAAE,CAAC,CAAC,EAAE,eAAe,CAAC;EAAEyB,QAAQ,EAAE,CAAC;EAAEC,YAAY,EAAE,SAASC,wBAAwB,CAACrC,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MAC5NpJ,MAAM,CAAC0L,WAAW,CAAC,eAAe,EAAErC,GAAG,CAAC1I,UAAU,CAAC,CAAC,YAAY,EAAE0I,GAAG,CAAC0B,IAAI,KAAK,UAAU,GAAG1B,GAAG,CAACb,KAAK,GAAG,IAAI,CAAC,CAAC,MAAM,EAAEa,GAAG,CAAC0B,IAAI,CAAC;IACnI;EAAE,CAAC;EAAEnH,MAAM,EAAE;IAAEmH,IAAI,EAAE;EAAO,CAAC;EAAEhB,QAAQ,EAAE,CAAC,aAAa;AAAE,CAAC,CAAC;AAC/D;AACA;AACA;AACA;AACAlB,WAAW,CAACC,kBAAkB,GAAG,IAAI;AACrC;AACAD,WAAW,CAAC/E,cAAc,GAAG,MAAM,CAC/B;EAAEJ,IAAI,EAAEvE;AAAW,CAAC,EACpB;EAAEuE,IAAI,EAAEkB;AAAQ,CAAC,CACpB;AACDiE,WAAW,CAAC2B,cAAc,GAAG;EACzBO,IAAI,EAAE,CAAC;IAAErH,IAAI,EAAEtE;EAAM,CAAC;AAC1B,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAO2E,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK/D,MAAM,CAACgE,iBAAiB,CAAC6E,WAAW,EAAE,CAAC;IACjGnF,IAAI,EAAE9E,SAAS;IACfqF,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,eAAe;MACzB6F,QAAQ,EAAE,aAAa;MACvBU,IAAI,EAAE;QACF,sBAAsB,EAAE,YAAY;QACpC,mBAAmB,EAAE,oCAAoC;QACzD,aAAa,EAAE,MAAM;QACrB,OAAO,EAAE;MACb;IACJ,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE/G,IAAI,EAAE1D,MAAM,CAACb;IAAW,CAAC,EAAE;MAAEuE,IAAI,EAAEkB;IAAQ,CAAC,CAAC;EAAE,CAAC,EAAE;IAAEmG,IAAI,EAAE,CAAC;MAC/ErH,IAAI,EAAEtE;IACV,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuM,iBAAiB,SAAS9C,WAAW,CAAC;EACxC;AACJ;AACA;AACA;AACA;EACI1I,WAAW,CAACyK,WAAW,EAAEC,KAAK,EAAEhG,QAAQ,EAAE;IACtC,KAAK,CAAC+F,WAAW,EAAEC,KAAK,CAAC;IACzB,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAAChG,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;EACI+G,kBAAkB,GAAG;IACjB,IAAI,CAACjG,WAAW,GAAG,IAAI,CAACd,QAAQ,CAACe,IAAI,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,IAAI,CAACgF,KAAK,CAAC/E,OAAO,CAAC;IACpE,IAAI,CAAC,IAAI,CAAC+E,KAAK,CAAC9E,WAAW,CAAC/D,WAAW,EAAE;MACrC,MAAM2C,mCAAmC,EAAE;IAC/C;IACA;IACA,MAAMpC,aAAa,GAAG,IAAI,CAACsI,KAAK,CAAC9E,WAAW,CAAC/D,WAAW,CAAC,IAAI,CAACgB,IAAI,CAAC;IACnE,IAAIR,KAAK,CAACC,OAAO,CAACF,aAAa,CAAC,EAAE;MAC9B,IAAI,CAACsJ,mBAAmB,EAAC,gBAAkBtJ,aAAa,CAAE;IAC9D,CAAC,MACI,IAAIA,aAAa,YAAYjE,UAAU,EAAE;MAC1CiE,aAAa,CAACK,IAAI,CAACjE,SAAS,CAAC,IAAI,CAACmM,UAAU,CAAC,CAAC,CACzCjI,SAAS,CAACiJ,MAAM,IAAI,IAAI,CAACD,mBAAmB,CAACC,MAAM,CAAC,CAAC;IAC9D;IACA,IAAI,CAACC,UAAU,CAAC5E,OAAO,CAACvE,IAAI,CAACjE,SAAS,CAAC,IAAI,CAACmM,UAAU,CAAC,CAAC,CACnDjI,SAAS,CAAC,MAAM,IAAI,CAACgJ,mBAAmB,EAAE,CAAC;EACpD;EACA;AACJ;AACA;EACI7F,WAAW,GAAG;IACV,IAAI,CAACgG,MAAM,EAAE;IACb,KAAK,CAAChG,WAAW,EAAE;EACvB;EACA;AACJ;AACA;AACA;AACA;EACI6F,mBAAmB,CAAC/I,QAAQ,EAAE;IAC1B,IAAIA,QAAQ,EAAE;MACV,IAAI,CAACmJ,SAAS,GAAGnJ,QAAQ;IAC7B;IACA,IAAI,IAAI,CAACiJ,UAAU,CAAClK,MAAM,IAAI,IAAI,CAACoK,SAAS,EAAE;MAC1C;MACA,MAAM7H,aAAa,GAAG,IAAI,CAAC2H,UAAU,CAAC7D,KAAK,CAAC9D,aAAa;MACzD,IAAI,CAACyG,KAAK,CAAC7D,iBAAiB,CAAC,IAAI,CAACiF,SAAS,EAAE,IAAI,CAACtG,WAAW,EAAEvB,aAAa,EAAE,IAAI,CAAC4G,KAAK,CAAC;IAC7F,CAAC,MACI;MACD;MACA,IAAI,CAACrF,WAAW,CAACyB,IAAI,CAAC,EAAE,CAAC;IAC7B;EACJ;EACA;AACJ;AACA;AACA;EACI4E,MAAM,GAAG;IACL,IAAI,IAAI,CAACD,UAAU,IAAI,IAAI,CAACA,UAAU,CAAC7D,KAAK,EAAE;MAC1C,IAAI,CAAC6D,UAAU,CAAC7D,KAAK,CAAC9D,aAAa,CAACnD,KAAK,EAAE;MAC3C,IAAI,CAAC0E,WAAW,CAACyB,IAAI,CAAC,EAAE,CAAC;IAC7B;EACJ;AACJ;AACAuE,iBAAiB,CAACvI,IAAI,GAAG,SAAS8I,yBAAyB,CAAC5I,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIqI,iBAAiB,EAAE3L,MAAM,CAACuD,iBAAiB,CAACvD,MAAM,CAACb,UAAU,CAAC,EAAEa,MAAM,CAACuD,iBAAiB,CAACqB,OAAO,CAAC,EAAE5E,MAAM,CAACuD,iBAAiB,CAACvD,MAAM,CAACX,eAAe,CAAC,CAAC;AAAE,CAAC;AACzOsM,iBAAiB,CAACnI,IAAI,GAAG,aAAcxD,MAAM,CAACyD,iBAAiB,CAAC;EAAEC,IAAI,EAAEiI,iBAAiB;EAAEhI,SAAS,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC;EAAEuF,cAAc,EAAE,SAASiD,gCAAgC,CAAC/C,EAAE,EAAEC,GAAG,EAAEC,QAAQ,EAAE;IAAE,IAAIF,EAAE,GAAG,CAAC,EAAE;MACrNpJ,MAAM,CAACuJ,cAAc,CAACD,QAAQ,EAAEnF,iBAAiB,EAAE,CAAC,CAAC;IACzD;IAAE,IAAIiF,EAAE,GAAG,CAAC,EAAE;MACV,IAAII,EAAE;MACNxJ,MAAM,CAACyJ,cAAc,CAACD,EAAE,GAAGxJ,MAAM,CAAC0J,WAAW,EAAE,CAAC,KAAKL,GAAG,CAAC0C,UAAU,GAAGvC,EAAE,CAAC;IAC7E;EAAE,CAAC;EAAEM,SAAS,EAAE,CAAC,CAAC,EAAE,eAAe,EAAE,sBAAsB,CAAC;EAAEyB,QAAQ,EAAE,CAAC;EAAEC,YAAY,EAAE,SAASY,8BAA8B,CAAChD,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MACpJpJ,MAAM,CAAC0L,WAAW,CAAC,eAAe,EAAErC,GAAG,CAAC1I,UAAU,CAAC,CAAC,MAAM,EAAE0I,GAAG,CAAC0B,IAAI,CAAC;IACzE;EAAE,CAAC;EAAEhB,QAAQ,EAAE,CAAC,mBAAmB,CAAC;EAAEsC,QAAQ,EAAE,CAACrM,MAAM,CAACsM,kBAAkB,CAAC,CAAC;IAAEC,OAAO,EAAE1D,WAAW;IAAE2D,WAAW,EAAEb;EAAkB,CAAC,CAAC,CAAC,EAAE3L,MAAM,CAACyM,0BAA0B;AAAE,CAAC,CAAC;AACjL;AACAd,iBAAiB,CAAC7H,cAAc,GAAG,MAAM,CACrC;EAAEJ,IAAI,EAAEvE;AAAW,CAAC,EACpB;EAAEuE,IAAI,EAAEkB;AAAQ,CAAC,EACjB;EAAElB,IAAI,EAAErE;AAAgB,CAAC,CAC5B;AACDsM,iBAAiB,CAACnB,cAAc,GAAG;EAC/BuB,UAAU,EAAE,CAAC;IAAErI,IAAI,EAAExE,eAAe;IAAE+E,IAAI,EAAE,CAACE,iBAAiB;EAAG,CAAC;AACtE,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOJ,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK/D,MAAM,CAACgE,iBAAiB,CAAC2H,iBAAiB,EAAE,CAAC;IACvGjI,IAAI,EAAE9E,SAAS;IACfqF,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,sBAAsB;MAChC6F,QAAQ,EAAE,mBAAmB;MAC7BU,IAAI,EAAE;QACF,sBAAsB,EAAE,YAAY;QACpC,aAAa,EAAE,MAAM;QACrB,OAAO,EAAE;MACb,CAAC;MACDiC,SAAS,EAAE,CAAC;QAAEH,OAAO,EAAE1D,WAAW;QAAE2D,WAAW,EAAEb;MAAkB,CAAC;IACxE,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEjI,IAAI,EAAE1D,MAAM,CAACb;IAAW,CAAC,EAAE;MAAEuE,IAAI,EAAEkB;IAAQ,CAAC,EAAE;MAAElB,IAAI,EAAE1D,MAAM,CAACX;IAAgB,CAAC,CAAC;EAAE,CAAC,EAAE;IAAE0M,UAAU,EAAE,CAAC;MACvHrI,IAAI,EAAExE,eAAe;MACrB+E,IAAI,EAAE,CAACE,iBAAiB;IAC5B,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwI,cAAc,GAAG,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,CAAC;EACrB;AACJ;AACA;AACA;AACA;AACA;AACA;EACIzM,WAAW,CAAC0M,SAAS,EAAEhC,KAAK,EAAEiC,SAAS,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IACrD,IAAI,CAACH,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAAChC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACiC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB;AACR;AACA;IACQ,IAAI,CAAClC,UAAU,GAAG,IAAIrM,OAAO,EAAE;IAC/B;AACR;AACA;IACQ,IAAI,CAACwO,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,WAAW,EAAE;IAClB,IAAI,IAAI,CAACH,IAAI,EAAE;MACX,IAAI,CAACA,IAAI,CAACI,MAAM,CAACxK,IAAI,CAACjE,SAAS,CAAC,IAAI,CAACmM,UAAU,CAAC,CAAC,CAACjI,SAAS,CAAC,MAAM,IAAI,CAACsK,WAAW,EAAE,CAAC;IACzF;EACJ;EACA;AACJ;AACA;AACA;EACI,IAAI3E,KAAK,GAAG;IAAE,OAAO,IAAI,CAAC6E,MAAM;EAAE;EAClC;AACJ;AACA;AACA;EACI,IAAI7E,KAAK,CAACyC,KAAK,EAAE;IACb,IAAI,CAACoC,MAAM,GAAGzN,oBAAoB,CAACqL,KAAK,CAAC;IACzC,IAAI,CAACkC,WAAW,EAAE;EACtB;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIG,MAAM,GAAG;IAAE,OAAO,IAAI,CAACJ,OAAO;EAAE;EACpC;AACJ;AACA;AACA;EACI,IAAII,MAAM,CAACA,MAAM,EAAE;IACf;IACA,IAAIrC,KAAK,GAAGqC,MAAM;IAClB;IACA,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;MAC5B;MACA,MAAME,KAAK,GAAGF,MAAM,CAACG,KAAK,CAACd,cAAc,CAAC;MAC1C1B,KAAK,GAAGuC,KAAK,CAAC,CAAC,CAAC;MAChBD,KAAK,GAAGC,KAAK,CAAC,CAAC,CAAC,IAAID,KAAK;IAC7B;IACA,IAAI,CAACN,WAAW,GAAGM,KAAK;IACxB,IAAI,CAACL,OAAO,GAAGtN,oBAAoB,CAACqL,KAAK,CAAC;IAC1C,IAAI,CAACkC,WAAW,EAAE;EACtB;EACA;AACJ;AACA;EACInH,WAAW,GAAG;IACV,IAAI,CAAC8E,UAAU,CAAC5E,IAAI,EAAE;IACtB,IAAI,CAAC4E,UAAU,CAAC3E,QAAQ,EAAE;EAC9B;EACA;AACJ;AACA;AACA;EACIuH,cAAc,GAAG;IACb;IACA,MAAMC,SAAS,GAAI,IAAI,CAACd,SAAS,CAAC7J,IAAI,IAAI,IAAI,CAAC6H,KAAK,CAAC9E,WAAW,CAACzE,QAAQ,GACnE,IAAI,CAACuJ,KAAK,CAAC9E,WAAW,CAACzE,QAAQ,CAAC,IAAI,CAACuL,SAAS,CAAC7J,IAAI,CAAC,GACpD,IAAI;IACV;IACA,MAAMwF,KAAK,GAAG,IAAI,CAAC6E,MAAM,IAAIM,SAAS;IACtC,OAAOnF,KAAK,GAAI,GAAEA,KAAK,GAAG,IAAI,CAAC0E,OAAQ,GAAE,IAAI,CAACD,WAAY,EAAC,GAAG,IAAI;EACtE;EACA;AACJ;AACA;EACIE,WAAW,GAAG;IACV;IACA,MAAMS,OAAO,GAAG,IAAI,CAACF,cAAc,EAAE;IACrC;IACA,MAAMG,WAAW,GAAG,IAAI,CAACb,IAAI,IAAI,IAAI,CAACA,IAAI,CAAC/B,KAAK,KAAK,KAAK,GAAG,cAAc,GAAG,aAAa;IAC3F,IAAI,CAAC6B,SAAS,CAACgB,QAAQ,CAAC,IAAI,CAACf,QAAQ,CAAC3B,aAAa,EAAEyC,WAAW,EAAED,OAAO,CAAC;EAC9E;AACJ;AACAhB,kBAAkB,CAACxJ,IAAI,GAAG,SAAS2K,0BAA0B,CAACzK,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIsJ,kBAAkB,EAAE5M,MAAM,CAACuD,iBAAiB,CAACsF,WAAW,CAAC,EAAE7I,MAAM,CAACuD,iBAAiB,CAACqB,OAAO,CAAC,EAAE5E,MAAM,CAACuD,iBAAiB,CAACvD,MAAM,CAACP,SAAS,CAAC,EAAEO,MAAM,CAACuD,iBAAiB,CAACvD,MAAM,CAACb,UAAU,CAAC,EAAEa,MAAM,CAACuD,iBAAiB,CAACtD,MAAM,CAACN,cAAc,EAAE,CAAC,CAAC,CAAC;AAAE,CAAC;AACjUiN,kBAAkB,CAACpJ,IAAI,GAAG,aAAcxD,MAAM,CAACyD,iBAAiB,CAAC;EAAEC,IAAI,EAAEkJ,kBAAkB;EAAEjJ,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,oBAAoB,EAAE,EAAE,CAAC,CAAC;EAAEC,MAAM,EAAE;IAAE4E,KAAK,EAAE,CAAC,oBAAoB,EAAE,OAAO,CAAC;IAAE8E,MAAM,EAAE,CAAC,0BAA0B,EAAE,QAAQ;EAAE;AAAE,CAAC,CAAC;AAC/O;AACAV,kBAAkB,CAAC9I,cAAc,GAAG,MAAM,CACtC;EAAEJ,IAAI,EAAEmF;AAAY,CAAC,EACrB;EAAEnF,IAAI,EAAEkB;AAAQ,CAAC,EACjB;EAAElB,IAAI,EAAEjE;AAAU,CAAC,EACnB;EAAEiE,IAAI,EAAEvE;AAAW,CAAC,EACpB;EAAEuE,IAAI,EAAE/D,cAAc;EAAEqO,UAAU,EAAE,CAAC;IAAEtK,IAAI,EAAElE;EAAS,CAAC;AAAE,CAAC,CAC7D;AACDoN,kBAAkB,CAACpC,cAAc,GAAG;EAChChC,KAAK,EAAE,CAAC;IAAE9E,IAAI,EAAEtE,KAAK;IAAE6E,IAAI,EAAE,CAAC,oBAAoB;EAAG,CAAC,CAAC;EACvDqJ,MAAM,EAAE,CAAC;IAAE5J,IAAI,EAAEtE,KAAK;IAAE6E,IAAI,EAAE,CAAC,0BAA0B;EAAG,CAAC;AACjE,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOF,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK/D,MAAM,CAACgE,iBAAiB,CAAC4I,kBAAkB,EAAE,CAAC;IACxGlJ,IAAI,EAAE9E,SAAS;IACfqF,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE;IACd,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAER,IAAI,EAAEmF;IAAY,CAAC,EAAE;MAAEnF,IAAI,EAAEkB;IAAQ,CAAC,EAAE;MAAElB,IAAI,EAAE1D,MAAM,CAACP;IAAU,CAAC,EAAE;MAAEiE,IAAI,EAAE1D,MAAM,CAACb;IAAW,CAAC,EAAE;MAAEuE,IAAI,EAAEzD,MAAM,CAACN,cAAc;MAAEqO,UAAU,EAAE,CAAC;QAC7JtK,IAAI,EAAElE;MACV,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAE;IAAEgJ,KAAK,EAAE,CAAC;MACpB9E,IAAI,EAAEtE,KAAK;MACX6E,IAAI,EAAE,CAAC,oBAAoB;IAC/B,CAAC,CAAC;IAAEqJ,MAAM,EAAE,CAAC;MACT5J,IAAI,EAAEtE,KAAK;MACX6E,IAAI,EAAE,CAAC,0BAA0B;IACrC,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgK,iBAAiB,CAAC;EACpB;AACJ;AACA;AACA;EACI9N,WAAW,CAAC0K,KAAK,EAAEgC,SAAS,EAAE;IAC1B,IAAI,CAAChC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACgC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACqB,UAAU,GAAG,KAAK;EAC3B;EACA;AACJ;AACA;AACA;EACI,IAAIC,SAAS,GAAG;IAAE,OAAO,IAAI,CAACD,UAAU;EAAE;EAC1C;AACJ;AACA;AACA;EACI,IAAIC,SAAS,CAAClD,KAAK,EAAE;IAAE,IAAI,CAACiD,UAAU,GAAGrO,qBAAqB,CAACoL,KAAK,CAAC;EAAE;EACvE;AACJ;AACA;AACA;EACImD,OAAO,CAACC,KAAK,EAAE;IACX,IAAI,CAACF,SAAS,GACR,IAAI,CAACtD,KAAK,CAAC9E,WAAW,CAAClF,iBAAiB,CAAC,IAAI,CAACgM,SAAS,CAAC7J,IAAI,CAAC,GAC7D,IAAI,CAAC6H,KAAK,CAAC9E,WAAW,CAAC1F,MAAM,CAAC,IAAI,CAACwM,SAAS,CAAC7J,IAAI,CAAC;IACxDqL,KAAK,CAACC,eAAe,EAAE;EAC3B;AACJ;AACAL,iBAAiB,CAAC7K,IAAI,GAAG,SAASmL,yBAAyB,CAACjL,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAI2K,iBAAiB,EAAEjO,MAAM,CAACuD,iBAAiB,CAACqB,OAAO,CAAC,EAAE5E,MAAM,CAACuD,iBAAiB,CAACsF,WAAW,CAAC,CAAC;AAAE,CAAC;AACjLoF,iBAAiB,CAACzK,IAAI,GAAG,aAAcxD,MAAM,CAACyD,iBAAiB,CAAC;EAAEC,IAAI,EAAEuK,iBAAiB;EAAEtK,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,mBAAmB,EAAE,EAAE,CAAC,CAAC;EAAE6H,YAAY,EAAE,SAASgD,8BAA8B,CAACpF,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MAC5MpJ,MAAM,CAACyO,UAAU,CAAC,OAAO,EAAE,SAASC,0CAA0C,CAACC,MAAM,EAAE;QAAE,OAAOtF,GAAG,CAAC+E,OAAO,CAACO,MAAM,CAAC;MAAE,CAAC,CAAC;IAC3H;EAAE,CAAC;EAAE/K,MAAM,EAAE;IAAEuK,SAAS,EAAE,CAAC,4BAA4B,EAAE,WAAW;EAAE;AAAE,CAAC,CAAC;AAC9E;AACAF,iBAAiB,CAACnK,cAAc,GAAG,MAAM,CACrC;EAAEJ,IAAI,EAAEkB;AAAQ,CAAC,EACjB;EAAElB,IAAI,EAAEmF;AAAY,CAAC,CACxB;AACDoF,iBAAiB,CAACzD,cAAc,GAAG;EAC/B2D,SAAS,EAAE,CAAC;IAAEzK,IAAI,EAAEtE,KAAK;IAAE6E,IAAI,EAAE,CAAC,4BAA4B;EAAG,CAAC;AACtE,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOF,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK/D,MAAM,CAACgE,iBAAiB,CAACiK,iBAAiB,EAAE,CAAC;IACvGvK,IAAI,EAAE9E,SAAS;IACfqF,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,qBAAqB;MAC/BuG,IAAI,EAAE;QACF,SAAS,EAAE;MACf;IACJ,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE/G,IAAI,EAAEkB;IAAQ,CAAC,EAAE;MAAElB,IAAI,EAAEmF;IAAY,CAAC,CAAC;EAAE,CAAC,EAAE;IAAEsF,SAAS,EAAE,CAAC;MAC9EzK,IAAI,EAAEtE,KAAK;MACX6E,IAAI,EAAE,CAAC,4BAA4B;IACvC,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA,MAAM2K,qBAAqB,GAAG,CAC1BjD,iBAAiB,EACjBzI,cAAc,EACd0J,kBAAkB,EAClBqB,iBAAiB,EACjBrJ,OAAO,EACPiE,WAAW,EACX1E,iBAAiB,CACpB;AACD,MAAM0K,aAAa,CAAC;AAEpBA,aAAa,CAACzL,IAAI,GAAG,SAAS0L,qBAAqB,CAACxL,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIuL,aAAa,GAAG;AAAE,CAAC;AAC7FA,aAAa,CAACE,IAAI,GAAG,aAAc/O,MAAM,CAACgP,gBAAgB,CAAC;EAAEtL,IAAI,EAAEmL;AAAc,CAAC,CAAC;AACnFA,aAAa,CAACI,IAAI,GAAG,aAAcjP,MAAM,CAACkP,gBAAgB,CAAC;EAAExC,SAAS,EAAE,CAAC5M,YAAY,EAAEoD,cAAc,CAAC;EAAEiM,OAAO,EAAE,CAACpP,YAAY;AAAE,CAAC,CAAC;AAClI,CAAC,YAAY;EAAE,CAAC,OAAOgE,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK/D,MAAM,CAACgE,iBAAiB,CAAC6K,aAAa,EAAE,CAAC;IACnGnL,IAAI,EAAEhE,QAAQ;IACduE,IAAI,EAAE,CAAC;MACCkL,OAAO,EAAE,CAACpP,YAAY,CAAC;MACvBqP,OAAO,EAAER,qBAAqB;MAC9BS,YAAY,EAAET,qBAAqB;MACnClC,SAAS,EAAE,CAAC5M,YAAY,EAAEoD,cAAc;IAC5C,CAAC;EACT,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;AACzB,CAAC,YAAY;EAAE,CAAC,OAAOoM,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKtP,MAAM,CAACuP,kBAAkB,CAACV,aAAa,EAAE;IAAEQ,YAAY,EAAE,YAAY;MAAE,OAAO,CAAC1D,iBAAiB,EAAEzI,cAAc,EAAE0J,kBAAkB,EAAEqB,iBAAiB,EAAErJ,OAAO,EAAEiE,WAAW,EAAE1E,iBAAiB,CAAC;IAAE,CAAC;IAAEgL,OAAO,EAAE,YAAY;MAAE,OAAO,CAACpP,YAAY,CAAC;IAAE,CAAC;IAAEqP,OAAO,EAAE,YAAY;MAAE,OAAO,CAACzD,iBAAiB,EAAEzI,cAAc,EAAE0J,kBAAkB,EAAEqB,iBAAiB,EAAErJ,OAAO,EAAEiE,WAAW,EAAE1E,iBAAiB,CAAC;IAAE;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEtd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAASjE,eAAe,EAAEmB,eAAe,EAAEU,iBAAiB,EAAE4J,iBAAiB,EAAE5I,wBAAwB,EAAEG,cAAc,EAAE0J,kBAAkB,EAAEzI,iBAAiB,EAAES,OAAO,EAAEiE,WAAW,EAAEvE,6BAA6B,EAAEE,mCAAmC,EAAEC,kCAAkC,EAAEC,0BAA0B,EAAEC,mCAAmC,EAAEkK,aAAa,EAAEZ,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}