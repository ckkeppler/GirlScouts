{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, Injectable, NgZone, defineInjectable, inject } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { asapScheduler, combineLatest, fromEventPattern, Subject } from 'rxjs';\nimport { debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nclass LayoutModule {}\nLayoutModule.ɵfac = function LayoutModule_Factory(t) {\n  return new (t || LayoutModule)();\n};\nLayoutModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: LayoutModule\n});\nLayoutModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n    type: NgModule\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Global registry for all dynamically-created, injected media queries.\n  @type {?} */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** *\n * Style tag that holds all of the dynamically-created media queries.\n  @type {?} */\nlet mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\nclass MediaMatcher {\n  /**\n   * @param {?} platform\n   */\n  constructor(platform) {\n    this.platform = platform;\n    this._matchMedia = this.platform.isBrowser && window.matchMedia ?\n    // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n    // call it from a different scope.\n    window.matchMedia.bind(window) : noopMatchMedia;\n  }\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   * @param {?} query\n   * @return {?}\n   */\n  matchMedia(query) {\n    if (this.platform.WEBKIT) {\n      createEmptyStyleRule(query);\n    }\n    return this._matchMedia(query);\n  }\n}\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) {\n  return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\nMediaMatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MediaMatcher,\n  factory: MediaMatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nMediaMatcher.ctorParameters = () => [{\n  type: Platform\n}];\n/** @nocollapse */\nMediaMatcher.ngInjectableDef = defineInjectable({\n  factory: function MediaMatcher_Factory() {\n    return new MediaMatcher(inject(Platform));\n  },\n  token: MediaMatcher,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css'); /** @type {?} */\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n    if (mediaQueryStyleNode.sheet) {\n      /** @type {?} */mediaQueryStyleNode.sheet.insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query) {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return (/** @type {?} */{\n      matches: query === 'all' || query === '',\n      media: query,\n      addListener: () => {},\n      removeListener: () => {}\n    }\n  );\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nclass BreakpointObserver {\n  /**\n   * @param {?} mediaMatcher\n   * @param {?} zone\n   */\n  constructor(mediaMatcher, zone) {\n    this.mediaMatcher = mediaMatcher;\n    this.zone = zone;\n    /**\n     * A map of all media queries currently being listened for.\n     */\n    this._queries = new Map();\n    /**\n     * A subject for all other observables to takeUntil based on.\n     */\n    this._destroySubject = new Subject();\n  }\n  /**\n   * Completes the active subject, signalling to all other observables to complete.\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param {?} value One or more media queries to check.\n   * @return {?} Whether any of the media queries match.\n   */\n  isMatched(value) {\n    /** @type {?} */\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param {?} value One or more media queries to check.\n   * @return {?} A stream of matches for the given queries.\n   */\n  observe(value) {\n    /** @type {?} */\n    const queries = splitQueries(coerceArray(value));\n    /** @type {?} */\n    const observables = queries.map(query => this._registerQuery(query).observable);\n    return combineLatest(observables).pipe(debounceTime(0, asapScheduler), map(breakpointStates => {\n      /** @type {?} */\n      const response = {\n        matches: false,\n        breakpoints: {}\n      };\n      breakpointStates.forEach(state => {\n        response.matches = response.matches || state.matches;\n        response.breakpoints[state.query] = state.matches;\n      });\n      return response;\n    }));\n  }\n  /**\n   * Registers a specific query to be listened for.\n   * @param {?} query\n   * @return {?}\n   */\n  _registerQuery(query) {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return (/** @type {?} */this._queries.get(query)\n      );\n    }\n    /** @type {?} */\n    const mql = this.mediaMatcher.matchMedia(query);\n    /** @type {?} */\n    let queryListener;\n    /** @type {?} */\n    const queryObservable = fromEventPattern(\n    // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n    // back into the zone because matchMedia is only included in Zone.js by loading the\n    // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n    // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n    // patches it.\n    listener => {\n      queryListener = e => this.zone.run(() => listener(e));\n      mql.addListener(queryListener);\n    }, () => mql.removeListener(queryListener)).pipe(takeUntil(this._destroySubject), startWith(mql), map(nextMql => ({\n      query,\n      matches: nextMql.matches\n    })));\n    /** @type {?} */\n    const output = {\n      observable: queryObservable,\n      mql\n    };\n    this._queries.set(query, output);\n    return output;\n  }\n}\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) {\n  return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\nBreakpointObserver.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BreakpointObserver,\n  factory: BreakpointObserver.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nBreakpointObserver.ctorParameters = () => [{\n  type: MediaMatcher\n}, {\n  type: NgZone\n}];\n/** @nocollapse */\nBreakpointObserver.ngInjectableDef = defineInjectable({\n  factory: function BreakpointObserver_Factory() {\n    return new BreakpointObserver(inject(MediaMatcher), inject(NgZone));\n  },\n  token: BreakpointObserver,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MediaMatcher\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n  return queries.map(query => query.split(',')).reduce((a1, a2) => a1.concat(a2)).map(query => query.trim());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n  @type {?} */\nconst Breakpoints = {\n  XSmall: '(max-width: 599px)',\n  Small: '(min-width: 600px) and (max-width: 959px)',\n  Medium: '(min-width: 960px) and (max-width: 1279px)',\n  Large: '(min-width: 1280px) and (max-width: 1919px)',\n  XLarge: '(min-width: 1920px)',\n  Handset: '(max-width: 599px) and (orientation: portrait), ' + '(max-width: 959px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',\n  HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher };","map":{"version":3,"names":["NgModule","Injectable","NgZone","defineInjectable","inject","Platform","asapScheduler","combineLatest","fromEventPattern","Subject","debounceTime","map","startWith","takeUntil","coerceArray","ɵngcc0","ɵngcc1","LayoutModule","ɵfac","LayoutModule_Factory","t","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","ngDevMode","ɵsetClassMetadata","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","constructor","platform","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","createEmptyStyleRule","MediaMatcher_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","ngInjectableDef","args","has","document","createElement","setAttribute","head","appendChild","sheet","insertRule","add","e","console","error","matches","media","addListener","removeListener","BreakpointObserver","mediaMatcher","zone","_queries","Map","_destroySubject","ngOnDestroy","next","complete","isMatched","value","queries","splitQueries","some","mediaQuery","_registerQuery","mql","observe","observables","observable","pipe","breakpointStates","response","breakpoints","forEach","state","get","queryListener","queryObservable","listener","run","nextMql","output","set","BreakpointObserver_Factory","split","reduce","a1","a2","concat","trim","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/layout.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, Injectable, NgZone, defineInjectable, inject } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { asapScheduler, combineLatest, fromEventPattern, Subject } from 'rxjs';\nimport { debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nclass LayoutModule {\n}\nLayoutModule.ɵfac = function LayoutModule_Factory(t) { return new (t || LayoutModule)(); };\nLayoutModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Global registry for all dynamically-created, injected media queries.\n  @type {?} */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** *\n * Style tag that holds all of the dynamically-created media queries.\n  @type {?} */\nlet mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\nclass MediaMatcher {\n    /**\n     * @param {?} platform\n     */\n    constructor(platform) {\n        this.platform = platform;\n        this._matchMedia = this.platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    matchMedia(query) {\n        if (this.platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nMediaMatcher.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MediaMatcher, factory: MediaMatcher.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n/** @nocollapse */ MediaMatcher.ngInjectableDef = defineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(inject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css'); /** @type {?} */\n            ((document.head)).appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            (/** @type {?} */ (mediaQueryStyleNode.sheet))\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return /** @type {?} */ ({\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { }\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nclass BreakpointObserver {\n    /**\n     * @param {?} mediaMatcher\n     * @param {?} zone\n     */\n    constructor(mediaMatcher, zone) {\n        this.mediaMatcher = mediaMatcher;\n        this.zone = zone;\n        /**\n         * A map of all media queries currently being listened for.\n         */\n        this._queries = new Map();\n        /**\n         * A subject for all other observables to takeUntil based on.\n         */\n        this._destroySubject = new Subject();\n    }\n    /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    isMatched(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    observe(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        /** @type {?} */\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        return combineLatest(observables).pipe(debounceTime(0, asapScheduler), map((breakpointStates) => {\n            /** @type {?} */\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach((state) => {\n                response.matches = response.matches || state.matches;\n                response.breakpoints[state.query] = state.matches;\n            });\n            return response;\n        }));\n    }\n    /**\n     * Registers a specific query to be listened for.\n     * @param {?} query\n     * @return {?}\n     */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return /** @type {?} */ ((this._queries.get(query)));\n        }\n        /** @type {?} */\n        const mql = this.mediaMatcher.matchMedia(query);\n        /** @type {?} */\n        let queryListener;\n        /** @type {?} */\n        const queryObservable = fromEventPattern(\n        // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n        // back into the zone because matchMedia is only included in Zone.js by loading the\n        // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n        // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n        // patches it.\n        (listener) => {\n            queryListener = (e) => this.zone.run(() => listener(e));\n            mql.addListener(queryListener);\n        }, () => mql.removeListener(queryListener))\n            .pipe(takeUntil(this._destroySubject), startWith(mql), map((nextMql) => ({ query, matches: nextMql.matches })));\n        /** @type {?} */\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nBreakpointObserver.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BreakpointObserver, factory: BreakpointObserver.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n/** @nocollapse */ BreakpointObserver.ngInjectableDef = defineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(inject(MediaMatcher), inject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map((query) => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n  @type {?} */\nconst Breakpoints = {\n    XSmall: '(max-width: 599px)',\n    Small: '(min-width: 600px) and (max-width: 959px)',\n    Medium: '(min-width: 960px) and (max-width: 1279px)',\n    Large: '(min-width: 1280px) and (max-width: 1919px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599px) and (orientation: portrait), ' +\n        '(max-width: 959px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher };\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,MAAM,EAAEC,gBAAgB,EAAEC,MAAM,QAAQ,eAAe;AACtF,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,aAAa,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,OAAO,QAAQ,MAAM;AAC9E,SAASC,YAAY,EAAEC,GAAG,EAAEC,SAAS,EAAEC,SAAS,QAAQ,gBAAgB;AACxE,SAASC,WAAW,QAAQ,uBAAuB;;AAEnD;AACA;AACA;AACA;AACA,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,OAAO,KAAKC,MAAM,MAAM,uBAAuB;AAC/C,MAAMC,YAAY,CAAC;AAEnBA,YAAY,CAACC,IAAI,GAAG,SAASC,oBAAoB,CAACC,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIH,YAAY,GAAG;AAAE,CAAC;AAC1FA,YAAY,CAACI,IAAI,GAAG,aAAcN,MAAM,CAACO,gBAAgB,CAAC;EAAEC,IAAI,EAAEN;AAAa,CAAC,CAAC;AACjFA,YAAY,CAACO,IAAI,GAAG,aAAcT,MAAM,CAACU,gBAAgB,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,YAAY;EAAE,CAAC,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKX,MAAM,CAACY,iBAAiB,CAACV,YAAY,EAAE,CAAC;IAClGM,IAAI,EAAEvB;EACV,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4B,kCAAkC,GAAG,IAAIC,GAAG,EAAE;AACpD;AACA;AACA;AACA,IAAIC,mBAAmB;AACvB;AACA;AACA;AACA,MAAMC,YAAY,CAAC;EACf;AACJ;AACA;EACIC,WAAW,CAACC,QAAQ,EAAE;IAClB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,WAAW,GAAG,IAAI,CAACD,QAAQ,CAACE,SAAS,IAAIC,MAAM,CAACC,UAAU;IAC3D;IACA;IACAD,MAAM,CAACC,UAAU,CAACC,IAAI,CAACF,MAAM,CAAC,GAC9BG,cAAc;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,UAAU,CAACG,KAAK,EAAE;IACd,IAAI,IAAI,CAACP,QAAQ,CAACQ,MAAM,EAAE;MACtBC,oBAAoB,CAACF,KAAK,CAAC;IAC/B;IACA,OAAO,IAAI,CAACN,WAAW,CAACM,KAAK,CAAC;EAClC;AACJ;AACAT,YAAY,CAACb,IAAI,GAAG,SAASyB,oBAAoB,CAACvB,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIW,YAAY,EAAEhB,MAAM,CAAC6B,QAAQ,CAAC5B,MAAM,CAACX,QAAQ,CAAC,CAAC;AAAE,CAAC;AAC1H0B,YAAY,CAACc,KAAK,GAAG,aAAc9B,MAAM,CAAC+B,kBAAkB,CAAC;EAAEC,KAAK,EAAEhB,YAAY;EAAEiB,OAAO,EAAEjB,YAAY,CAACb,IAAI;EAAE+B,UAAU,EAAE;AAAO,CAAC,CAAC;AACrI;AACAlB,YAAY,CAACmB,cAAc,GAAG,MAAM,CAChC;EAAE3B,IAAI,EAAElB;AAAS,CAAC,CACrB;AACD;AAAmB0B,YAAY,CAACoB,eAAe,GAAGhD,gBAAgB,CAAC;EAAE6C,OAAO,EAAE,SAASL,oBAAoB,GAAG;IAAE,OAAO,IAAIZ,YAAY,CAAC3B,MAAM,CAACC,QAAQ,CAAC,CAAC;EAAE,CAAC;EAAE0C,KAAK,EAAEhB,YAAY;EAAEkB,UAAU,EAAE;AAAO,CAAC,CAAC;AACxM,CAAC,YAAY;EAAE,CAAC,OAAOvB,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKX,MAAM,CAACY,iBAAiB,CAACI,YAAY,EAAE,CAAC;IAClGR,IAAI,EAAEtB,UAAU;IAChBmD,IAAI,EAAE,CAAC;MAAEH,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE1B,IAAI,EAAEP,MAAM,CAACX;IAAS,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,SAASqC,oBAAoB,CAACF,KAAK,EAAE;EACjC,IAAIZ,kCAAkC,CAACyB,GAAG,CAACb,KAAK,CAAC,EAAE;IAC/C;EACJ;EACA,IAAI;IACA,IAAI,CAACV,mBAAmB,EAAE;MACtBA,mBAAmB,GAAGwB,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MACrDzB,mBAAmB,CAAC0B,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;MACpDF,QAAQ,CAACG,IAAI,CAAGC,WAAW,CAAC5B,mBAAmB,CAAC;IACtD;IACA,IAAIA,mBAAmB,CAAC6B,KAAK,EAAE;MAC1B,gBAAkB7B,mBAAmB,CAAC6B,KAAK,CACvCC,UAAU,CAAE,UAASpB,KAAM,sBAAqB,EAAE,CAAC,CAAC;MACzDZ,kCAAkC,CAACiC,GAAG,CAACrB,KAAK,CAAC;IACjD;EACJ,CAAC,CACD,OAAOsB,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;EACpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAASvB,cAAc,CAACC,KAAK,EAAE;EAC3B;EACA;EACA,OAAO,iBAAkB;MACrByB,OAAO,EAAEzB,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,EAAE;MACxC0B,KAAK,EAAE1B,KAAK;MACZ2B,WAAW,EAAE,MAAM,CAAE,CAAC;MACtBC,cAAc,EAAE,MAAM,CAAE;IAC5B;EAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,CAAC;EACrB;AACJ;AACA;AACA;EACIrC,WAAW,CAACsC,YAAY,EAAEC,IAAI,EAAE;IAC5B,IAAI,CAACD,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB;AACR;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,IAAIC,GAAG,EAAE;IACzB;AACR;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,IAAIjE,OAAO,EAAE;EACxC;EACA;AACJ;AACA;AACA;EACIkE,WAAW,GAAG;IACV,IAAI,CAACD,eAAe,CAACE,IAAI,EAAE;IAC3B,IAAI,CAACF,eAAe,CAACG,QAAQ,EAAE;EACnC;EACA;AACJ;AACA;AACA;AACA;EACIC,SAAS,CAACC,KAAK,EAAE;IACb;IACA,MAAMC,OAAO,GAAGC,YAAY,CAACnE,WAAW,CAACiE,KAAK,CAAC,CAAC;IAChD,OAAOC,OAAO,CAACE,IAAI,CAACC,UAAU,IAAI,IAAI,CAACC,cAAc,CAACD,UAAU,CAAC,CAACE,GAAG,CAACpB,OAAO,CAAC;EAClF;EACA;AACJ;AACA;AACA;AACA;AACA;EACIqB,OAAO,CAACP,KAAK,EAAE;IACX;IACA,MAAMC,OAAO,GAAGC,YAAY,CAACnE,WAAW,CAACiE,KAAK,CAAC,CAAC;IAChD;IACA,MAAMQ,WAAW,GAAGP,OAAO,CAACrE,GAAG,CAAC6B,KAAK,IAAI,IAAI,CAAC4C,cAAc,CAAC5C,KAAK,CAAC,CAACgD,UAAU,CAAC;IAC/E,OAAOjF,aAAa,CAACgF,WAAW,CAAC,CAACE,IAAI,CAAC/E,YAAY,CAAC,CAAC,EAAEJ,aAAa,CAAC,EAAEK,GAAG,CAAE+E,gBAAgB,IAAK;MAC7F;MACA,MAAMC,QAAQ,GAAG;QACb1B,OAAO,EAAE,KAAK;QACd2B,WAAW,EAAE,CAAC;MAClB,CAAC;MACDF,gBAAgB,CAACG,OAAO,CAAEC,KAAK,IAAK;QAChCH,QAAQ,CAAC1B,OAAO,GAAG0B,QAAQ,CAAC1B,OAAO,IAAI6B,KAAK,CAAC7B,OAAO;QACpD0B,QAAQ,CAACC,WAAW,CAACE,KAAK,CAACtD,KAAK,CAAC,GAAGsD,KAAK,CAAC7B,OAAO;MACrD,CAAC,CAAC;MACF,OAAO0B,QAAQ;IACnB,CAAC,CAAC,CAAC;EACP;EACA;AACJ;AACA;AACA;AACA;EACIP,cAAc,CAAC5C,KAAK,EAAE;IAClB;IACA,IAAI,IAAI,CAACgC,QAAQ,CAACnB,GAAG,CAACb,KAAK,CAAC,EAAE;MAC1B,OAAO,iBAAmB,IAAI,CAACgC,QAAQ,CAACuB,GAAG,CAACvD,KAAK;MAAC;IACtD;IACA;IACA,MAAM6C,GAAG,GAAG,IAAI,CAACf,YAAY,CAACjC,UAAU,CAACG,KAAK,CAAC;IAC/C;IACA,IAAIwD,aAAa;IACjB;IACA,MAAMC,eAAe,GAAGzF,gBAAgB;IACxC;IACA;IACA;IACA;IACA;IACC0F,QAAQ,IAAK;MACVF,aAAa,GAAIlC,CAAC,IAAK,IAAI,CAACS,IAAI,CAAC4B,GAAG,CAAC,MAAMD,QAAQ,CAACpC,CAAC,CAAC,CAAC;MACvDuB,GAAG,CAAClB,WAAW,CAAC6B,aAAa,CAAC;IAClC,CAAC,EAAE,MAAMX,GAAG,CAACjB,cAAc,CAAC4B,aAAa,CAAC,CAAC,CACtCP,IAAI,CAAC5E,SAAS,CAAC,IAAI,CAAC6D,eAAe,CAAC,EAAE9D,SAAS,CAACyE,GAAG,CAAC,EAAE1E,GAAG,CAAEyF,OAAO,KAAM;MAAE5D,KAAK;MAAEyB,OAAO,EAAEmC,OAAO,CAACnC;IAAQ,CAAC,CAAC,CAAC,CAAC;IACnH;IACA,MAAMoC,MAAM,GAAG;MAAEb,UAAU,EAAES,eAAe;MAAEZ;IAAI,CAAC;IACnD,IAAI,CAACb,QAAQ,CAAC8B,GAAG,CAAC9D,KAAK,EAAE6D,MAAM,CAAC;IAChC,OAAOA,MAAM;EACjB;AACJ;AACAhC,kBAAkB,CAACnD,IAAI,GAAG,SAASqF,0BAA0B,CAACnF,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIiD,kBAAkB,EAAEtD,MAAM,CAAC6B,QAAQ,CAACb,YAAY,CAAC,EAAEhB,MAAM,CAAC6B,QAAQ,CAAC7B,MAAM,CAACb,MAAM,CAAC,CAAC;AAAE,CAAC;AACzKmE,kBAAkB,CAACxB,KAAK,GAAG,aAAc9B,MAAM,CAAC+B,kBAAkB,CAAC;EAAEC,KAAK,EAAEsB,kBAAkB;EAAErB,OAAO,EAAEqB,kBAAkB,CAACnD,IAAI;EAAE+B,UAAU,EAAE;AAAO,CAAC,CAAC;AACvJ;AACAoB,kBAAkB,CAACnB,cAAc,GAAG,MAAM,CACtC;EAAE3B,IAAI,EAAEQ;AAAa,CAAC,EACtB;EAAER,IAAI,EAAErB;AAAO,CAAC,CACnB;AACD;AAAmBmE,kBAAkB,CAAClB,eAAe,GAAGhD,gBAAgB,CAAC;EAAE6C,OAAO,EAAE,SAASuD,0BAA0B,GAAG;IAAE,OAAO,IAAIlC,kBAAkB,CAACjE,MAAM,CAAC2B,YAAY,CAAC,EAAE3B,MAAM,CAACF,MAAM,CAAC,CAAC;EAAE,CAAC;EAAE6C,KAAK,EAAEsB,kBAAkB;EAAEpB,UAAU,EAAE;AAAO,CAAC,CAAC;AACpP,CAAC,YAAY;EAAE,CAAC,OAAOvB,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKX,MAAM,CAACY,iBAAiB,CAAC0C,kBAAkB,EAAE,CAAC;IACxG9C,IAAI,EAAEtB,UAAU;IAChBmD,IAAI,EAAE,CAAC;MAAEH,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE1B,IAAI,EAAEQ;IAAa,CAAC,EAAE;MAAER,IAAI,EAAER,MAAM,CAACb;IAAO,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+E,YAAY,CAACD,OAAO,EAAE;EAC3B,OAAOA,OAAO,CAACrE,GAAG,CAAE6B,KAAK,IAAKA,KAAK,CAACgE,KAAK,CAAC,GAAG,CAAC,CAAC,CAC1CC,MAAM,CAAC,CAACC,EAAE,EAAEC,EAAE,KAAKD,EAAE,CAACE,MAAM,CAACD,EAAE,CAAC,CAAC,CACjChG,GAAG,CAAC6B,KAAK,IAAIA,KAAK,CAACqE,IAAI,EAAE,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG;EAChBC,MAAM,EAAE,oBAAoB;EAC5BC,KAAK,EAAE,2CAA2C;EAClDC,MAAM,EAAE,4CAA4C;EACpDC,KAAK,EAAE,6CAA6C;EACpDC,MAAM,EAAE,qBAAqB;EAC7BC,OAAO,EAAE,kDAAkD,GACvD,iDAAiD;EACrDC,MAAM,EAAE,yEAAyE,GAC7E,yEAAyE;EAC7EC,GAAG,EAAE,kDAAkD,GACnD,kDAAkD;EACtDC,eAAe,EAAE,gDAAgD;EACjEC,cAAc,EAAE,uEAAuE;EACvFC,WAAW,EAAE,gDAAgD;EAC7DC,gBAAgB,EAAE,iDAAiD;EACnEC,eAAe,EAAE,yEAAyE;EAC1FC,YAAY,EAAE;AAClB,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAS3G,YAAY,EAAEoD,kBAAkB,EAAEyC,WAAW,EAAE/E,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}