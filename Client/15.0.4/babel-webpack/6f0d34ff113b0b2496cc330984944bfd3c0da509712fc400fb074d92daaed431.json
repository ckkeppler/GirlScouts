{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1)(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r1.action());\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) {}\nclass MatSnackBarRef {\n  /**\n   * @param {?} containerInstance\n   * @param {?} _overlayRef\n   */\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /**\n     * Subject for notifying the user that the snack bar has been dismissed.\n     */\n    this._afterDismissed = new Subject();\n    /**\n     * Subject for notifying the user that the snack bar has opened and appeared.\n     */\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the snack bar action was called.\n     */\n    this._onAction = new Subject();\n    /**\n     * Whether the snack bar was dismissed using the action button.\n     */\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /**\n   * Dismisses the snack bar.\n   * @return {?}\n   */\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @return {?}\n   */\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /**\n   * Dismisses the snack bar after some duration\n   * @param {?} duration\n   * @return {?}\n   */\n  _dismissAfter(duration) {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n  /**\n   * Marks the snackbar as opened\n   * @return {?}\n   */\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n  /**\n   * Cleans up the DOM after closing.\n   * @return {?}\n   */\n  _finishDismiss() {\n    this._overlayRef.dispose();\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n  /**\n   * Gets an observable that is notified when the snack bar is finished closing.\n   * @return {?}\n   */\n  afterDismissed() {\n    return this._afterDismissed.asObservable();\n  }\n  /**\n   * Gets an observable that is notified when the snack bar has opened and appeared.\n   * @return {?}\n   */\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /**\n   * Gets an observable that is notified when the snack bar action is called.\n   * @return {?}\n   */\n  onAction() {\n    return this._onAction.asObservable();\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to access the data that was passed in to a snack bar.\n  @type {?} */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n  constructor() {\n    /**\n     * The politeness level for the MatAriaLiveAnnouncer announcement.\n     */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n    this.announcementMessage = '';\n    /**\n     * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n     */\n    this.duration = 0;\n    /**\n     * Data being injected into the child component.\n     */\n    this.data = null;\n    /**\n     * The horizontal position to place the snack bar.\n     */\n    this.horizontalPosition = 'center';\n    /**\n     * The vertical position to place the snack bar.\n     */\n    this.verticalPosition = 'bottom';\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n  /**\n   * @param {?} snackBarRef\n   * @param {?} data\n   */\n  constructor(snackBarRef, data) {\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /**\n   * Performs the action on the snack bar.\n   * @return {?}\n   */\n  action() {\n    this.snackBarRef.dismissWithAction();\n  }\n  /**\n   * If the action button should be shown.\n   * @return {?}\n   */\n  get hasAction() {\n    return !!this.data.action;\n  }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n  return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n};\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: SimpleSnackBar,\n  selectors: [[\"simple-snack-bar\"]],\n  hostAttrs: [1, \"mat-simple-snackbar\"],\n  decls: 3,\n  vars: 2,\n  consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n  template: function SimpleSnackBar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\");\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    }\n  },\n  dependencies: [ɵngcc1.NgIf, ɵngcc2.MatButton],\n  styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [{\n  type: MatSnackBarRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SNACK_BAR_DATA]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n    type: Component,\n    args: [{\n      selector: 'simple-snack-bar',\n      template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-simple-snackbar'\n      },\n      styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSnackBarRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DATA]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Animations used by the Material snack bar.\n * \\@docs-private\n  @type {?} */\nconst matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [state('void, hidden', style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), state('visible', style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n    opacity: 0\n  })))])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} snackBarConfig\n   */\n  constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this.snackBarConfig = snackBarConfig;\n    /**\n     * Whether the component has been destroyed.\n     */\n    this._destroyed = false;\n    /**\n     * Subject for notifying that the snack bar has exited from view.\n     */\n    this._onExit = new Subject();\n    /**\n     * Subject for notifying that the snack bar has finished entering the view.\n     */\n    this._onEnter = new Subject();\n    /**\n     * The state of the snack bar animations.\n     */\n    this._animationState = 'void';\n  }\n  /**\n   * Attach a component portal as content to this snack bar container.\n   * @template T\n   * @param {?} portal\n   * @return {?}\n   */\n  attachComponentPortal(portal) {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /**\n   * Attach a template portal as content to this snack bar container.\n   * @template C\n   * @param {?} portal\n   * @return {?}\n   */\n  attachTemplatePortal(portal) {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /**\n   * Handle end of animations, updating the state of the snackbar.\n   * @param {?} event\n   * @return {?}\n   */\n  onAnimationEnd(event) {\n    const {\n      fromState,\n      toState\n    } = event;\n    if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n      this._completeExit();\n    }\n    if (toState === 'visible') {\n      /** @type {?} */\n      const onEnter = this._onEnter;\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n  /**\n   * Begin animation of snack bar entrance into view.\n   * @return {?}\n   */\n  enter() {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Begin animation of the snack bar exiting from view.\n   * @return {?}\n   */\n  exit() {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n  /**\n   * Makes sure the exit callbacks have been invoked when the element is destroyed.\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   * @return {?}\n   */\n  _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n  /**\n   * Applies the various positioning and user-configured CSS classes to the snack bar.\n   * @return {?}\n   */\n  _applySnackBarClasses() {\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    /** @type {?} */\n    const panelClasses = this.snackBarConfig.panelClass;\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n  /**\n   * Asserts that no content is already attached to the container.\n   * @return {?}\n   */\n  _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) {\n  return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig));\n};\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSnackBarContainer,\n  selectors: [[\"snack-bar-container\"]],\n  viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"alert\", 1, \"mat-snack-bar-container\"],\n  hostVars: 1,\n  hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n        return ctx.onAnimationEnd($event);\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatSnackBarContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  dependencies: [ɵngcc3.CdkPortalOutlet],\n  styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;width:100%}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSnackBarAnimations.snackBarState]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: MatSnackBarConfig\n}];\nMatSnackBarContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n    type: Component,\n    args: [{\n      selector: 'snack-bar-container',\n      template: \"<ng-template cdkPortalOutlet></ng-template>\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [matSnackBarAnimations.snackBarState],\n      host: {\n        'role': 'alert',\n        'class': 'mat-snack-bar-container',\n        '[@state]': '_animationState',\n        '(@state.done)': 'onAnimationEnd($event)'\n      },\n      styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;width:100%}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatSnackBarConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet]\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n  return new (t || MatSnackBarModule)();\n};\nMatSnackBarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSnackBarModule\n});\nMatSnackBarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n      exports: [MatSnackBarContainer, MatCommonModule],\n      declarations: [MatSnackBarContainer, SimpleSnackBar],\n      entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, {\n    declarations: function () {\n      return [MatSnackBarContainer, SimpleSnackBar];\n    },\n    imports: function () {\n      return [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatSnackBarContainer, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to specify default snack bar.\n  @type {?} */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n  /**\n   * @param {?} _overlay\n   * @param {?} _live\n   * @param {?} _injector\n   * @param {?} _breakpointObserver\n   * @param {?} _parentSnackBar\n   * @param {?} _defaultConfig\n   */\n  constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n    this._snackBarRefAtThisLevel = null;\n  }\n  /**\n   * Reference to the currently opened snackbar at *any* level.\n   * @return {?}\n   */\n  get _openedSnackBarRef() {\n    /** @type {?} */\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set _openedSnackBarRef(value) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @template T\n   * @param {?} component Component to be instantiated.\n   * @param {?=} config Extra configuration for the snack bar.\n   * @return {?}\n   */\n  openFromComponent(component, config) {\n    return (/** @type {?} */this._attach(component, config)\n    );\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param {?} template Template to be instantiated.\n   * @param {?=} config Extra configuration for the snack bar.\n   * @return {?}\n   */\n  openFromTemplate(template, config) {\n    return this._attach(template, config);\n  }\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param {?} message The message to show in the snackbar.\n   * @param {?=} action The label for the snackbar action.\n   * @param {?=} config Additional configuration options for the snackbar.\n   * @return {?}\n   */\n  open(message, action = '', config) {\n    /** @type {?} */\n    const _config = Object.assign({}, this._defaultConfig, config);\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {\n      message,\n      action\n    };\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n  /**\n   * Dismisses the currently-visible snack bar.\n   * @return {?}\n   */\n  dismiss() {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n  /**\n   * Attaches the snack bar container component to the overlay.\n   * @param {?} overlayRef\n   * @param {?} config\n   * @return {?}\n   */\n  _attachSnackBarContainer(overlayRef, config) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    /** @type {?} */\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatSnackBarConfig, config]]));\n    /** @type {?} */\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    /** @type {?} */\n    const containerRef = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   * @template T\n   * @param {?} content\n   * @param {?=} userConfig\n   * @return {?}\n   */\n  _attach(content, userConfig) {\n    /** @type {?} */\n    const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n    /** @type {?} */\n    const overlayRef = this._createOverlay(config);\n    /** @type {?} */\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    /** @type {?} */\n    const snackBarRef = new MatSnackBarRef(container, overlayRef);\n    if (content instanceof TemplateRef) {\n      /** @type {?} */\n      const portal = new TemplatePortal(content, /** @type {?} */null, /** @type {?} */{\n        $implicit: config.data,\n        snackBarRef\n      });\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      /** @type {?} */\n      const injector = this._createInjector(config, snackBarRef);\n      /** @type {?} */\n      const portal = new ComponentPortal(content, undefined, injector);\n      /** @type {?} */\n      const contentRef = container.attachComponentPortal(portal);\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe(state$$1 => {\n      if (state$$1.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n  /**\n   * Animates the old snack bar out and the new one in.\n   * @param {?} snackBarRef\n   * @param {?} config\n   * @return {?}\n   */\n  _animateSnackBar(snackBarRef, config) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter( /** @type {?} */config.duration));\n    }\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param {?} config The user-specified snack bar config.\n   * @return {?}\n   */\n  _createOverlay(config) {\n    /** @type {?} */\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n    /** @type {?} */\n    let positionStrategy = this._overlay.position().global();\n    /** @type {?} */\n    const isRtl = config.direction === 'rtl';\n    /** @type {?} */\n    const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n    /** @type {?} */\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @template T\n   * @param {?} config Config that was used to create the snack bar.\n   * @param {?} snackBarRef Reference to the snack bar.\n   * @return {?}\n   */\n  _createInjector(config, snackBarRef) {\n    /** @type {?} */\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    return new PortalInjector(userInjector || this._injector, new WeakMap([[MatSnackBarRef, snackBarRef], [MAT_SNACK_BAR_DATA, config.data]]));\n  }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n  return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\nMatSnackBar.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MatSnackBar,\n  factory: MatSnackBar.ɵfac,\n  providedIn: MatSnackBarModule\n});\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: LiveAnnouncer\n}, {\n  type: Injector\n}, {\n  type: BreakpointObserver\n}, {\n  type: MatSnackBar,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: MatSnackBarConfig,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n  }]\n}];\n/** @nocollapse */\nMatSnackBar.ngInjectableDef = defineInjectable({\n  factory: function MatSnackBar_Factory() {\n    return new MatSnackBar(inject(Overlay), inject(LiveAnnouncer), inject(INJECTOR), inject(BreakpointObserver), inject(MatSnackBar, 12), inject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  },\n  token: MatSnackBar,\n  providedIn: MatSnackBarModule\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n    type: Injectable,\n    args: [{\n      providedIn: MatSnackBarModule\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc4.Overlay\n    }, {\n      type: ɵngcc5.LiveAnnouncer\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }, {\n      type: MatSnackBar,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };","map":{"version":3,"names":["Subject","InjectionToken","Component","ViewEncapsulation","Inject","ChangeDetectionStrategy","ChangeDetectorRef","ElementRef","NgZone","ViewChild","NgModule","Injectable","Injector","Optional","SkipSelf","TemplateRef","defineInjectable","inject","INJECTOR","animate","state","style","transition","trigger","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","PortalInjector","TemplatePortal","take","takeUntil","OverlayModule","Overlay","OverlayConfig","CommonModule","MatCommonModule","MatButtonModule","LiveAnnouncer","BreakpointObserver","Breakpoints","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","SimpleSnackBar_div_2_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","SimpleSnackBar_div_2_Template_button_click_1_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","action","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵtextInterpolate","data","MatSnackBarContainer_ng_template_0_Template","MatSnackBarRef","constructor","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","hasAction","ɵfac","SimpleSnackBar_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","decls","vars","consts","template","SimpleSnackBar_Template","ɵɵtemplate","message","ɵɵproperty","dependencies","NgIf","MatButton","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","selector","None","OnPush","host","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","ngOnDestroy","onMicrotaskEmpty","pipe","element","nativeElement","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","MatSnackBarContainer_Factory","viewQuery","MatSnackBarContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","MatSnackBarContainer_HostBindings","ɵɵsyntheticHostListener","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","ɵɵsyntheticHostProperty","features","ɵɵInheritDefinitionFeature","MatSnackBarContainer_Template","animation","propDecorators","animations","MatSnackBarModule","MatSnackBarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","parent","value","openFromComponent","component","config","_attach","openFromTemplate","open","_config","Object","assign","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","WeakMap","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Handset","detachments","state$$1","matches","overlayElement","remove","_animateSnackBar","announce","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","create","MatSnackBar_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","ngInjectableDef"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/material/__ivy_ngcc__/esm2015/snack-bar.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1)(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r1.action()); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) { }\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to access the data that was passed in to a snack bar.\n  @type {?} */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, dependencies: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{ selector: 'simple-snack-bar', template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                    'class': 'mat-simple-snackbar'\n                }, styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"] }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Animations used by the Material snack bar.\n * \\@docs-private\n  @type {?} */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            /** @type {?} */\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"alert\", 1, \"mat-snack-bar-container\"], hostVars: 1, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, dependencies: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;width:100%}\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] }, changeDetection: 0 });\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{ selector: 'snack-bar-container', template: \"<ng-template cdkPortalOutlet></ng-template>\", changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                    'role': 'alert',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                }, styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;width:100%}\"] }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); };\nMatSnackBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to specify default snack bar.\n  @type {?} */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        /** @type {?} */\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return /** @type {?} */ (this._attach(component, config));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        /** @type {?} */\n        const _config = Object.assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        /** @type {?} */\n        const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            const portal = new TemplatePortal(content, /** @type {?} */ ((null)), /** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            }));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            const portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe(state$$1 => {\n            if (state$$1.matches) {\n                overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n            }\n            else {\n                overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n            }\n        });\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(/** @type {?} */ ((config.duration))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        let positionStrategy = this._overlay.position().global();\n        /** @type {?} */\n        const isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatSnackBar, factory: MatSnackBar.ɵfac, providedIn: MatSnackBarModule });\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ MatSnackBar.ngInjectableDef = defineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(inject(Overlay), inject(LiveAnnouncer), inject(INJECTOR), inject(BreakpointObserver), inject(MatSnackBar, 12), inject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc5.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc6.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}