{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, NgZone, Optional, Inject, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, GestureConfig, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/core';\nimport * as ɵngcc5 from '@angular/cdk/observers';\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () {\n  return {\n    enterDuration: 150\n  };\n};\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory: () => ({\n    disableToggleValue: false,\n    disableDragValue: false\n  })\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/** *\n * \\@docs-private\n  @type {?} */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n  /**\n   * @param {?} source\n   * @param {?} checked\n   */\n  constructor(source, checked) {\n    this.source = source;\n    this.checked = checked;\n  }\n}\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _platform\n   * @param {?} _focusMonitor\n   * @param {?} _changeDetectorRef\n   * @param {?} tabIndex\n   * @param {?} _ngZone\n   * @param {?} defaults\n   * @param {?=} _animationMode\n   * @param {?=} _dir\n   */\n  constructor(elementRef,\n  /**\n  * @deprecated The `_platform` parameter to be removed.\n  * @breaking-change 8.0.0\n  */\n  _platform, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {\n    super(elementRef);\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this.defaults = defaults;\n    this._animationMode = _animationMode;\n    this._dir = _dir;\n    this.onChange = _ => {};\n    this.onTouched = () => {};\n    this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n    this._required = false;\n    this._checked = false;\n    /**\n     * Whether the thumb is currently being dragged.\n     */\n    this._dragging = false;\n    /**\n     * Name value will be applied to the input element if present.\n     */\n    this.name = null;\n    /**\n     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n     */\n    this.id = this._uniqueId;\n    /**\n     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n     */\n    this.labelPosition = 'after';\n    /**\n     * Used to set the aria-label attribute on the underlying input element.\n     */\n    this.ariaLabel = null;\n    /**\n     * Used to set the aria-labelledby attribute on the underlying input element.\n     */\n    this.ariaLabelledby = null;\n    /**\n     * An event will be dispatched each time the slide-toggle changes its value.\n     */\n    this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed. The event does not fire when the user drags to change\n     * the slide toggle value.\n     */\n    this.toggleChange = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     */\n    this.dragChange = new EventEmitter();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n  /**\n   * Whether the slide-toggle is required.\n   * @return {?}\n   */\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the slide-toggle element is checked or not.\n   * @return {?}\n   */\n  get checked() {\n    return this._checked;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Returns the unique id for the visual hidden input.\n   * @return {?}\n   */\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state\n        // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n        // error. See https://github.com/angular/angular/issues/17793. To work around this,\n        // we defer telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this.onTouched());\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\n   * Method being called whenever the underlying input emits a change event.\n   * @param {?} event\n   * @return {?}\n   */\n  _onChangeEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n  /**\n   * Method being called whenever the slide-toggle has been clicked.\n   * @param {?} event\n   * @return {?}\n   */\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    this.checked = !!value;\n  }\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Implemented as a part of ControlValueAccessor.\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Focuses the slide-toggle.\n   * @return {?}\n   */\n  focus() {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n  /**\n   * Toggles the checked state of the slide-toggle.\n   * @return {?}\n   */\n  toggle() {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   * @return {?}\n   */\n  _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n  /**\n   * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n   * @param {?} distance\n   * @return {?}\n   */\n  _getDragPercentage(distance) {\n    /** @type {?} */\n    let percentage = distance / this._thumbBarWidth * 100;\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n    return Math.max(0, Math.min(percentage, 100));\n  }\n  /**\n   * @return {?}\n   */\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      /** @type {?} */\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _onDrag(event) {\n    if (this._dragging) {\n      /** @type {?} */\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      /** @type {?} */\n      const dragX = this._dragPercentage / 100 * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _onDragEnd() {\n    if (this._dragging) {\n      /** @type {?} */\n      const newCheckedValue = this._dragPercentage > 50;\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n  /**\n   * Method being called whenever the label text changes.\n   * @return {?}\n   */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) {\n  return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\nMatSlideToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSlideToggle,\n  selectors: [[\"mat-slide-toggle\"]],\n  viewQuery: function MatSlideToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n      ɵngcc0.ɵɵviewQuery(_c1, 5);\n      ɵngcc0.ɵɵviewQuery(_c2, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-slide-toggle\"],\n  hostVars: 10,\n  hostBindings: function MatSlideToggle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"tabindex\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    name: \"name\",\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    required: \"required\",\n    checked: \"checked\"\n  },\n  outputs: {\n    change: \"change\",\n    toggleChange: \"toggleChange\",\n    dragChange: \"dragChange\"\n  },\n  exportAs: [\"matSlideToggle\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 14,\n  vars: 16,\n  consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\", 3, \"slidestart\", \"slide\", \"slideend\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"]],\n  template: function MatSlideToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2, 3)(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) {\n        return ctx._onChangeEvent($event);\n      })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n      ɵngcc0.ɵɵlistener(\"slidestart\", function MatSlideToggle_Template_div_slidestart_6_listener() {\n        return ctx._onDragStart();\n      })(\"slide\", function MatSlideToggle_Template_div_slide_6_listener($event) {\n        return ctx._onDrag($event);\n      })(\"slideend\", function MatSlideToggle_Template_div_slideend_6_listener() {\n        return ctx._onDragEnd();\n      });\n      ɵngcc0.ɵɵelement(8, \"div\", 8);\n      ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n      ɵngcc0.ɵɵelement(10, \"div\", 10);\n      ɵngcc0.ɵɵelementEnd()()();\n      ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵprojection(13);\n      ɵngcc0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(1);\n      const _r4 = ɵngcc0.ɵɵreference(12);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(15, _c3));\n    }\n  },\n  dependencies: [ɵngcc4.MatRipple, ɵngcc5.CdkObserveContent],\n  styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle.cdk-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}}@media screen and (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: FocusMonitor\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\nMatSlideToggle.propDecorators = {\n  _thumbEl: [{\n    type: ViewChild,\n    args: ['thumbContainer']\n  }],\n  _thumbBarEl: [{\n    type: ViewChild,\n    args: ['toggleBar']\n  }],\n  name: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  required: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  toggleChange: [{\n    type: Output\n  }],\n  dragChange: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slide-toggle',\n      exportAs: 'matSlideToggle',\n      host: {\n        'class': 'mat-slide-toggle',\n        '[id]': 'id',\n        '[attr.tabindex]': 'null',\n        '[class.mat-checked]': 'checked',\n        '[class.mat-disabled]': 'disabled',\n        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n      },\n      template: \"<label class=\\\"mat-slide-toggle-label\\\" #label><div #toggleBar class=\\\"mat-slide-toggle-bar\\\" [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\"><input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"><div class=\\\"mat-slide-toggle-thumb\\\"></div><div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div></div></div></div><span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><ng-content></ng-content></span></label>\",\n      providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n      inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle.cdk-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}}@media screen and (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc2.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    toggleChange: [{\n      type: Output\n    }],\n    dragChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    _thumbEl: [{\n      type: ViewChild,\n      args: ['thumbContainer']\n    }],\n    _thumbBarEl: [{\n      type: ViewChild,\n      args: ['toggleBar']\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatSlideToggleModule {}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) {\n  return new (t || MatSlideToggleModule)();\n};\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSlideToggleModule\n});\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [{\n    provide: HAMMER_GESTURE_CONFIG,\n    useClass: GestureConfig\n  }],\n  imports: [MatRippleModule, MatCommonModule, ObserversModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [MatSlideToggle, MatCommonModule],\n      declarations: [MatSlideToggle],\n      providers: [{\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: GestureConfig\n      }]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, {\n    declarations: function () {\n      return [MatSlideToggle];\n    },\n    imports: function () {\n      return [MatRippleModule, MatCommonModule, ObserversModule];\n    },\n    exports: function () {\n      return [MatSlideToggle, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggleBase, _MatSlideToggleMixinBase, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS };","map":{"version":3,"names":["InjectionToken","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ElementRef","EventEmitter","forwardRef","Input","Output","ViewChild","ViewEncapsulation","NgZone","Optional","Inject","NgModule","FocusMonitor","Directionality","coerceBooleanProperty","Platform","NG_VALUE_ACCESSOR","mixinColor","mixinDisabled","mixinDisableRipple","mixinTabIndex","GestureConfig","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","ObserversModule","HAMMER_GESTURE_CONFIG","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","constructor","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_platform","_focusMonitor","_changeDetectorRef","tabIndex","_ngZone","defaults","_animationMode","_dir","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","dragChange","parseInt","required","value","markForCheck","inputId","ngAfterContentInit","monitor","subscribe","focusOrigin","Promise","resolve","then","ngOnDestroy","stopMonitoring","_onChangeEvent","event","stopPropagation","emit","_inputElement","nativeElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","focus","focusVia","toggle","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","Math","max","min","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","classList","add","_onDrag","direction","_dragPercentage","deltaX","dragX","style","transform","_onDragEnd","newCheckedValue","runOutsideAngular","setTimeout","remove","_onLabelTextChange","detectChanges","ɵfac","MatSlideToggle_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatSlideToggle_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","MatSlideToggle_HostBindings","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","inputs","disableRipple","color","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatSlideToggle_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatSlideToggle_Template_input_change_4_listener","$event","MatSlideToggle_Template_input_click_4_listener","ɵɵelementEnd","MatSlideToggle_Template_div_slidestart_6_listener","MatSlideToggle_Template_div_slide_6_listener","MatSlideToggle_Template_div_slideend_6_listener","ɵɵelement","MatSlideToggle_Template_span_cdkObserveContent_11_listener","ɵɵprojection","_r0","ɵɵreference","_r4","ɵɵadvance","textContent","trim","ɵɵproperty","ɵɵpureFunction0","dependencies","MatRipple","CdkObserveContent","styles","encapsulation","changeDetection","ctorParameters","String","decorators","args","undefined","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","providers","None","OnPush","MatSlideToggleModule","MatSlideToggleModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useClass","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/material/__ivy_ngcc__/esm2015/slide-toggle.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, NgZone, Optional, Inject, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, GestureConfig, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/core';\nimport * as ɵngcc5 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false, disableDragValue: false })\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/** *\n * \\@docs-private\n  @type {?} */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} checked\n     */\n    constructor(source, checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _platform\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} tabIndex\n     * @param {?} _ngZone\n     * @param {?} defaults\n     * @param {?=} _animationMode\n     * @param {?=} _dir\n     */\n    constructor(elementRef, /**\n                   * @deprecated The `_platform` parameter to be removed.\n                   * @breaking-change 8.0.0\n                   */\n    _platform, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._dir = _dir;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /**\n         * Whether the thumb is currently being dragged.\n         */\n        this._dragging = false;\n        /**\n         * Name value will be applied to the input element if present.\n         */\n        this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n         */\n        this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed. The event does not fire when the user drags to change\n         * the slide toggle value.\n         */\n        this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         */\n        this.dragChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Whether the slide-toggle is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Whether the slide-toggle element is checked or not.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this.onTouched());\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        if (!this._dragging) {\n            this.toggleChange.emit();\n        }\n        // Releasing the pointer over the `<label>` element while dragging triggers another\n        // click event on the `<label>` element. This means that the checked state of the underlying\n        // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n        // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n        // does not change, and the checked state of the underlying input needs to be changed back.\n        if (this._dragging || this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @return {?}\n     */\n    focus() {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n        this.onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this.onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n     * @param {?} distance\n     * @return {?}\n     */\n    _getDragPercentage(distance) {\n        /** @type {?} */\n        let percentage = (distance / this._thumbBarWidth) * 100;\n        // When the toggle was initially checked, then we have to start the drag at the end.\n        if (this._previousChecked) {\n            percentage += 100;\n        }\n        return Math.max(0, Math.min(percentage, 100));\n    }\n    /**\n     * @return {?}\n     */\n    _onDragStart() {\n        if (!this.disabled && !this._dragging) {\n            /** @type {?} */\n            const thumbEl = this._thumbEl.nativeElement;\n            this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n            thumbEl.classList.add('mat-dragging');\n            this._previousChecked = this.checked;\n            this._dragging = true;\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onDrag(event) {\n        if (this._dragging) {\n            /** @type {?} */\n            const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n            this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n            /** @type {?} */\n            const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n            this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onDragEnd() {\n        if (this._dragging) {\n            /** @type {?} */\n            const newCheckedValue = this._dragPercentage > 50;\n            if (newCheckedValue !== this.checked) {\n                this.dragChange.emit();\n                if (!this.defaults.disableDragValue) {\n                    this.checked = newCheckedValue;\n                    this._emitChangeEvent();\n                }\n            }\n            // The drag should be stopped outside of the current event handler, otherwise the\n            // click event will be fired before it and will revert the drag change.\n            this._ngZone.runOutsideAngular(() => setTimeout(() => {\n                if (this._dragging) {\n                    this._dragging = false;\n                    this._thumbEl.nativeElement.classList.remove('mat-dragging');\n                    // Reset the transform because the component will take care\n                    // of the thumb position after drag.\n                    this._thumbEl.nativeElement.style.transform = '';\n                }\n            }));\n        }\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and it's children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nMatSlideToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 10, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\", dragChange: \"dragChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 14, vars: 16, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\", 3, \"slidestart\", \"slide\", \"slideend\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2, 3)(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵlistener(\"slidestart\", function MatSlideToggle_Template_div_slidestart_6_listener() { return ctx._onDragStart(); })(\"slide\", function MatSlideToggle_Template_div_slide_6_listener($event) { return ctx._onDrag($event); })(\"slideend\", function MatSlideToggle_Template_div_slideend_6_listener() { return ctx._onDragEnd(); });\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd()()();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵprojection(13);\n        ɵngcc0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(15, _c3));\n    } }, dependencies: [ɵngcc4.MatRipple, ɵngcc5.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle.cdk-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}}@media screen and (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    dragChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{ selector: 'mat-slide-toggle', exportAs: 'matSlideToggle', host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                }, template: \"<label class=\\\"mat-slide-toggle-label\\\" #label><div #toggleBar class=\\\"mat-slide-toggle-bar\\\" [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\"><input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"><div class=\\\"mat-slide-toggle-thumb\\\"></div><div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div></div></div></div><span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><ng-content></ng-content></span></label>\", providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle.cdk-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}}@media screen and (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], dragChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); };\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n    ], imports: [MatRippleModule, MatCommonModule, ObserversModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule, ObserversModule],\n                exports: [MatSlideToggle, MatCommonModule],\n                declarations: [MatSlideToggle],\n                providers: [\n                    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [MatRippleModule, MatCommonModule, ObserversModule]; }, exports: function () { return [MatSlideToggle, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggleBase, _MatSlideToggleMixinBase, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}