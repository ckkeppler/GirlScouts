{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE, END, HOME, ENTER } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, InjectionToken, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Self, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, mixinColor, mixinDisabled, mixinDisableRipple, RippleRenderer, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { take, startWith, takeUntil } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n  /**\n   * @param {?} source\n   * @param {?} selected\n   * @param {?=} isUserInput\n   */\n  constructor(source, selected, isUserInput = false) {\n    this.source = source;\n    this.selected = selected;\n    this.isUserInput = isUserInput;\n  }\n}\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n/** @type {?} */\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n  return new (t || MatChipAvatar)();\n};\nMatChipAvatar.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipAvatar,\n  selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-chip-avatar\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-avatar, [matChipAvatar]',\n      host: {\n        'class': 'mat-chip-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n  return new (t || MatChipTrailingIcon)();\n};\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipTrailingIcon,\n  selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n  hostAttrs: [1, \"mat-chip-trailing-icon\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n      host: {\n        'class': 'mat-chip-trailing-icon'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   * @param {?} platform\n   * @param {?} globalOptions\n   */\n  constructor(_elementRef, _ngZone, platform, globalOptions) {\n    super(_elementRef);\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /**\n     * Whether the ripples are globally disabled through the RippleGlobalOptions\n     */\n    this._ripplesGloballyDisabled = false;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down.\n     * \\@docs-private\n     */\n    this.rippleConfig = {};\n    /**\n     * Whether the chip has focus.\n     */\n    this._hasFocus = false;\n    /**\n     * Whether the chip list is selectable\n     */\n    this.chipListSelectable = true;\n    this._selected = false;\n    this._selectable = true;\n    this._removable = true;\n    /**\n     * Emits when the chip is focused.\n     */\n    this._onFocus = new Subject();\n    /**\n     * Emits when the chip is blured.\n     */\n    this._onBlur = new Subject();\n    /**\n     * Emitted when the chip is selected or deselected.\n     */\n    this.selectionChange = new EventEmitter();\n    /**\n     * Emitted when the chip is destroyed.\n     */\n    this.destroyed = new EventEmitter();\n    /**\n     * Emitted when a chip is to be removed.\n     */\n    this.removed = new EventEmitter();\n    this._addHostClassName();\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp\n      };\n    }\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * \\@docs-private\n   * @return {?}\n   */\n  get rippleDisabled() {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n  /**\n   * Whether the chip is selected.\n   * @return {?}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selected(value) {\n    /** @type {?} */\n    const coercedValue = coerceBooleanProperty(value);\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  /**\n   * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n   * @return {?}\n   */\n  get value() {\n    return this._value != undefined ? this._value : this._elementRef.nativeElement.textContent;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    this._value = value;\n  }\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   * @return {?}\n   */\n  get selectable() {\n    return this._selectable && this.chipListSelectable;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   * @return {?}\n   */\n  get removable() {\n    return this._removable;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set removable(value) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  /**\n   * The ARIA selected applied to the chip.\n   * @return {?}\n   */\n  get ariaSelected() {\n    return this.selectable ? this.selected.toString() : null;\n  }\n  /**\n   * @return {?}\n   */\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) || this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        /** @type {?} */this._elementRef.nativeElement.classList.add(attr);\n        return;\n      }\n    }\n    /** @type {?} */this._elementRef.nativeElement.classList.add('mat-standard-chip');\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.destroyed.emit({\n      chip: this\n    });\n    this._chipRipple._removeTriggerEvents();\n  }\n  /**\n   * Selects the chip.\n   * @return {?}\n   */\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n  /**\n   * Deselects the chip.\n   * @return {?}\n   */\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n  /**\n   * Select this chip and emit selected event\n   * @return {?}\n   */\n  selectViaInteraction() {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n  /**\n   * Toggles the current selected state of this chip.\n   * @param {?=} isUserInput\n   * @return {?}\n   */\n  toggleSelected(isUserInput = false) {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n  /**\n   * Allows for programmatic focusing of the chip.\n   * @return {?}\n   */\n  focus() {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({\n        chip: this\n      });\n    }\n    this._hasFocus = true;\n  }\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   * @return {?}\n   */\n  remove() {\n    if (this.removable) {\n      this.removed.emit({\n        chip: this\n      });\n    }\n  }\n  /**\n   * Handles click events on the chip.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleClick(event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n  /**\n   * Handle custom key presses.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleKeydown(event) {\n    if (this.disabled) {\n      return;\n    }\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _blur() {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._hasFocus = false;\n        this._onBlur.next({\n          chip: this\n        });\n      });\n    });\n  }\n  /**\n   * @param {?=} isUserInput\n   * @return {?}\n   */\n  _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\nMatChip.ɵfac = function MatChip_Factory(t) {\n  return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8));\n};\nMatChip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChip,\n  selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n  contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", 1, \"mat-chip\"],\n  hostVars: 12,\n  hostBindings: function MatChip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatChip_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChip_blur_HostBindingHandler() {\n        return ctx._blur();\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    selected: \"selected\",\n    value: \"value\",\n    selectable: \"selectable\",\n    removable: \"removable\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    destroyed: \"destroyed\",\n    removed: \"removed\"\n  },\n  exportAs: [\"matChip\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\nMatChip.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n  }]\n}];\nMatChip.propDecorators = {\n  avatar: [{\n    type: ContentChild,\n    args: [MatChipAvatar]\n  }],\n  trailingIcon: [{\n    type: ContentChild,\n    args: [MatChipTrailingIcon]\n  }],\n  removeIcon: [{\n    type: ContentChild,\n    args: [forwardRef(() => MatChipRemove)]\n  }],\n  selected: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selectable: [{\n    type: Input\n  }],\n  removable: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  removed: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n    type: Directive,\n    args: [{\n      selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n      inputs: ['color', 'disabled', 'disableRipple'],\n      exportAs: 'matChip',\n      host: {\n        'class': 'mat-chip',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        'role': 'option',\n        '[class.mat-chip-selected]': 'selected',\n        '[class.mat-chip-with-avatar]': 'avatar',\n        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mat-chip-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': 'ariaSelected',\n        '(click)': '_handleClick($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    removed: [{\n      type: Output\n    }],\n    selected: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    removable: [{\n      type: Input\n    }],\n    avatar: [{\n      type: ContentChild,\n      args: [MatChipAvatar]\n    }],\n    trailingIcon: [{\n      type: ContentChild,\n      args: [MatChipTrailingIcon]\n    }],\n    removeIcon: [{\n      type: ContentChild,\n      args: [forwardRef(() => MatChipRemove)]\n    }]\n  });\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n  /**\n   * @param {?} _parentChip\n   */\n  constructor(_parentChip) {\n    this._parentChip = _parentChip;\n  }\n  /**\n   * Calls the parent chip's public `remove()` method if applicable.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleClick(event) {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n  return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip));\n};\nMatChipRemove.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipRemove,\n  selectors: [[\"\", \"matChipRemove\", \"\"]],\n  hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n  hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n  }\n});\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [{\n  type: MatChip\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n    type: Directive,\n    args: [{\n      selector: '[matChipRemove]',\n      host: {\n        'class': 'mat-chip-remove mat-chip-trailing-icon',\n        '(click)': '_handleClick($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatChip\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token to be used to override the default options for the chips module.\n  @type {?} */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n  /**\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} ngControl\n   */\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n}\n/** @type {?} */\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n  /**\n   * @param {?} source\n   * @param {?} value\n   */\n  constructor(source, value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _dir\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} ngControl\n   */\n  constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, /** @docs-private */\n  ngControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this.ngControl = ngControl;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n    this.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n    this._lastDestroyedChipIndex = null;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n    this._destroyed = new Subject();\n    /**\n     * Uid of the chip list\n     */\n    this._uid = `mat-chip-list-${nextUniqueId++}`;\n    /**\n     * Tab index for the chip list.\n     */\n    this._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n    this._userTabIndex = null;\n    /**\n     * Function when touched\n     */\n    this._onTouched = () => {};\n    /**\n     * Function when changed\n     */\n    this._onChange = () => {};\n    this._multiple = false;\n    this._compareWith = (o1, o2) => o1 === o2;\n    this._required = false;\n    this._disabled = false;\n    /**\n     * Orientation of the chip list.\n     */\n    this.ariaOrientation = 'horizontal';\n    this._selectable = true;\n    /**\n     * Event emitted when the selected chip list value has been changed by the user.\n     */\n    this.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n    this.valueChange = new EventEmitter();\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n  /**\n   * The array of selected chips inside chip list.\n   * @return {?}\n   */\n  get selected() {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n  /**\n   * The ARIA role applied to the chip list.\n   * @return {?}\n   */\n  get role() {\n    return this.empty ? null : 'listbox';\n  }\n  /**\n   * Whether the user should be allowed to select multiple chips.\n   * @return {?}\n   */\n  get multiple() {\n    return this._multiple;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   * @return {?}\n   */\n  get compareWith() {\n    return this._compareWith;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  set compareWith(fn) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set value(value) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get id() {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /**\n   * Whether any chips or the matChipInput inside of this chip-list has focus.\n   * @return {?}\n   */\n  get focused() {\n    return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get empty() {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get shouldLabelFloat() {\n    return !this.empty || this.focused;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get disabled() {\n    return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   * @return {?}\n   */\n  get selectable() {\n    return this._selectable;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set tabIndex(value) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n  /**\n   * Combined stream of all of the child chips' selection change events.\n   * @return {?}\n   */\n  get chipSelectionChanges() {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n  /**\n   * Combined stream of all of the child chips' focus change events.\n   * @return {?}\n   */\n  get chipFocusChanges() {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n  /**\n   * Combined stream of all of the child chips' blur change events.\n   * @return {?}\n   */\n  get chipBlurChanges() {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n  /**\n   * Combined stream of all of the child chips' remove change events.\n   * @return {?}\n   */\n  get chipRemoveChanges() {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n    this._dropSubscriptions();\n  }\n  /**\n   * Associates an HTML input element with this chip list.\n   * @param {?} inputElement\n   * @return {?}\n   */\n  registerInput(inputElement) {\n    this._chipInput = inputElement;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @param {?} ids\n   * @return {?}\n   */\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @param {?} event\n   * @return {?}\n   */\n  onContainerClick(event) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   * @return {?}\n   */\n  focus() {\n    if (this.disabled) {\n      return;\n    }\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Attempt to focus an input if we have one.\n   * @return {?}\n   */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   * @param {?} event\n   * @return {?}\n   */\n  _keydown(event) {\n    /** @type {?} */\n    const target = /** @type {?} */event.target;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   * @return {?}\n   */\n  _updateTabIndex() {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   * @return {?}\n   */\n  _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      /** @type {?} */\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n    this._lastDestroyedChipIndex = null;\n  }\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param {?} index The index to be checked.\n   * @return {?} True if the index is valid for our list of chips.\n   */\n  _isValidIndex(index) {\n    return index >= 0 && index < this.chips.length;\n  }\n  /**\n   * @param {?} element\n   * @return {?}\n   */\n  _isInputEmpty(element) {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      /** @type {?} */\n      let input = /** @type {?} */element;\n      return !input.value;\n    }\n    return false;\n  }\n  /**\n   * @param {?} value\n   * @param {?=} isUserInput\n   * @return {?}\n   */\n  _setSelectionByValue(value, isUserInput = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      /** @type {?} */\n      const correspondingChip = this._selectValue(value, isUserInput);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n  /**\n   * Finds and selects the chip based on its value.\n   * @param {?} value\n   * @param {?=} isUserInput\n   * @return {?} Chip that has the corresponding value.\n   */\n  _selectValue(value, isUserInput = true) {\n    /** @type {?} */\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value, value);\n    });\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n    return correspondingChip;\n  }\n  /**\n   * @return {?}\n   */\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n  /**\n   * Deselects every chip in the list.\n   * @param {?=} skip Chip that should not be deselected.\n   * @return {?}\n   */\n  _clearSelection(skip) {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   * @return {?}\n   */\n  _sortValues() {\n    if (this._multiple) {\n      this._selectionModel.clear();\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Emits change event to set the model value.\n   * @param {?=} fallbackValue\n   * @return {?}\n   */\n  _propagateChanges(fallbackValue) {\n    /** @type {?} */\n    let valueToEmit = null;\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * When blurred, mark the field as touched when focus moved outside the chip list.\n   * @return {?}\n   */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n  /**\n   * Mark the field as touched\n   * @return {?}\n   */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n  _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n  /**\n   * @return {?}\n   */\n  _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n  /**\n   * Listens to user-generated selection events on each chip.\n   * @return {?}\n   */\n  _listenToChipsSelection() {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected ? this._selectionModel.select(event.source) : this._selectionModel.deselect(event.source);\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n  /**\n   * Listens to user-generated selection events on each chip.\n   * @return {?}\n   */\n  _listenToChipsFocus() {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      /** @type {?} */\n      let chipIndex = this.chips.toArray().indexOf(event.chip);\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * @return {?}\n   */\n  _listenToChipsRemoved() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      /** @type {?} */\n      const chip = event.chip;\n      /** @type {?} */\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n  /**\n   * Checks whether an event comes from inside a chip element.\n   * @param {?} event\n   * @return {?}\n   */\n  _originatesFromChip(event) {\n    /** @type {?} */\n    let currentElement = /** @type {?} */event.target;\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n      currentElement = currentElement.parentElement;\n    }\n    return false;\n  }\n  /**\n   * Checks whether any of the chips is focused.\n   * @return {?}\n   */\n  _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) {\n  return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10));\n};\nMatChipList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatChipList,\n  selectors: [[\"mat-chip-list\"]],\n  contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-chip-list\"],\n  hostVars: 15,\n  hostBindings: function MatChipList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    }\n  },\n  inputs: {\n    ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n    multiple: \"multiple\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    required: \"required\",\n    placeholder: \"placeholder\",\n    disabled: \"disabled\",\n    selectable: \"selectable\",\n    tabIndex: \"tabIndex\",\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matChipList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatChipList\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-chip-list-wrapper\"]],\n  template: function MatChipList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;background-color:#000;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}.mat-standard-chip:active{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nMatChipList.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}];\nMatChipList.propDecorators = {\n  errorStateMatcher: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  ariaOrientation: [{\n    type: Input,\n    args: ['aria-orientation']\n  }],\n  selectable: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  chips: [{\n    type: ContentChildren,\n    args: [MatChip]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-chip-list',\n      template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n      exportAs: 'matChipList',\n      host: {\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.role]': 'role',\n        '[class.mat-chip-list-disabled]': 'disabled',\n        '[class.mat-chip-list-invalid]': 'errorState',\n        '[class.mat-chip-list-required]': 'required',\n        '[attr.aria-orientation]': 'ariaOrientation',\n        'class': 'mat-chip-list',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n        '(keydown)': '_keydown($event)',\n        '[id]': '_uid'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatChipList\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;background-color:#000;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}.mat-standard-chip:active{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.ErrorStateMatcher\n    }, {\n      type: ɵngcc3.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    ariaOrientation: [{\n      type: Input,\n      args: ['aria-orientation']\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    multiple: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    chips: [{\n      type: ContentChildren,\n      args: [MatChip]\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _defaultOptions\n   */\n  constructor(_elementRef, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /**\n     * Whether the control is focused.\n     */\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /**\n     * Emitted when a chip is to be added.\n     */\n    this.chipEnd = new EventEmitter();\n    /**\n     * The input's placeholder text.\n     */\n    this.placeholder = '';\n    /**\n     * Unique id for the input.\n     */\n    this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n    this._disabled = false;\n    this._inputElement = /** @type {?} */this._elementRef.nativeElement;\n  }\n  /**\n   * Register input for chip list\n   * @param {?} value\n   * @return {?}\n   */\n  set chipList(value) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   * @return {?}\n   */\n  get addOnBlur() {\n    return this._addOnBlur;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set addOnBlur(value) {\n    this._addOnBlur = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the input is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled || this._chipList && this._chipList.disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the input is empty.\n   * @return {?}\n   */\n  get empty() {\n    return !this._inputElement.value;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n  /**\n   * Utility method to make host definition/tests more clear.\n   * @param {?=} event\n   * @return {?}\n   */\n  _keydown(event) {\n    this._emitChipEnd(event);\n  }\n  /**\n   * Checks to see if the blur should emit the (chipEnd) event.\n   * @return {?}\n   */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n  /**\n   * Checks to see if the (chipEnd) event needs to be emitted.\n   * @param {?=} event\n   * @return {?}\n   */\n  _emitChipEnd(event) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({\n        input: this._inputElement,\n        value: this._inputElement.value\n      });\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n  /**\n   * Focuses the input.\n   * @return {?}\n   */\n  focus() {\n    this._inputElement.focus();\n  }\n  /**\n   * Checks whether a keycode is one of the configured separators.\n   * @param {?} keyCode\n   * @return {?}\n   */\n  _isSeparatorKey(keyCode) {\n    /** @type {?} */\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) {\n  return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n};\nMatChipInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipInput,\n  selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n  hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n  hostVars: 4,\n  hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n        return ctx._focus();\n      })(\"input\", function MatChipInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null);\n    }\n  },\n  inputs: {\n    separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n    placeholder: \"placeholder\",\n    id: \"id\",\n    chipList: [\"matChipInputFor\", \"chipList\"],\n    addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n    disabled: \"disabled\"\n  },\n  outputs: {\n    chipEnd: \"matChipInputTokenEnd\"\n  },\n  exportAs: [\"matChipInput\", \"matChipInputFor\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_CHIPS_DEFAULT_OPTIONS]\n  }]\n}];\nMatChipInput.propDecorators = {\n  chipList: [{\n    type: Input,\n    args: ['matChipInputFor']\n  }],\n  addOnBlur: [{\n    type: Input,\n    args: ['matChipInputAddOnBlur']\n  }],\n  separatorKeyCodes: [{\n    type: Input,\n    args: ['matChipInputSeparatorKeyCodes']\n  }],\n  chipEnd: [{\n    type: Output,\n    args: ['matChipInputTokenEnd']\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matChipInputFor]',\n      exportAs: 'matChipInput, matChipInputFor',\n      host: {\n        'class': 'mat-chip-input mat-input-element',\n        '(keydown)': '_keydown($event)',\n        '(blur)': '_blur()',\n        '(focus)': '_focus()',\n        '(input)': '_onInput()',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_CHIPS_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    separatorKeyCodes: [{\n      type: Input,\n      args: ['matChipInputSeparatorKeyCodes']\n    }],\n    chipEnd: [{\n      type: Output,\n      args: ['matChipInputTokenEnd']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    chipList: [{\n      type: Input,\n      args: ['matChipInputFor']\n    }],\n    addOnBlur: [{\n      type: Input,\n      args: ['matChipInputAddOnBlur']\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nconst ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) {\n  return new (t || MatChipsModule)();\n};\nMatChipsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatChipsModule\n});\nMatChipsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher, {\n    provide: MAT_CHIPS_DEFAULT_OPTIONS,\n    useValue: /** @type {?} */ɵ0\n  }]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n    type: NgModule,\n    args: [{\n      exports: CHIP_DECLARATIONS,\n      declarations: CHIP_DECLARATIONS,\n      providers: [ErrorStateMatcher, {\n        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n        useValue: /** @type {?} */ɵ0\n      }]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, {\n    declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon],\n    exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatChipsModule, MatChipListBase, _MatChipListMixinBase, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipBase, _MatChipMixinBase, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS };","map":{"version":3,"names":["coerceBooleanProperty","BACKSPACE","DELETE","SPACE","END","HOME","ENTER","Platform","ContentChild","Directive","ElementRef","EventEmitter","forwardRef","Inject","Input","NgZone","Optional","Output","InjectionToken","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","Self","ViewEncapsulation","NgModule","MAT_RIPPLE_GLOBAL_OPTIONS","mixinColor","mixinDisabled","mixinDisableRipple","RippleRenderer","ErrorStateMatcher","mixinErrorState","Subject","merge","take","startWith","takeUntil","FocusKeyManager","Directionality","SelectionModel","FormGroupDirective","NgControl","NgForm","MatFormFieldControl","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","_c0","MatChipSelectionChange","constructor","source","selected","isUserInput","MatChipBase","_elementRef","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","ɵfac","MatChipAvatar_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","ngDevMode","ɵsetClassMetadata","args","selector","host","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","_ngZone","platform","globalOptions","_ripplesGloballyDisabled","rippleConfig","_hasFocus","chipListSelectable","_selected","_selectable","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRipple","setupTriggerEvents","nativeElement","disabled","animation","terminateOnPointerUp","rippleDisabled","disableRipple","value","coercedValue","_dispatchSelectionChange","_value","undefined","textContent","selectable","removable","ariaSelected","toString","attr","hasAttribute","tagName","toLowerCase","classList","add","ngOnDestroy","emit","chip","_removeTriggerEvents","select","deselect","selectViaInteraction","toggleSelected","focus","next","remove","_handleClick","event","preventDefault","stopPropagation","_handleKeydown","keyCode","_blur","onStable","asObservable","pipe","subscribe","run","MatChip_Factory","ɵɵdirectiveInject","contentQueries","MatChip_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatChipRemove","_t","ɵɵqueryRefresh","ɵɵloadQuery","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatChip_HostBindings","ɵɵlistener","MatChip_click_HostBindingHandler","$event","MatChip_keydown_HostBindingHandler","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","ɵɵattribute","ɵɵclassProp","inputs","color","outputs","exportAs","features","ɵɵInheritDefinitionFeature","ctorParameters","decorators","propDecorators","_parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","nextUniqueId","MatChipListChange","MatChipList","_changeDetectorRef","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","_disabled","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","role","empty","compareWith","fn","_initializeSelection","writeValue","id","_chipInput","required","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","shouldLabelFloat","forEach","tabIndex","chipSelectionChanges","map","chipFocusChanges","chipBlurChanges","chipRemoveChanges","ngAfterContentInit","_keyManager","withWrap","withVerticalOrientation","withHorizontalOrientation","tabOut","setTimeout","changes","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","ngDoCheck","updateErrorState","complete","_dropSubscriptions","registerInput","inputElement","setDescribedByIds","ids","_ariaDescribedby","join","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","_originatesFromChip","setFirstItemActive","_focusInput","_keydown","target","_isInputEmpty","setLastItemActive","contains","onKeydown","newChipIndex","Math","min","setActiveItem","_isValidIndex","index","element","nodeName","input","_clearSelection","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","Promise","resolve","then","skip","clear","_propagateChanges","fallbackValue","valueToEmit","markForCheck","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","isSelected","chipIndex","toArray","indexOf","updateActiveItemIndex","currentElement","parentElement","some","MatChipList_Factory","ɵcmp","ɵɵdefineComponent","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","ɵɵhostProperty","errorState","errorStateMatcher","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","consts","template","MatChipList_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","providers","None","OnPush","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","chipList","_chipList","addOnBlur","ngOnChanges","_emitChipEnd","_focus","_isSeparatorKey","_onInput","separators","has","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","MatChipInput_input_HostBindingHandler","invalid","ɵɵNgOnChangesFeature","CHIP_DECLARATIONS","ɵ0","MatChipsModule","MatChipsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useValue","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/material/__ivy_ngcc__/esm2015/chips.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE, END, HOME, ENTER } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, InjectionToken, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Self, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, mixinColor, mixinDisabled, mixinDisableRipple, RippleRenderer, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { take, startWith, takeUntil } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    /**\n     * @param {?} source\n     * @param {?} selected\n     * @param {?=} isUserInput\n     */\n    constructor(source, selected, isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n/** @type {?} */\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' }\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} globalOptions\n     */\n    constructor(_elementRef, _ngZone, platform, globalOptions) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /**\n         * Whether the ripples are globally disabled through the RippleGlobalOptions\n         */\n        this._ripplesGloballyDisabled = false;\n        /**\n         * Ripple configuration for ripples that are launched on pointer down.\n         * \\@docs-private\n         */\n        this.rippleConfig = {};\n        /**\n         * Whether the chip has focus.\n         */\n        this._hasFocus = false;\n        /**\n         * Whether the chip list is selectable\n         */\n        this.chipListSelectable = true;\n        this._selected = false;\n        this._selectable = true;\n        this._removable = true;\n        /**\n         * Emits when the chip is focused.\n         */\n        this._onFocus = new Subject();\n        /**\n         * Emits when the chip is blured.\n         */\n        this._onBlur = new Subject();\n        /**\n         * Emitted when the chip is selected or deselected.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emitted when a chip is to be removed.\n         */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n        if (globalOptions) {\n            // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n            this._ripplesGloballyDisabled = !!globalOptions.disabled;\n            this.rippleConfig = {\n                animation: globalOptions.animation,\n                terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n            };\n        }\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        /** @type {?} */\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n    get value() {\n        return this._value != undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to it's selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if it's parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n    get removable() { return this._removable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n    get ariaSelected() {\n        return this.selectable ? this.selected.toString() : null;\n    }\n    /**\n     * @return {?}\n     */\n    _addHostClassName() {\n        // Add class for the different chips\n        for (const attr of CHIP_ATTRIBUTE_NAMES) {\n            if (this._elementRef.nativeElement.hasAttribute(attr) ||\n                this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n                (/** @type {?} */ (this._elementRef.nativeElement)).classList.add(attr);\n                return;\n            }\n        }\n        (/** @type {?} */ (this._elementRef.nativeElement)).classList.add('mat-standard-chip');\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n        }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /**\n     * Handles click events on the chip.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    /**\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8)); };\nMatChip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\"], hostVars: 12, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled);\n    } }, inputs: { color: \"color\", disabled: \"disabled\", disableRipple: \"disableRipple\", selected: \"selected\", value: \"value\", selectable: \"selectable\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MatChipAvatar,] }],\n    trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon,] }],\n    removeIcon: [{ type: ContentChild, args: [forwardRef(() => MatChipRemove),] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disabled', 'disableRipple'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip',\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MatChipAvatar]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MatChipTrailingIcon]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [forwardRef(() => MatChipRemove)]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    /**\n     * @param {?} _parentChip\n     */\n    constructor(_parentChip) {\n        this._parentChip = _parentChip;\n    }\n    /**\n     * Calls the parent chip's public `remove()` method if applicable.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this._parentChip.removable) {\n            this._parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip)); };\nMatChipRemove.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } } });\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                }\n            }]\n    }], function () { return [{ type: MatChip }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token to be used to override the default options for the chips module.\n  @type {?} */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, /** @docs-private */\n    ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Uid of the chip list\n         */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /**\n         * Tab index for the chip list.\n         */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /**\n         * Function when touched\n         */\n        this._onTouched = () => { };\n        /**\n         * Function when changed\n         */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /**\n         * Orientation of the chip list.\n         */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /**\n         * Event emitted when the selected chip list value has been changed by the user.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * The array of selected chips inside chip list.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n    get role() { return this.empty ? null : 'listbox'; }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.disabled = this._disabled);\n        }\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n    get selectable() { return this._selectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        // Prevents the chip list from capturing focus and redirecting\n        // it back to the first chip when the user tabs out.\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._tabIndex = -1;\n            setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @return {?}\n     */\n    focus() {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @return {?}\n     */\n    _focusInput() {\n        if (this._chipInput) {\n            this._chipInput.focus();\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        /** @type {?} */\n        const target = /** @type {?} */ (event.target);\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            if (event.keyCode === HOME) {\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (event.keyCode === END) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @return {?}\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     * @return {?}\n     */\n    _updateFocusForDestroyedChips() {\n        if (this._lastDestroyedChipIndex != null && this.chips.length) {\n            /** @type {?} */\n            const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n            this._keyManager.setActiveItem(newChipIndex);\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            /** @type {?} */\n            let input = /** @type {?} */ (element);\n            return !input.value;\n        }\n        return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            /** @type {?} */\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        /** @type {?} */\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    /**\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @return {?}\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    /**\n     * @return {?}\n     */\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @return {?}\n     */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @return {?}\n     */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            /** @type {?} */\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItemIndex(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            /** @type {?} */\n            const chip = event.chip;\n            /** @type {?} */\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /**\n     * Checks whether an event comes from inside a chip element.\n     * @param {?} event\n     * @return {?}\n     */\n    _originatesFromChip(event) {\n        /** @type {?} */\n        let currentElement = /** @type {?} */ (event.target);\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /**\n     * Checks whether any of the chips is focused.\n     * @return {?}\n     */\n    _hasFocusedChip() {\n        return this.chips.some(chip => chip._hasFocus);\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;background-color:#000;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}.mat-standard-chip:active{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{ selector: 'mat-chip-list', template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`, exportAs: 'matChipList', host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                }, providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;background-color:#000;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}.mat-standard-chip:active{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * Whether the control is focused.\n         */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /**\n         * Emitted when a chip is to be added.\n         */\n        this.chipEnd = new EventEmitter();\n        /**\n         * The input's placeholder text.\n         */\n        this.placeholder = '';\n        /**\n         * Unique id for the input.\n         */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = /** @type {?} */ (this._elementRef.nativeElement);\n    }\n    /**\n     * Register input for chip list\n     * @param {?} value\n     * @return {?}\n     */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n    get empty() { return !this._inputElement.value; }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n    _keydown(event) {\n        this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event.keyCode)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @return {?}\n     */\n    focus() {\n        this._inputElement.focus();\n    }\n    /**\n     * Checks whether a keycode is one of the configured separators.\n     * @param {?} keyCode\n     * @return {?}\n     */\n    _isSeparatorKey(keyCode) {\n        /** @type {?} */\n        const separators = this.separatorKeyCodes;\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 4, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); };\nMatChipsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: /** @type {?} */ ((ɵ0))\n        }\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: /** @type {?} */ ((ɵ0))\n                    }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon], exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatChipsModule, MatChipListBase, _MatChipListMixinBase, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipBase, _MatChipMixinBase, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}