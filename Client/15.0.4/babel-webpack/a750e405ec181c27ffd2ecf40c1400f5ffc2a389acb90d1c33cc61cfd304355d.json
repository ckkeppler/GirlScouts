{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nimport * as Éµngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' + 'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nclass Portal {\n  /**\n   * Attach this portal to a host.\n   * @param {?} host\n   * @return {?}\n   */\n  attach(host) {\n    if (host == null) {\n      throwNullPortalOutletError();\n    }\n    if (host.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n    this._attachedHost = host;\n    return (/** @type {?} */host.attach(this)\n    );\n  }\n  /**\n   * Detach this portal from its host\n   * @return {?}\n   */\n  detach() {\n    /** @type {?} */\n    let host = this._attachedHost;\n    if (host == null) {\n      throwNoPortalAttachedError();\n    } else {\n      this._attachedHost = null;\n      host.detach();\n    }\n  }\n  /**\n   * Whether this portal is attached to a host.\n   * @return {?}\n   */\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\n   * @param {?} host\n   * @return {?}\n   */\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal extends Portal {\n  /**\n   * @param {?} component\n   * @param {?=} viewContainerRef\n   * @param {?=} injector\n   * @param {?=} componentFactoryResolver\n   */\n  constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.componentFactoryResolver = componentFactoryResolver;\n  }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nclass TemplatePortal extends Portal {\n  /**\n   * @param {?} template\n   * @param {?} viewContainerRef\n   * @param {?=} context\n   */\n  constructor(template, viewContainerRef, context) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n    this.context = context;\n  }\n  /**\n   * @return {?}\n   */\n  get origin() {\n    return this.templateRef.elementRef;\n  }\n  /**\n   * Attach the the portal to the provided `PortalOutlet`.\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\n   * instance.\n   * @param {?} host\n   * @param {?=} context\n   * @return {?}\n   */\n  attach(host, context = this.context) {\n    this.context = context;\n    return super.attach(host);\n  }\n  /**\n   * @return {?}\n   */\n  detach() {\n    this.context = undefined;\n    return super.detach();\n  }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nclass BasePortalOutlet {\n  constructor() {\n    /**\n     * Whether this host has already been permanently disposed.\n     */\n    this._isDisposed = false;\n  }\n  /**\n   * Whether this host has an attached portal.\n   * @return {?}\n   */\n  hasAttached() {\n    return !!this._attachedPortal;\n  }\n  /**\n   * Attaches a portal.\n   * @param {?} portal\n   * @return {?}\n   */\n  attach(portal) {\n    if (!portal) {\n      throwNullPortalError();\n    }\n    if (this.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n    if (this._isDisposed) {\n      throwPortalOutletAlreadyDisposedError();\n    }\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n    throwUnknownPortalTypeError();\n  }\n  /**\n   * Detaches a previously attached portal.\n   * @return {?}\n   */\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n    this._invokeDisposeFn();\n  }\n  /**\n   * Permanently dispose of this portal host.\n   * @return {?}\n   */\n  dispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n  /**\n   * \\@docs-private\n   * @param {?} fn\n   * @return {?}\n   */\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n  /**\n   * @return {?}\n   */\n  _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n  /**\n   * @param {?} outletElement\n   * @param {?} _componentFactoryResolver\n   * @param {?} _appRef\n   * @param {?} _defaultInjector\n   */\n  constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n    super();\n    this.outletElement = outletElement;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._defaultInjector = _defaultInjector;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @template T\n   * @param {?} portal Portal to be attached\n   * @return {?} Reference to the created component.\n   */\n  attachComponentPortal(portal) {\n    /** @type {?} */\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n    /** @type {?} */\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    /** @type {?} */\n    let componentRef;\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n    return componentRef;\n  }\n  /**\n   * Attaches a template portal to the DOM as an embedded view.\n   * @template C\n   * @param {?} portal Portal to be attached.\n   * @return {?} Reference to the created embedded view.\n   */\n  attachTemplatePortal(portal) {\n    /** @type {?} */\n    let viewContainer = portal.viewContainerRef;\n    /** @type {?} */\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n    viewRef.detectChanges();\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n    this.setDisposeFn(() => {\n      /** @type {?} */\n      let index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    });\n    // TODO(jelbourn): Return locals from view.\n    return viewRef;\n  }\n  /**\n   * Clears out a portal from the DOM.\n   * @return {?}\n   */\n  dispose() {\n    super.dispose();\n    if (this.outletElement.parentNode != null) {\n      this.outletElement.parentNode.removeChild(this.outletElement);\n    }\n  }\n  /**\n   * Gets the root HTMLElement for an instantiated component.\n   * @param {?} componentRef\n   * @return {?}\n   */\n  _getComponentRootNode(componentRef) {\n    return (/** @type {?} */ /** @type {?} */componentRef.hostView.rootNodes[0]\n    );\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n  /**\n   * @param {?} templateRef\n   * @param {?} viewContainerRef\n   */\n  constructor(templateRef, viewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\nCdkPortal.Éµfac = function CdkPortal_Factory(t) {\n  return new (t || CdkPortal)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.TemplateRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef));\n};\nCdkPortal.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n  type: CdkPortal,\n  selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"cdkPortal\", \"\"], [\"\", \"portal\", \"\"]],\n  exportAs: [\"cdkPortal\"],\n  features: [Éµngcc0.ÉµÉµInheritDefinitionFeature]\n});\n/** @nocollapse */\nCdkPortal.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: ViewContainerRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CdkPortal, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-portal], [cdkPortal], [portal]',\n      exportAs: 'cdkPortal'\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.TemplateRef\n    }, {\n      type: Éµngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n  /**\n   * @param {?} _componentFactoryResolver\n   * @param {?} _viewContainerRef\n   */\n  constructor(_componentFactoryResolver, _viewContainerRef) {\n    super();\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._viewContainerRef = _viewContainerRef;\n    /**\n     * Whether the portal component is initialized.\n     */\n    this._isInitialized = false;\n    this.attached = new EventEmitter();\n  }\n  /**\n   * Portal associated with the Portal outlet.\n   * @return {?}\n   */\n  get portal() {\n    return this._attachedPortal;\n  }\n  /**\n   * @param {?} portal\n   * @return {?}\n   */\n  set portal(portal) {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n    if (this.hasAttached()) {\n      super.detach();\n    }\n    if (portal) {\n      super.attach(portal);\n    }\n    this._attachedPortal = portal;\n  }\n  /**\n   * Component or view reference that is attached to the portal.\n   * @return {?}\n   */\n  get attachedRef() {\n    return this._attachedRef;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedPortal = null;\n    this._attachedRef = null;\n  }\n  /**\n   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n   *\n   * @template T\n   * @param {?} portal Portal to be attached to the portal outlet.\n   * @return {?} Reference to the created component.\n   */\n  attachComponentPortal(portal) {\n    portal.setAttachedHost(this);\n    /** @type {?} */\n    const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n    /** @type {?} */\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    /** @type {?} */\n    const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n    return ref;\n  }\n  /**\n   * Attach the given TemplatePortal to this PortlHost as an embedded View.\n   * @template C\n   * @param {?} portal Portal to be attached.\n   * @return {?} Reference to the created embedded view.\n   */\n  attachTemplatePortal(portal) {\n    portal.setAttachedHost(this);\n    /** @type {?} */\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n    return viewRef;\n  }\n}\nCdkPortalOutlet.Éµfac = function CdkPortalOutlet_Factory(t) {\n  return new (t || CdkPortalOutlet)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ComponentFactoryResolver), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef));\n};\nCdkPortalOutlet.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n  type: CdkPortalOutlet,\n  selectors: [[\"\", \"cdkPortalOutlet\", \"\"], [\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]],\n  inputs: {\n    portal: [\"cdkPortalOutlet\", \"portal\"]\n  },\n  outputs: {\n    attached: \"attached\"\n  },\n  exportAs: [\"cdkPortalOutlet\", \"cdkPortalHost\"],\n  features: [Éµngcc0.ÉµÉµInheritDefinitionFeature]\n});\n/** @nocollapse */\nCdkPortalOutlet.ctorParameters = () => [{\n  type: ComponentFactoryResolver\n}, {\n  type: ViewContainerRef\n}];\nCdkPortalOutlet.propDecorators = {\n  attached: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CdkPortalOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n      exportAs: 'cdkPortalOutlet, cdkPortalHost',\n      inputs: ['portal: cdkPortalOutlet']\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.ComponentFactoryResolver\n    }, {\n      type: Éµngcc0.ViewContainerRef\n    }];\n  }, {\n    attached: [{\n      type: Output\n    }]\n  });\n})();\nclass PortalModule {}\nPortalModule.Éµfac = function PortalModule_Factory(t) {\n  return new (t || PortalModule)();\n};\nPortalModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n  type: PortalModule\n});\nPortalModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(PortalModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkPortal, CdkPortalOutlet],\n      declarations: [CdkPortal, CdkPortalOutlet]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(PortalModule, {\n    declarations: [CdkPortal, CdkPortalOutlet],\n    exports: [CdkPortal, CdkPortalOutlet]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nclass PortalInjector {\n  /**\n   * @param {?} _parentInjector\n   * @param {?} _customTokens\n   */\n  constructor(_parentInjector, _customTokens) {\n    this._parentInjector = _parentInjector;\n    this._customTokens = _customTokens;\n  }\n  /**\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @return {?}\n   */\n  get(token, notFoundValue) {\n    /** @type {?} */\n    const value = this._customTokens.get(token);\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n    return this._parentInjector.get(token, notFoundValue);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };","map":{"version":3,"names":["ComponentFactoryResolver","Directive","EventEmitter","NgModule","Output","TemplateRef","ViewContainerRef","Éµngcc0","throwNullPortalError","Error","throwPortalAlreadyAttachedError","throwPortalOutletAlreadyDisposedError","throwUnknownPortalTypeError","throwNullPortalOutletError","throwNoPortalAttachedError","Portal","attach","host","hasAttached","_attachedHost","detach","isAttached","setAttachedHost","ComponentPortal","constructor","component","viewContainerRef","injector","componentFactoryResolver","TemplatePortal","template","context","templateRef","origin","elementRef","undefined","BasePortalOutlet","_isDisposed","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","resolver","componentFactory","resolveComponentFactory","componentRef","createComponent","length","destroy","create","attachView","hostView","detachView","appendChild","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","parentNode","removeChild","CdkPortal","Éµfac","CdkPortal_Factory","t","ÉµÉµdirectiveInject","Éµdir","ÉµÉµdefineDirective","type","selectors","exportAs","features","ÉµÉµInheritDefinitionFeature","ctorParameters","ngDevMode","ÉµsetClassMetadata","args","selector","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","attachedRef","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","CdkPortalOutlet_Factory","inputs","outputs","propDecorators","PortalModule","PortalModule_Factory","Éµmod","ÉµÉµdefineNgModule","Éµinj","ÉµÉµdefineInjector","exports","declarations","ngJitMode","ÉµÉµsetNgModuleScope","PortalInjector","_parentInjector","_customTokens","get","token","notFoundValue","value","DomPortalHost","PortalHostDirective","TemplatePortalDirective","BasePortalHost"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/portal.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nimport * as Éµngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nclass Portal {\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return /** @type {?} */ (host.attach(this));\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    detach() {\n        /** @type {?} */\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal extends Portal {\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     * @param {?=} componentFactoryResolver\n     */\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nclass TemplatePortal extends Portal {\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     * @param {?=} context\n     */\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    /**\n     * @return {?}\n     */\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nclass BasePortalOutlet {\n    constructor() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    /**\n     * @return {?}\n     */\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} outletElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     */\n    constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        /** @type {?} */\n        let viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        this.setDisposeFn((() => {\n            /** @type {?} */\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _getComponentRootNode(componentRef) {\n        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.Éµfac = function CdkPortal_Factory(t) { return new (t || CdkPortal)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.TemplateRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef)); };\nCdkPortal.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"cdkPortal\", \"\"], [\"\", \"portal\", \"\"]], exportAs: [\"cdkPortal\"], features: [Éµngcc0.ÉµÉµInheritDefinitionFeature] });\n/** @nocollapse */\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CdkPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-portal], [cdkPortal], [portal]',\n                exportAs: 'cdkPortal'\n            }]\n    }], function () { return [{ type: Éµngcc0.TemplateRef }, { type: Éµngcc0.ViewContainerRef }]; }, null); })();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     */\n    constructor(_componentFactoryResolver, _viewContainerRef) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        this._isInitialized = false;\n        this.attached = new EventEmitter();\n    }\n    /**\n     * Portal associated with the Portal outlet.\n     * @return {?}\n     */\n    get portal() {\n        return this._attachedPortal;\n    }\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /**\n     * Component or view reference that is attached to the portal.\n     * @return {?}\n     */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n}\nCdkPortalOutlet.Éµfac = function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ComponentFactoryResolver), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef)); };\nCdkPortalOutlet.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"], [\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\", \"cdkPortalHost\"], features: [Éµngcc0.ÉµÉµInheritDefinitionFeature] });\n/** @nocollapse */\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CdkPortalOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalOutlet, cdkPortalHost',\n                inputs: ['portal: cdkPortalOutlet']\n            }]\n    }], function () { return [{ type: Éµngcc0.ComponentFactoryResolver }, { type: Éµngcc0.ViewContainerRef }]; }, { attached: [{\n            type: Output\n        }] }); })();\nclass PortalModule {\n}\nPortalModule.Éµfac = function PortalModule_Factory(t) { return new (t || PortalModule)(); };\nPortalModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: PortalModule });\nPortalModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(PortalModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkPortal, CdkPortalOutlet],\n                declarations: [CdkPortal, CdkPortalOutlet]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(PortalModule, { declarations: [CdkPortal, CdkPortalOutlet], exports: [CdkPortal, CdkPortalOutlet] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nclass PortalInjector {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _customTokens\n     */\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        /** @type {?} */\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}