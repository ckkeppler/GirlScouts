{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/** *\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n  @type {?} */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatButtonToggleGroupMultiple {}\n/** @type {?} */\nlet _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nclass MatButtonToggleChange {\n  /**\n   * @param {?} source\n   * @param {?} value\n   */\n  constructor(source, value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nclass MatButtonToggleGroup {\n  /**\n   * @param {?} _changeDetector\n   * @param {?=} defaultOptions\n   */\n  constructor(_changeDetector, defaultOptions) {\n    this._changeDetector = _changeDetector;\n    this._vertical = false;\n    this._multiple = false;\n    this._disabled = false;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    this._controlValueAccessorChangeFn = () => {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     */\n    this._onTouched = () => {};\n    this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * \\@docs-private\n     */\n    this.valueChange = new EventEmitter();\n    /**\n     * Event emitted when the group's value changes.\n     */\n    this.change = new EventEmitter();\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  /**\n   * `name` attribute for the underlying `input` element.\n   * @return {?}\n   */\n  get name() {\n    return this._name;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set name(value) {\n    this._name = value;\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  /**\n   * Whether the toggle group is vertical.\n   * @return {?}\n   */\n  get vertical() {\n    return this._vertical;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  /**\n   * Value of the toggle group.\n   * @return {?}\n   */\n  get value() {\n    /** @type {?} */\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n    return selected[0] ? selected[0].value : undefined;\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n  set value(newValue) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n  /**\n   * Selected button toggles in the group.\n   * @return {?}\n   */\n  get selected() {\n    /** @type {?} */\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : selected[0] || null;\n  }\n  /**\n   * Whether multiple button toggles can be selected.\n   * @return {?}\n   */\n  get multiple() {\n    return this._multiple;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether multiple button toggle group is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param {?} value Value to be set to the model.\n   * @return {?}\n   */\n  writeValue(value) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /**\n   * Dispatch change event with current selection and group value.\n   * @return {?}\n   */\n  _emitChangeEvent() {\n    /** @type {?} */\n    const selected = this.selected;\n    /** @type {?} */\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    /** @type {?} */\n    const event = new MatButtonToggleChange( /** @type {?} */source, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param {?} toggle Toggle to be synced.\n   * @param {?} select Whether the toggle should be selected.\n   * @param {?=} isUserInput Whether the change was a result of a user interaction.\n   * @return {?}\n   */\n  _syncButtonToggle(toggle, select, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      /** @type {?} */this.selected.checked = false;\n    }\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n  /**\n   * Checks whether a button toggle is selected.\n   * @param {?} toggle\n   * @return {?}\n   */\n  _isSelected(toggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n  /**\n   * Determines whether a button toggle should be checked on init.\n   * @param {?} toggle\n   * @return {?}\n   */\n  _isPrechecked(toggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n    return toggle.value === this._rawValue;\n  }\n  /**\n   * Updates the selection state of the toggles in the group based on a value.\n   * @param {?} value\n   * @return {?}\n   */\n  _setSelectionByValue(value) {\n    this._rawValue = value;\n    if (!this._buttonToggles) {\n      return;\n    }\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n      this._clearSelection();\n      value.forEach(currentValue => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n  /**\n   * Clears the selected toggles.\n   * @return {?}\n   */\n  _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n  /**\n   * Selects a value if there's a toggle that corresponds to it.\n   * @param {?} value\n   * @return {?}\n   */\n  _selectValue(value) {\n    /** @type {?} */\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) {\n  return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n};\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatButtonToggleGroup,\n  selectors: [[\"mat-button-toggle-group\"]],\n  contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"],\n  hostVars: 5,\n  hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n      ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    }\n  },\n  inputs: {\n    appearance: \"appearance\",\n    name: \"name\",\n    vertical: \"vertical\",\n    value: \"value\",\n    multiple: \"multiple\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    valueChange: \"valueChange\",\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggleGroup\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n    provide: MatButtonToggleGroupMultiple,\n    useExisting: MatButtonToggleGroup\n  }])]\n});\n/** @nocollapse */\nMatButtonToggleGroup.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}];\nMatButtonToggleGroup.propDecorators = {\n  _buttonToggles: [{\n    type: ContentChildren,\n    args: [forwardRef(() => MatButtonToggle)]\n  }],\n  appearance: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  vertical: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-button-toggle-group',\n      providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n        provide: MatButtonToggleGroupMultiple,\n        useExisting: MatButtonToggleGroup\n      }],\n      host: {\n        'role': 'group',\n        'class': 'mat-button-toggle-group',\n        '[attr.aria-disabled]': 'disabled',\n        '[class.mat-button-toggle-vertical]': 'vertical',\n        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n      },\n      exportAs: 'matButtonToggleGroup'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    valueChange: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    appearance: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    _buttonToggles: [{\n      type: ContentChildren,\n      args: [forwardRef(() => MatButtonToggle)]\n    }]\n  });\n})();\n/**\n * \\@docs-private\n */\nclass MatButtonToggleBase {}\n/** @type {?} */\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n  /**\n   * @param {?} toggleGroup\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} _focusMonitor\n   * @param {?} defaultTabIndex\n   * @param {?=} defaultOptions\n   */\n  constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor,\n  // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n  defaultTabIndex, defaultOptions) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this._isSingleSelector = false;\n    this._checked = false;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    this.ariaLabelledby = null;\n    this._disabled = false;\n    /**\n     * Event emitted when the group value changes.\n     */\n    this.change = new EventEmitter();\n    /** @type {?} */\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  /**\n   * Unique ID for the underlying `button` element.\n   * @return {?}\n   */\n  get buttonId() {\n    return `${this.id}-button`;\n  }\n  /**\n   * The appearance style of the button.\n   * @return {?}\n   */\n  get appearance() {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set appearance(value) {\n    this._appearance = value;\n  }\n  /**\n   * Whether the button is checked.\n   * @return {?}\n   */\n  get checked() {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set checked(value) {\n    /** @type {?} */\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Whether the button is disabled.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\n   * Focuses the button.\n   * @return {?}\n   */\n  focus() {\n    this._buttonElement.nativeElement.focus();\n  }\n  /**\n   * Checks the button toggle due to an interaction with the underlying native button.\n   * @return {?}\n   */\n  _onButtonClick() {\n    /** @type {?} */\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   * @return {?}\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) {\n  return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MatButtonToggleGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n};\nMatButtonToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatButtonToggle,\n  selectors: [[\"mat-button-toggle\"]],\n  viewQuery: function MatButtonToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-button-toggle\"],\n  hostVars: 10,\n  hostBindings: function MatButtonToggle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id);\n      ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    tabIndex: \"tabIndex\",\n    appearance: \"appearance\",\n    checked: \"checked\",\n    disabled: \"disabled\",\n    id: \"id\",\n    name: \"name\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    value: \"value\"\n  },\n  outputs: {\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggle\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 9,\n  consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n  template: function MatButtonToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() {\n        return ctx._onButtonClick();\n      });\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵprojection(3);\n      ɵngcc0.ɵɵelementEnd()();\n      ɵngcc0.ɵɵelement(4, \"div\", 3)(5, \"div\", 4);\n    }\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(1);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    }\n  },\n  dependencies: [ɵngcc2.MatRipple],\n  styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media screen and (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nMatButtonToggle.ctorParameters = () => [{\n  type: MatButtonToggleGroup,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}];\nMatButtonToggle.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  _buttonElement: [{\n    type: ViewChild,\n    args: ['button']\n  }],\n  id: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  appearance: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-button-toggle',\n      template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\",\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matButtonToggle',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disableRipple'],\n      host: {\n        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mat-button-toggle-checked]': 'checked',\n        '[class.mat-button-toggle-disabled]': 'disabled',\n        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n        'class': 'mat-button-toggle',\n        // Clear out the native tabindex here since we forward it to the underlying button\n        '[attr.tabindex]': 'null',\n        '[attr.id]': 'id'\n      },\n      styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media screen and (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"]\n    }]\n  }], function () {\n    return [{\n      type: MatButtonToggleGroup,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    appearance: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    _buttonElement: [{\n      type: ViewChild,\n      args: ['button']\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatButtonToggleModule {}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) {\n  return new (t || MatButtonToggleModule)();\n};\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatButtonToggleModule\n});\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [MatCommonModule, MatRippleModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatRippleModule],\n      exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n      declarations: [MatButtonToggleGroup, MatButtonToggle]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, {\n    declarations: function () {\n      return [MatButtonToggleGroup, MatButtonToggle];\n    },\n    imports: function () {\n      return [MatCommonModule, MatRippleModule];\n    },\n    exports: function () {\n      return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleBase, _MatButtonToggleMixinBase, MatButtonToggle, MatButtonToggleModule };","map":{"version":3,"names":["FocusMonitor","coerceBooleanProperty","SelectionModel","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","Directive","ElementRef","EventEmitter","forwardRef","Input","Optional","Output","ViewChild","ViewEncapsulation","InjectionToken","Inject","NgModule","NG_VALUE_ACCESSOR","mixinDisableRipple","MatCommonModule","MatRippleModule","ɵngcc0","ɵngcc1","ɵngcc2","_c0","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","constructor","source","value","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","appearance","name","_buttonToggles","forEach","toggle","vertical","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","disabled","_markForCheck","ngOnInit","ngAfterContentInit","select","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_emitChangeEvent","Array","isArray","length","event","_syncButtonToggle","isUserInput","deselect","_isSelected","isSelected","_isPrechecked","_rawValue","some","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","ɵfac","MatButtonToggleGroup_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","contentQueries","MatButtonToggleGroup_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatButtonToggle","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","hostVars","hostBindings","MatButtonToggleGroup_HostBindings","ɵɵattribute","ɵɵclassProp","inputs","outputs","exportAs","features","ɵɵProvidersFeature","ctorParameters","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","providers","host","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","buttonId","id","_appearance","_type","monitor","ngOnDestroy","stopMonitoring","focus","_buttonElement","nativeElement","_onButtonClick","newChecked","MatButtonToggle_Factory","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","viewQuery","MatButtonToggle_Query","ɵɵviewQuery","first","MatButtonToggle_HostBindings","disableRipple","ariaLabel","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatButtonToggle_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatButtonToggle_Template_button_click_0_listener","ɵɵprojection","ɵɵelementEnd","ɵɵelement","_r0","ɵɵreference","ɵɵproperty","ɵɵadvance","dependencies","MatRipple","styles","encapsulation","changeDetection","String","None","OnPush","MatButtonToggleModule","MatButtonToggleModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/material/__ivy_ngcc__/esm2015/button-toggle.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/** *\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n  @type {?} */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatButtonToggleGroupMultiple {\n}\n/** @type {?} */\nlet _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nclass MatButtonToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nclass MatButtonToggleGroup {\n    /**\n     * @param {?} _changeDetector\n     * @param {?=} defaultOptions\n     */\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Event emitted when the group's value changes.\n         */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * `name` attribute for the underlying `input` element.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle.name = this._name);\n        }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n    get value() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n    get selected() {\n        /** @type {?} */\n        const selected = this._selectionModel.selected;\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether multiple button toggle group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const selected = this.selected;\n        /** @type {?} */\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        /** @type {?} */\n        const event = new MatButtonToggleChange(/** @type {?} */ ((source)), this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @return {?}\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (/** @type {?} */ (this.selected)).checked = false;\n        }\n        if (select) {\n            this._selectionModel.select(toggle);\n        }\n        else {\n            this._selectionModel.deselect(toggle);\n        }\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isSelected(toggle) {\n        return this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /**\n     * Clears the selected toggles.\n     * @return {?}\n     */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @param {?} value\n     * @return {?}\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n        ])] });\n/** @nocollapse */\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle),] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle)]\n        }] }); })();\n/**\n * \\@docs-private\n */\nclass MatButtonToggleBase {\n}\n/** @type {?} */\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     * @param {?} defaultTabIndex\n     * @param {?=} defaultOptions\n     */\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, \n    // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n    defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /**\n         * Event emitted when the group value changes.\n         */\n        this.change = new EventEmitter();\n        /** @type {?} */\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * Unique ID for the underlying `button` element.\n     * @return {?}\n     */\n    get buttonId() { return `${this.id}-button`; }\n    /**\n     * The appearance style of the button.\n     * @return {?}\n     */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n        this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = this.buttonToggleGroup.name;\n        }\n        if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n            this.checked = true;\n        }\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    focus() {\n        this._buttonElement.nativeElement.focus();\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n    _onButtonClick() {\n        /** @type {?} */\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MatButtonToggleGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [1, \"mat-button-toggle\"], hostVars: 10, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelement(4, \"div\", 3)(5, \"div\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, dependencies: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media screen and (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{ selector: 'mat-button-toggle', template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\", encapsulation: ViewEncapsulation.None, exportAs: 'matButtonToggle', changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disableRipple'], host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    // Clear out the native tabindex here since we forward it to the underlying button\n                    '[attr.tabindex]': 'null',\n                    '[attr.id]': 'id'\n                }, styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media screen and (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"] }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); };\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [MatCommonModule, MatRippleModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleBase, _MatButtonToggleMixinBase, MatButtonToggle, MatButtonToggleModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}