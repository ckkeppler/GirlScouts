{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to specify the checkbox click behavior.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\nconst _c0 = [\"input\"];\nconst _c1 = function () {\n  return {\n    enterDuration: 150\n  };\n};\nconst _c2 = [\"*\"];\nconst MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/** @type {?} */\nlet calculatedRippleRadius = 0;\n/** *\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n  @type {?} */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n/** @enum {number} */\nvar TransitionCheckState = {\n  /** The initial state of the component before any user interaction. */\n  Init: 0,\n  /** The state representing the component when it's becoming checked. */\n  Checked: 1,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked: 2,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate: 3\n};\nTransitionCheckState[TransitionCheckState.Init] = 'Init';\nTransitionCheckState[TransitionCheckState.Checked] = 'Checked';\nTransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';\nTransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';\n/**\n * Change event object emitted by MatCheckbox.\n */\nclass MatCheckboxChange {}\n/**\n * \\@docs-private\n */\nclass MatCheckboxBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _focusMonitor\n   * @param {?} _ngZone\n   * @param {?} tabIndex\n   * @param {?} _clickAction\n   * @param {?=} _animationMode\n   */\n  constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\n    super(elementRef);\n    this._changeDetectorRef = _changeDetectorRef;\n    this._focusMonitor = _focusMonitor;\n    this._ngZone = _ngZone;\n    this._clickAction = _clickAction;\n    this._animationMode = _animationMode;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    this.ariaLabel = '';\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    this.ariaLabelledby = null;\n    this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n    /**\n     * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n     */\n    this.id = this._uniqueId;\n    /**\n     * Whether the label should appear after or before the checkbox. Defaults to 'after'\n     */\n    this.labelPosition = 'after';\n    /**\n     * Name value will be applied to the input element if present\n     */\n    this.name = null;\n    /**\n     * Event emitted when the checkbox's `checked` value changes.\n     */\n    this.change = new EventEmitter();\n    /**\n     * Event emitted when the checkbox's `indeterminate` value changes.\n     */\n    this.indeterminateChange = new EventEmitter();\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * \\@docs-private\n     */\n    this._onTouched = () => {};\n    this._currentAnimationClass = '';\n    this._currentCheckState = TransitionCheckState.Init;\n    this._controlValueAccessorChangeFn = () => {};\n    this._checked = false;\n    this._disabled = false;\n    this._indeterminate = false;\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n  /**\n   * Returns the unique id for the visual hidden input.\n   * @return {?}\n   */\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /**\n   * Whether the checkbox is required.\n   * @return {?}\n   */\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\n   * Whether the checkbox is checked.\n   * @return {?}\n   */\n  get checked() {\n    return this._checked;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set checked(value) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    /** @type {?} */\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   * @return {?}\n   */\n  get indeterminate() {\n    return this._indeterminate;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set indeterminate(value) {\n    /** @type {?} */\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n  /**\n   * Method being called whenever the label text changes.\n   * @return {?}\n   */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  writeValue(value) {\n    this.checked = !!value;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /**\n   * @return {?}\n   */\n  _getAriaChecked() {\n    return this.checked ? 'true' : this.indeterminate ? 'mixed' : 'false';\n  }\n  /**\n   * @param {?} newState\n   * @return {?}\n   */\n  _transitionCheckState(newState) {\n    /** @type {?} */\n    let oldState = this._currentCheckState;\n    /** @type {?} */\n    let element = this._elementRef.nativeElement;\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n    this._currentCheckState = newState;\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n      /** @type {?} */\n      const animationClass = this._currentAnimationClass;\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _emitChangeEvent() {\n    /** @type {?} */\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n  /**\n   * Toggles the `checked` state of the checkbox.\n   * @return {?}\n   */\n  toggle() {\n    this.checked = !this.checked;\n  }\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param {?} event\n   * @return {?}\n   */\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n      this.toggle();\n      this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n  /**\n   * Focuses the checkbox.\n   * @return {?}\n   */\n  focus() {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n  _onInteractionEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n  /**\n   * @param {?} oldState\n   * @param {?} newState\n   * @return {?}\n   */\n  _getAnimationClassForCheckStateTransition(oldState, newState) {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n    /** @type {?} */\n    let animSuffix = '';\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ? 'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ? 'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ? 'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   * @return {?}\n   */\n  _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      /** @type {?} */\n      const rippleWidth = this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) {\n  return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_CLICK_ACTION, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\nMatCheckbox.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatCheckbox,\n  selectors: [[\"mat-checkbox\"]],\n  viewQuery: function MatCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n      ɵngcc0.ɵɵviewQuery(MatRipple, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-checkbox\"],\n  hostVars: 12,\n  hostBindings: function MatCheckbox_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"tabindex\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    name: \"name\",\n    required: \"required\",\n    checked: \"checked\",\n    disabled: \"disabled\",\n    indeterminate: \"indeterminate\",\n    value: \"value\"\n  },\n  outputs: {\n    change: \"change\",\n    indeterminateChange: \"indeterminateChange\"\n  },\n  exportAs: [\"matCheckbox\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 17,\n  vars: 20,\n  consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"indeterminate\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2)(3, \"input\", 3, 4);\n      ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) {\n        return ctx._onInteractionEvent($event);\n      })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n      ɵngcc0.ɵɵelement(6, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(7, \"div\", 7);\n      ɵngcc0.ɵɵelementStart(8, \"div\", 8);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n      ɵngcc0.ɵɵelement(10, \"path\", 10);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceHTML();\n      ɵngcc0.ɵɵelement(11, \"div\", 11);\n      ɵngcc0.ɵɵelementEnd()();\n      ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n      ɵngcc0.ɵɵtext(15, \"\\u00A0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(16);\n      ɵngcc0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(1);\n      const _r2 = ɵngcc0.ɵɵreference(13);\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"indeterminate\", ctx.indeterminate);\n      ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(19, _c1));\n    }\n  },\n  dependencies: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent],\n  styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-indeterminate.mat-checkbox-disabled .mat-checkbox-inner-container{opacity:.5}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nMatCheckbox.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: FocusMonitor\n}, {\n  type: NgZone\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_CHECKBOX_CLICK_ACTION]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\nMatCheckbox.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  id: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  indeterminateChange: [{\n    type: Output\n  }],\n  value: [{\n    type: Input\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }],\n  ripple: [{\n    type: ViewChild,\n    args: [MatRipple]\n  }],\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  indeterminate: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'mat-checkbox',\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"20\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n      exportAs: 'matCheckbox',\n      host: {\n        'class': 'mat-checkbox',\n        '[id]': 'id',\n        '[attr.tabindex]': 'null',\n        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n        '[class.mat-checkbox-checked]': 'checked',\n        '[class.mat-checkbox-disabled]': 'disabled',\n        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n      },\n      providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n      inputs: ['disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-indeterminate.mat-checkbox-disabled .mat-checkbox-inner-container{opacity:.5}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_CHECKBOX_CLICK_ACTION]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    indeterminateChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    indeterminate: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    ripple: [{\n      type: ViewChild,\n      args: [MatRipple]\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\nMatCheckboxRequiredValidator.ɵfac = /*@__PURE__*/function () {\n  let ɵMatCheckboxRequiredValidator_BaseFactory;\n  return function MatCheckboxRequiredValidator_Factory(t) {\n    return (ɵMatCheckboxRequiredValidator_BaseFactory || (ɵMatCheckboxRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator)))(t || MatCheckboxRequiredValidator);\n  };\n}();\nMatCheckboxRequiredValidator.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatCheckboxRequiredValidator,\n  selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]],\n  hostVars: 1,\n  hostBindings: function MatCheckboxRequiredValidator_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n    }\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n      providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n      host: {\n        '[attr.required]': 'required ? \"\" : null'\n      }\n    }]\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatCheckboxModule {}\nMatCheckboxModule.ɵfac = function MatCheckboxModule_Factory(t) {\n  return new (t || MatCheckboxModule)();\n};\nMatCheckboxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatCheckboxModule\n});\nMatCheckboxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n      declarations: [MatCheckbox, MatCheckboxRequiredValidator]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, {\n    declarations: function () {\n      return [MatCheckbox, MatCheckboxRequiredValidator];\n    },\n    imports: function () {\n      return [CommonModule, MatRippleModule, MatCommonModule, ObserversModule];\n    },\n    exports: function () {\n      return [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckboxBase, _MatCheckboxMixinBase, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator };","map":{"version":3,"names":["InjectionToken","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ElementRef","EventEmitter","forwardRef","Inject","Input","NgZone","Optional","Output","ViewChild","ViewEncapsulation","Directive","NgModule","FocusMonitor","coerceBooleanProperty","NG_VALUE_ACCESSOR","CheckboxRequiredValidator","NG_VALIDATORS","MatRipple","mixinColor","mixinDisabled","mixinDisableRipple","mixinTabIndex","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","ObserversModule","CommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","enterDuration","_c2","MAT_CHECKBOX_CLICK_ACTION","nextUniqueId","calculatedRippleRadius","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","TransitionCheckState","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","constructor","_elementRef","_MatCheckboxMixinBase","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_clickAction","_animationMode","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","parseInt","monitor","subscribe","focusOrigin","Promise","resolve","then","inputId","required","_required","value","ngAfterViewChecked","_calculateRippleRadius","ngOnDestroy","stopMonitoring","checked","markForCheck","disabled","newValue","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","element","nativeElement","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","event","source","toggle","_onInputClick","stopPropagation","_inputElement","focus","focusVia","_onInteractionEvent","animSuffix","rippleWidth","querySelector","clientWidth","ripple","radius","ɵfac","MatCheckbox_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatCheckbox_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","MatCheckbox_HostBindings","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","inputs","color","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatCheckbox_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatCheckbox_Template_input_change_3_listener","$event","MatCheckbox_Template_input_click_3_listener","ɵɵelementEnd","ɵɵelement","ɵɵnamespaceSVG","ɵɵnamespaceHTML","MatCheckbox_Template_span_cdkObserveContent_12_listener","ɵɵtext","ɵɵprojection","_r0","ɵɵreference","_r2","ɵɵadvance","textContent","trim","ɵɵproperty","ɵɵpureFunction0","dependencies","CdkObserveContent","styles","encapsulation","changeDetection","ctorParameters","String","decorators","args","undefined","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","providers","None","OnPush","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","ɵMatCheckboxRequiredValidator_BaseFactory","MatCheckboxRequiredValidator_Factory","ɵɵgetInheritedFactory","ɵdir","ɵɵdefineDirective","MatCheckboxRequiredValidator_HostBindings","MatCheckboxModule","MatCheckboxModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/material/__ivy_ngcc__/esm2015/checkbox.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to specify the checkbox click behavior.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/** @type {?} */\nlet calculatedRippleRadius = 0;\n/** *\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n  @type {?} */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true\n};\n/** @enum {number} */\nvar TransitionCheckState = {\n    /** The initial state of the component before any user interaction. */\n    Init: 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked: 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked: 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate: 3,\n};\nTransitionCheckState[TransitionCheckState.Init] = 'Init';\nTransitionCheckState[TransitionCheckState.Checked] = 'Checked';\nTransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';\nTransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';\n/**\n * Change event object emitted by MatCheckbox.\n */\nclass MatCheckboxChange {\n}\n/**\n * \\@docs-private\n */\nclass MatCheckboxBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusMonitor\n     * @param {?} _ngZone\n     * @param {?} tabIndex\n     * @param {?} _clickAction\n     * @param {?=} _animationMode\n     */\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._clickAction = _clickAction;\n        this._animationMode = _animationMode;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /**\n         * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the checkbox. Defaults to 'after'\n         */\n        this.labelPosition = 'after';\n        /**\n         * Name value will be applied to the input element if present\n         */\n        this.name = null;\n        /**\n         * Event emitted when the checkbox's `checked` value changes.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event emitted when the checkbox's `indeterminate` value changes.\n         */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = TransitionCheckState.Init;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Whether the checkbox is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        this._calculateRippleRadius();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     * @return {?}\n     */\n    get indeterminate() { return this._indeterminate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set indeterminate(value) {\n        /** @type {?} */\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            }\n            else {\n                this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and it's children.\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @return {?}\n     */\n    _getAriaChecked() {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n    /**\n     * @param {?} newState\n     * @return {?}\n     */\n    _transitionCheckState(newState) {\n        /** @type {?} */\n        let oldState = this._currentCheckState;\n        /** @type {?} */\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            /** @type {?} */\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /**\n     * Focuses the checkbox.\n     * @return {?}\n     */\n    focus() {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    /**\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        /** @type {?} */\n        let animSuffix = '';\n        switch (oldState) {\n            case TransitionCheckState.Init:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === TransitionCheckState.Checked) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == TransitionCheckState.Indeterminate) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case TransitionCheckState.Unchecked:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case TransitionCheckState.Checked:\n                animSuffix = newState === TransitionCheckState.Unchecked ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case TransitionCheckState.Indeterminate:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n    /**\n     * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n     * for the application.\n     * @return {?}\n     */\n    _calculateRippleRadius() {\n        if (!calculatedRippleRadius) {\n            /** @type {?} */\n            const rippleWidth = this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n            calculatedRippleRadius = rippleWidth / 2;\n        }\n        this.ripple.radius = calculatedRippleRadius;\n    }\n}\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) { return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_CLICK_ACTION, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatCheckbox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatCheckbox, selectors: [[\"mat-checkbox\"]], viewQuery: function MatCheckbox_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(MatRipple, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    } }, hostAttrs: [1, \"mat-checkbox\"], hostVars: 12, hostBindings: function MatCheckbox_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", labelPosition: \"labelPosition\", name: \"name\", required: \"required\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\", value: \"value\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, exportAs: [\"matCheckbox\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 17, vars: 20, consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"indeterminate\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]], template: function MatCheckbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2)(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) { return ctx._onInteractionEvent($event); })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(7, \"div\", 7);\n        ɵngcc0.ɵɵelementStart(8, \"div\", 8);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n        ɵngcc0.ɵɵelement(10, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(11, \"div\", 11);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n        ɵngcc0.ɵɵtext(15, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(16);\n        ɵngcc0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r2 = ɵngcc0.ɵɵreference(13);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"indeterminate\", ctx.indeterminate);\n        ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(19, _c1));\n    } }, dependencies: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-indeterminate.mat-checkbox-disabled .mat-checkbox-inner-container{opacity:.5}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatCheckbox.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatCheckbox.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    id: [{ type: Input }],\n    required: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    name: [{ type: Input }],\n    change: [{ type: Output }],\n    indeterminateChange: [{ type: Output }],\n    value: [{ type: Input }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }],\n    ripple: [{ type: ViewChild, args: [MatRipple,] }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    indeterminate: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n        type: Component,\n        args: [{ selector: 'mat-checkbox', template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"20\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\", exportAs: 'matCheckbox', host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n                }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], inputs: ['disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media screen and (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-indeterminate.mat-checkbox-disabled .mat-checkbox-inner-container{opacity:.5}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_CLICK_ACTION]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], indeterminateChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], indeterminate: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }], ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = /*@__PURE__*/ function () { let ɵMatCheckboxRequiredValidator_BaseFactory; return function MatCheckboxRequiredValidator_Factory(t) { return (ɵMatCheckboxRequiredValidator_BaseFactory || (ɵMatCheckboxRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator)))(t || MatCheckboxRequiredValidator); }; }();\nMatCheckboxRequiredValidator.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatCheckboxRequiredValidator, selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]], hostVars: 1, hostBindings: function MatCheckboxRequiredValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵfac = function MatCheckboxModule_Factory(t) { return new (t || MatCheckboxModule)(); };\nMatCheckboxModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatCheckboxModule });\nMatCheckboxModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n                exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n                declarations: [MatCheckbox, MatCheckboxRequiredValidator]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, { declarations: function () { return [MatCheckbox, MatCheckboxRequiredValidator]; }, imports: function () { return [CommonModule, MatRippleModule, MatCommonModule, ObserversModule]; }, exports: function () { return [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckboxBase, _MatCheckboxMixinBase, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}