{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, InjectionToken, inject, Injectable, Inject, NgModule, NgZone, SimpleChange, Optional, defineInjectable } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n * @param {?} _document\n * @param {?} platformId\n * @return {?}\n */\nimport * as Éµngcc0 from '@angular/core';\nfunction removeStyles(_document, platformId) {\n  return () => {\n    if (isPlatformBrowser(platformId)) {\n      /** @type {?} */\n      const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n      /** @type {?} */\n      const classRegex = /\\bflex-layout-.+?\\b/g;\n      elements.forEach(el => {\n        el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ? el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n      });\n    }\n  };\n}\n/** *\n *  Provider to remove SSR styles on the browser\n  @type {?} */\nconst BROWSER_PROVIDER = {\n  provide: /** @type {?} */APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\n/** @type {?} */\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n  providedIn: 'root',\n  factory: () => null\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RESPONSIVE_ALIASES = ['xs', 'gt-xs', 'sm', 'gt-sm', 'md', 'gt-md', 'lg', 'gt-lg', 'xl'];\n/** @type {?} */\nconst DEFAULT_BREAKPOINTS = [{\n  alias: 'xs',\n  mediaQuery: '(min-width: 0px) and (max-width: 599px)'\n}, {\n  alias: 'gt-xs',\n  overlapping: true,\n  mediaQuery: '(min-width: 600px)'\n}, {\n  alias: 'lt-sm',\n  overlapping: true,\n  mediaQuery: '(max-width: 599px)'\n}, {\n  alias: 'sm',\n  mediaQuery: '(min-width: 600px) and (max-width: 959px)'\n}, {\n  alias: 'gt-sm',\n  overlapping: true,\n  mediaQuery: '(min-width: 960px)'\n}, {\n  alias: 'lt-md',\n  overlapping: true,\n  mediaQuery: '(max-width: 959px)'\n}, {\n  alias: 'md',\n  mediaQuery: '(min-width: 960px) and (max-width: 1279px)'\n}, {\n  alias: 'gt-md',\n  overlapping: true,\n  mediaQuery: '(min-width: 1280px)'\n}, {\n  alias: 'lt-lg',\n  overlapping: true,\n  mediaQuery: '(max-width: 1279px)'\n}, {\n  alias: 'lg',\n  mediaQuery: '(min-width: 1280px) and (max-width: 1919px)'\n}, {\n  alias: 'gt-lg',\n  overlapping: true,\n  mediaQuery: '(min-width: 1920px)'\n}, {\n  alias: 'lt-xl',\n  overlapping: true,\n  mediaQuery: '(max-width: 1919px)'\n}, {\n  alias: 'xl',\n  mediaQuery: '(min-width: 1920px) and (max-width: 5000px)'\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599px)';\n/** @type {?} */\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959px)';\n/** @type {?} */\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279px)';\n/** @type {?} */\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839px)';\n/** @type {?} */\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\n/** @type {?} */\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\n/** @type {?} */\nconst ScreenTypes = {\n  'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n  'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n  'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}]`,\n  'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/** *\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n  @type {?} */\nconst ORIENTATION_BREAKPOINTS = [{\n  'alias': 'handset',\n  'mediaQuery': ScreenTypes.HANDSET\n}, {\n  'alias': 'handset.landscape',\n  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE\n}, {\n  'alias': 'handset.portrait',\n  'mediaQuery': ScreenTypes.HANDSET_PORTRAIT\n}, {\n  'alias': 'tablet',\n  'mediaQuery': ScreenTypes.TABLET\n}, {\n  'alias': 'tablet.landscape',\n  'mediaQuery': ScreenTypes.TABLET\n}, {\n  'alias': 'tablet.portrait',\n  'mediaQuery': ScreenTypes.TABLET_PORTRAIT\n}, {\n  'alias': 'web',\n  'mediaQuery': ScreenTypes.WEB,\n  overlapping: true\n}, {\n  'alias': 'web.landscape',\n  'mediaQuery': ScreenTypes.WEB_LANDSCAPE,\n  overlapping: true\n}, {\n  'alias': 'web.portrait',\n  'mediaQuery': ScreenTypes.WEB_PORTRAIT,\n  overlapping: true\n}];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nfunction extendObject(dest, ...sources) {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n  for (let source of sources) {\n    if (source != null) {\n      for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n  return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\n/**\n * @param {?} part\n * @return {?}\n */\nfunction firstUpperCase(part) {\n  /** @type {?} */\n  let first = part.length > 0 ? part.charAt(0) : '';\n  /** @type {?} */\n  let remainder = part.length > 1 ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param {?} name Text to UpperCamelCase\n * @return {?}\n */\nfunction camelCase(name) {\n  return name.replace(ALIAS_DELIMITERS, '|').split('|').map(firstUpperCase).join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n * @param {?} list\n * @return {?}\n */\nfunction validateSuffixes(list) {\n  list.forEach(bp => {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n\n  return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n * @param {?} defaults\n * @param {?=} custom\n * @return {?}\n */\nfunction mergeByAlias(defaults, custom = []) {\n  /** @type {?} */\n  const dict = {};\n  defaults.forEach(bp => {\n    dict[bp.alias] = bp;\n  });\n  // Merge custom breakpoints\n  custom.forEach(bp => {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n  return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true\n};\n/** @type {?} */\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n  providedIn: 'root',\n  factory: () => DEFAULT_CONFIG\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n  @type {?} */\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n  providedIn: 'root',\n  factory: () => {\n    /** @type {?} */\n    const breakpoints = inject(BREAKPOINT);\n    /** @type {?} */\n    const layoutConfig = inject(LAYOUT_CONFIG);\n    /** @type {?} */\n    const bpFlattenArray = [].concat.apply([], (breakpoints || []).map(v => Array.isArray(v) ? v : [v]));\n    /** @type {?} */\n    const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS).concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n    return mergeByAlias(builtIns, bpFlattenArray);\n  }\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n  /**\n   * @param {?} _registry\n   */\n  constructor(_registry) {\n    this._registry = _registry;\n  }\n  /**\n   * Accessor to raw list\n   * @return {?}\n   */\n  get items() {\n    return [...this._registry];\n  }\n  /**\n   * Accessor to sorted list used for registration with matchMedia API\n   *\n   * NOTE: During breakpoint registration, we want to register the overlaps FIRST\n   *       so the non-overlaps will trigger the MatchMedia:BehaviorSubject last!\n   *       And the largest, non-overlap, matching breakpoint should be the lastReplay value\n   * @return {?}\n   */\n  get sortedItems() {\n    /** @type {?} */\n    let overlaps = this._registry.filter(it => it.overlapping === true);\n    /** @type {?} */\n    let nonOverlaps = this._registry.filter(it => it.overlapping !== true);\n    return [...overlaps, ...nonOverlaps];\n  }\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   * @param {?} alias\n   * @return {?}\n   */\n  findByAlias(alias) {\n    return this._registry.find(bp => bp.alias == alias) || null;\n  }\n  /**\n   * @param {?} query\n   * @return {?}\n   */\n  findByQuery(query) {\n    return this._registry.find(bp => bp.mediaQuery == query) || null;\n  }\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   * @return {?}\n   */\n  get overlappings() {\n    return this._registry.filter(it => it.overlapping == true);\n  }\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   * @return {?}\n   */\n  get aliases() {\n    return this._registry.map(it => it.alias);\n  }\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   * @return {?}\n   */\n  get suffixes() {\n    return this._registry.map(it => !!it.suffix ? it.suffix : '');\n  }\n}\nBreakPointRegistry.Éµfac = function BreakPointRegistry_Factory(t) {\n  return new (t || BreakPointRegistry)(Éµngcc0.ÉµÉµinject(BREAKPOINTS));\n};\nBreakPointRegistry.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: BreakPointRegistry,\n  factory: BreakPointRegistry.Éµfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nBreakPointRegistry.ctorParameters = () => [{\n  type: Array,\n  decorators: [{\n    type: Inject,\n    args: [BREAKPOINTS]\n  }]\n}];\n/** @nocollapse */\nBreakPointRegistry.ngInjectableDef = defineInjectable({\n  factory: function BreakPointRegistry_Factory() {\n    return new BreakPointRegistry(inject(BREAKPOINTS));\n  },\n  token: BreakPointRegistry,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(BreakPointRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Array,\n      decorators: [{\n        type: Inject,\n        args: [BREAKPOINTS]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n  /**\n   * @param {?=} matches\n   * @param {?=} mediaQuery\n   * @param {?=} mqAlias\n   * @param {?=} suffix\n   */\n  constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '' // e.g.   GtSM, Md, GtLg\n  ) {\n    this.matches = matches;\n    this.mediaQuery = mediaQuery;\n    this.mqAlias = mqAlias;\n    this.suffix = suffix;\n    this.property = '';\n  }\n  /**\n   * @return {?}\n   */\n  clone() {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n  /**\n   * @param {?} _zone\n   * @param {?} _platformId\n   * @param {?} _document\n   */\n  constructor(_zone, _platformId, _document) {\n    this._zone = _zone;\n    this._platformId = _platformId;\n    this._document = _document;\n    this._registry = new Map();\n    this._source = new BehaviorSubject(new MediaChange(true));\n    this._observable$ = this._source.asObservable();\n  }\n  /**\n   * For the specified mediaQuery?\n   * @param {?} mediaQuery\n   * @return {?}\n   */\n  isActive(mediaQuery) {\n    /** @type {?} */\n    let mql = this._registry.get(mediaQuery);\n    return !!mql ? mql.matches : false;\n  }\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * NOTE: if a mediaQuery is not specified, then ALL mediaQuery activations will\n   *       be announced.\n   * @param {?=} mediaQuery\n   * @return {?}\n   */\n  observe(mediaQuery) {\n    if (mediaQuery) {\n      this.registerQuery(mediaQuery);\n    }\n    return this._observable$.pipe(filter(change => {\n      return mediaQuery ? change.mediaQuery === mediaQuery : true;\n    }));\n  }\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   * @param {?} mediaQuery\n   * @return {?}\n   */\n  registerQuery(mediaQuery) {\n    /** @type {?} */\n    let list = normalizeQuery(mediaQuery);\n    if (list.length > 0) {\n      this._prepareQueryCSS(list, this._document);\n      list.forEach(query => {\n        /** @type {?} */\n        let mql = this._registry.get(query);\n        /** @type {?} */\n        let onMQLEvent = e => {\n          this._zone.run(() => {\n            /** @type {?} */\n            let change = new MediaChange(e.matches, query);\n            this._source.next(change);\n          });\n        };\n        if (!mql) {\n          mql = this._buildMQL(query);\n          mql.addListener(onMQLEvent);\n          this._registry.set(query, mql);\n        }\n        if (mql.matches) {\n          onMQLEvent( /** @type {?} */mql);\n        }\n      });\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   * @param {?} query\n   * @return {?}\n   */\n  _buildMQL(query) {\n    /** @type {?} */\n    let canListen = isPlatformBrowser(this._platformId) && !! /** @type {?} */window.matchMedia('all').addListener;\n    return canListen ? /** @type {?} */window.matchMedia(query) : /** @type {?} */{\n      matches: query === 'all' || query === '',\n      media: query,\n      addListener: () => {},\n      removeListener: () => {}\n    };\n  }\n  /**\n   * For Webkit engines that only trigger the MediaQueryList Listener\n   * when there is at least one CSS selector for the respective media query.\n   *\n   * @param {?} mediaQueries\n   * @param {?} _document\n   * @return {?}\n   */\n  _prepareQueryCSS(mediaQueries, _document) {\n    /** @type {?} */\n    const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n    if (list.length > 0) {\n      /** @type {?} */\n      const query = list.join(', ');\n      try {\n        /** @type {?} */\n        let styleEl = _document.createElement('style');\n        styleEl.setAttribute('type', 'text/css');\n        if (! /** @type {?} */styleEl.styleSheet) {\n          /** @type {?} */\n          let cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n          styleEl.appendChild(_document.createTextNode(cssText));\n        } /** @type {?} */\n        _document.head.appendChild(styleEl);\n        // Store in private global registry\n        list.forEach(mq => ALL_STYLES[mq] = styleEl);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n}\nMatchMedia.Éµfac = function MatchMedia_Factory(t) {\n  return new (t || MatchMedia)(Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµinject(PLATFORM_ID), Éµngcc0.ÉµÉµinject(DOCUMENT));\n};\nMatchMedia.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: MatchMedia,\n  factory: MatchMedia.Éµfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nMatchMedia.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\nMatchMedia.ngInjectableDef = defineInjectable({\n  factory: function MatchMedia_Factory() {\n    return new MatchMedia(inject(NgZone), inject(PLATFORM_ID), inject(DOCUMENT));\n  },\n  token: MatchMedia,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MatchMedia, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/** *\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n  @type {?} */\nconst ALL_STYLES = {};\n/**\n * Always convert to unique list of queries; for iteration in ::registerQuery()\n * @param {?} mediaQuery\n * @return {?}\n */\nfunction normalizeQuery(mediaQuery) {\n  return typeof mediaQuery === 'undefined' ? [] : typeof mediaQuery === 'string' ? [mediaQuery] : unique( /** @type {?} */mediaQuery);\n}\n/**\n * Filter duplicate mediaQueries in the list\n * @param {?} list\n * @return {?}\n */\nfunction unique(list) {\n  /** @type {?} */\n  let seen = {};\n  return list.filter(item => {\n    return seen.hasOwnProperty(item) ? false : seen[item] = true;\n  });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction mergeAlias(dest, source) {\n  return extendObject(dest, source ? {\n    mqAlias: source.alias,\n    suffix: source.suffix\n  } : {});\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Base class for MediaService and pseudo-token for\n * @abstract\n */\nclass ObservableMedia {}\n/**\n * Class internalizes a MatchMedia service and exposes an Subscribable and Observable interface.\n * This an Observable with that exposes a feature to subscribe to mediaQuery\n * changes and a validator method (`isActive(<alias>)`) to test if a mediaQuery (or alias) is\n * currently active.\n *\n * !! Only mediaChange activations (not de-activations) are announced by the ObservableMedia\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * !! This is not an actual Observable. It is a wrapper of an Observable used to publish additional\n * methods like `isActive(<alias>). To access the Observable and use RxJS operators, use\n * `.asObservable()` with syntax like media.asObservable().map(....).\n *\n * \\@usage\n *\n *  // RxJS\n *  import {filter} from 'rxjs/operators/filter';\n *  import { ObservableMedia } from '\\@angular/flex-layout';\n *\n * \\@Component({ ... })\n *  export class AppComponent {\n *    status : string = '';\n *\n *    constructor(  media:ObservableMedia ) {\n *      let onChange = (change:MediaChange) => {\n *        this.status = change ? `'${change.mqAlias}' = (${change.mediaQuery})` : '';\n *      };\n *\n *      // Subscribe directly or access observable to use filter/map operators\n *      // e.g.\n *      //      media.subscribe(onChange);\n *\n *      media.asObservable()\n *        .pipe(\n *          filter((change:MediaChange) => true)   // silly noop filter\n *        ).subscribe(onChange);\n *    }\n *  }\n */\nclass MediaService {\n  /**\n   * @param {?} breakpoints\n   * @param {?} mediaWatcher\n   */\n  constructor(breakpoints, mediaWatcher) {\n    this.breakpoints = breakpoints;\n    this.mediaWatcher = mediaWatcher;\n    /**\n     * Should we announce gt-<xxx> breakpoint activations ?\n     */\n    this.filterOverlaps = true;\n    this._registerBreakPoints();\n    this.observable$ = this._buildObservable();\n  }\n  /**\n   * Test if specified query/alias is active.\n   * @param {?} alias\n   * @return {?}\n   */\n  isActive(alias) {\n    /** @type {?} */\n    let query = this._toMediaQuery(alias);\n    return this.mediaWatcher.isActive(query);\n  }\n  /**\n   * Proxy to the Observable subscribe method\n   * @param {?=} observerOrNext\n   * @param {?=} error\n   * @param {?=} complete\n   * @return {?}\n   */\n  subscribe(observerOrNext, error, complete) {\n    if (observerOrNext) {\n      if (typeof observerOrNext === 'object') {\n        return this.observable$.subscribe(observerOrNext.next, observerOrNext.error, observerOrNext.complete);\n      }\n    }\n    return this.observable$.subscribe(observerOrNext, error, complete);\n  }\n  /**\n   * Access to observable for use with operators like\n   * .filter(), .map(), etc.\n   * @return {?}\n   */\n  asObservable() {\n    return this.observable$;\n  }\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   * @return {?}\n   */\n  _registerBreakPoints() {\n    /** @type {?} */\n    let queries = this.breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this.mediaWatcher.registerQuery(queries);\n  }\n  /**\n   * Prepare internal observable\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   * @return {?}\n   */\n  _buildObservable() {\n    /** @type {?} */\n    const self = this;\n    /** @type {?} */\n    const media$ = this.mediaWatcher.observe();\n    /** @type {?} */\n    const activationsOnly = change => {\n      return change.matches === true;\n    };\n    /** @type {?} */\n    const addAliasInformation = change => {\n      return mergeAlias(change, this._findByQuery(change.mediaQuery));\n    };\n    /** @type {?} */\n    const excludeOverlaps = change => {\n      /** @type {?} */\n      let bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return !bp ? true : !(self.filterOverlaps && bp.overlapping);\n    };\n    /**\n         * Only pass/announce activations (not de-activations)\n         * Inject associated (if any) alias information into the MediaChange event\n         * Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n         */\n    return media$.pipe(filter(activationsOnly), filter(excludeOverlaps), map(addAliasInformation));\n  }\n  /**\n   * Breakpoint locator by alias\n   * @param {?} alias\n   * @return {?}\n   */\n  _findByAlias(alias) {\n    return this.breakpoints.findByAlias(alias);\n  }\n  /**\n   * Breakpoint locator by mediaQuery\n   * @param {?} query\n   * @return {?}\n   */\n  _findByQuery(query) {\n    return this.breakpoints.findByQuery(query);\n  }\n  /**\n   * Find associated breakpoint (if any)\n   * @param {?} query\n   * @return {?}\n   */\n  _toMediaQuery(query) {\n    /** @type {?} */\n    let bp = this._findByAlias(query) || this._findByQuery(query);\n    return bp ? bp.mediaQuery : query;\n  }\n}\nMediaService.Éµfac = function MediaService_Factory(t) {\n  return new (t || MediaService)(Éµngcc0.ÉµÉµinject(BreakPointRegistry), Éµngcc0.ÉµÉµinject(MatchMedia));\n};\nMediaService.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: MediaService,\n  factory: MediaService.Éµfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nMediaService.ctorParameters = () => [{\n  type: BreakPointRegistry\n}, {\n  type: MatchMedia\n}];\n/** @nocollapse */\nMediaService.ngInjectableDef = defineInjectable({\n  factory: function MediaService_Factory() {\n    return new MediaService(inject(BreakPointRegistry), inject(MatchMedia));\n  },\n  token: MediaService,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MediaService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }];\n  }, null);\n})();\n/** @type {?} */\nconst ObservableMediaProvider = {\n  // tslint:disable-line:variable-name\n  provide: ObservableMedia,\n  useClass: MediaService\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * *****************************************************************\n * Define module for the MediaQuery API\n * *****************************************************************\n */\nclass CoreModule {}\nCoreModule.Éµfac = function CoreModule_Factory(t) {\n  return new (t || CoreModule)();\n};\nCoreModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n  type: CoreModule\n});\nCoreModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n  providers: [ObservableMediaProvider, BROWSER_PROVIDER]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [ObservableMediaProvider, BROWSER_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n  constructor() {\n    this.stylesheet = new Map();\n  }\n  /**\n   * Add an individual style to an HTML element\n   * @param {?} element\n   * @param {?} style\n   * @param {?} value\n   * @return {?}\n   */\n  addStyleToElement(element, style, value) {\n    /** @type {?} */\n    const stylesheet = this.stylesheet.get(element);\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n  /**\n   * Clear the virtual stylesheet\n   * @return {?}\n   */\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n  /**\n   * Retrieve a given style for an HTML element\n   * @param {?} el\n   * @param {?} styleName\n   * @return {?}\n   */\n  getStyleForElement(el, styleName) {\n    /** @type {?} */\n    const styles = this.stylesheet.get(el);\n    /** @type {?} */\n    let value = '';\n    if (styles) {\n      /** @type {?} */\n      const style = styles.get(styleName);\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n    return value;\n  }\n}\nStylesheetMap.Éµfac = function StylesheetMap_Factory(t) {\n  return new (t || StylesheetMap)();\n};\nStylesheetMap.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: StylesheetMap,\n  factory: StylesheetMap.Éµfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nStylesheetMap.ngInjectableDef = defineInjectable({\n  factory: function StylesheetMap_Factory() {\n    return new StylesheetMap();\n  },\n  token: StylesheetMap,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(StylesheetMap, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n  @type {?} */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n  providedIn: 'root',\n  factory: () => false\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n  @type {?} */\nconst INLINE = 'inline';\n/** @type {?} */\nconst LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n * @param {?} value\n * @return {?}\n */\nfunction buildLayoutCSS(value) {\n  let [direction, wrap, isInline] = validateValue(value);\n  return buildCSS(direction, wrap, isInline);\n}\n/**\n * Validate the value to be one of the acceptable value options\n * Use default fallback of 'row'\n * @param {?} value\n * @return {?}\n */\nfunction validateValue(value) {\n  value = value ? value.toLowerCase() : '';\n  let [direction, wrap, inline] = value.split(' ');\n  // First value must be the `flex-direction`\n  if (!LAYOUT_VALUES.find(x => x === direction)) {\n    direction = LAYOUT_VALUES[0];\n  }\n  if (wrap === INLINE) {\n    wrap = inline !== INLINE ? inline : '';\n    inline = INLINE;\n  }\n  return [direction, validateWrapValue(wrap), !!inline];\n}\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n * @param {?} value\n * @return {?}\n */\nfunction validateWrapValue(value) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n      // All other values fallback to 'wrap'\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n  return value;\n}\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container wonât apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n * @param {?} direction\n * @param {?=} wrap\n * @param {?=} inline\n * @return {?}\n */\nfunction buildCSS(direction, wrap = null, inline = false) {\n  return {\n    'display': inline ? 'inline-flex' : 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass KeyOptions {\n  /**\n   * @param {?} baseKey\n   * @param {?} defaultValue\n   * @param {?} inputKeys\n   */\n  constructor(baseKey, defaultValue, inputKeys) {\n    this.baseKey = baseKey;\n    this.defaultValue = defaultValue;\n    this.inputKeys = inputKeys;\n  }\n}\n/**\n * ResponsiveActivation acts as a proxy between the MonitorMedia service (which emits mediaQuery\n * changes) and the fx API directives. The MQA proxies mediaQuery change events and notifies the\n * directive via the specified callback.\n *\n * - The MQA also determines which directive property should be used to determine the\n *   current change 'value'... BEFORE the original `onMediaQueryChanges()` method is called.\n * - The `ngOnDestroy()` method is also head-hooked to enable auto-unsubscribe from the\n *   MediaQueryServices.\n *\n * NOTE: these interceptions enables the logic in the fx API directives to remain terse and clean.\n */\nclass ResponsiveActivation {\n  /**\n   * Constructor\n   * @param {?} _options\n   * @param {?} _mediaMonitor\n   * @param {?} _onMediaChanges\n   */\n  constructor(_options, _mediaMonitor, _onMediaChanges) {\n    this._options = _options;\n    this._mediaMonitor = _mediaMonitor;\n    this._onMediaChanges = _onMediaChanges;\n    this._subscribers = [];\n    this._activatedInputKey = '';\n    this._registryMap = this._buildRegistryMap();\n    this._subscribers = this._configureChangeObservers();\n  }\n  /**\n   * Get a readonly sorted list of the breakpoints corresponding to the directive properties\n   * defined in the HTML markup: the sorting is done from largest to smallest. The order is\n   * important when several media queries are 'registered' and from which, the browser uses the\n   * first matching media query.\n   * @return {?}\n   */\n  get registryFromLargest() {\n    return [...this._registryMap].reverse();\n  }\n  /**\n   * Accessor to the DI'ed directive property\n   * Each directive instance has a reference to the MediaMonitor which is\n   * used HERE to subscribe to mediaQuery change notifications.\n   * @return {?}\n   */\n  get mediaMonitor() {\n    return this._mediaMonitor;\n  }\n  /**\n   * Determine which directive \\@Input() property is currently active (for the viewport size):\n   * The key must be defined (in use) or fallback to the 'closest' overlapping property key\n   * that is defined; otherwise the default property key will be used.\n   * e.g.\n   *      if `<div fxHide fxHide.gt-sm=\"false\">` is used but the current activated mediaQuery alias\n   *      key is `.md` then `.gt-sm` should be used instead\n   * @return {?}\n   */\n  get activatedInputKey() {\n    return this._activatedInputKey || this._options.baseKey;\n  }\n  /**\n   * Get the currently activated \\@Input value or the fallback default \\@Input value\n   * @return {?}\n   */\n  get activatedInput() {\n    /** @type {?} */\n    let key = this.activatedInputKey;\n    return this.hasKeyValue(key) ? this._lookupKeyValue(key) : this._options.defaultValue;\n  }\n  /**\n   * Fast validator for presence of attribute on the host element\n   * @param {?} key\n   * @return {?}\n   */\n  hasKeyValue(key) {\n    /** @type {?} */\n    let value = this._options.inputKeys[key];\n    return typeof value !== 'undefined';\n  }\n  /**\n   * Remove interceptors, restore original functions, and forward the onDestroy() call\n   * @return {?}\n   */\n  destroy() {\n    this._subscribers.forEach(link => {\n      link.unsubscribe();\n    });\n    this._subscribers = [];\n  }\n  /**\n   * For each *defined* API property, register a callback to `_onMonitorEvents( )`\n   * Cache 1..n subscriptions for internal auto-unsubscribes when the the directive destructs\n   * @return {?}\n   */\n  _configureChangeObservers() {\n    /** @type {?} */\n    let subscriptions = [];\n    this._registryMap.forEach(bp => {\n      if (this._keyInUse(bp.key)) {\n        /** @type {?} */\n        let buildChanges = change => {\n          change = change.clone();\n          change.property = this._options.baseKey;\n          return change;\n        };\n        subscriptions.push(this.mediaMonitor.observe(bp.alias).pipe(map(buildChanges)).subscribe(change => {\n          this._onMonitorEvents(change);\n        }));\n      }\n    });\n    return subscriptions;\n  }\n  /**\n   * Build mediaQuery key-hashmap; only for the directive properties that are actually defined/used\n   * in the HTML markup\n   * @return {?}\n   */\n  _buildRegistryMap() {\n    return this.mediaMonitor.breakpoints.map(bp => {\n      return (/** @type {?} */extendObject({}, bp, {\n          baseKey: this._options.baseKey,\n          // e.g. layout, hide, self-align, flex-wrap\n          key: this._options.baseKey + bp.suffix // e.g.  layoutGtSm, layoutMd, layoutGtLg\n        })\n      );\n    }).filter(bp => this._keyInUse(bp.key));\n  }\n  /**\n   * Synchronizes change notifications with the current mq-activated \\@Input and calculates the\n   * mq-activated input value or the default value\n   * @param {?} change\n   * @return {?}\n   */\n  _onMonitorEvents(change) {\n    if (change.property == this._options.baseKey) {\n      change.value = this._calculateActivatedValue(change);\n      this._onMediaChanges(change);\n    }\n  }\n  /**\n   * Has the key been specified in the HTML markup and thus is intended\n   * to participate in activation processes.\n   * @param {?} key\n   * @return {?}\n   */\n  _keyInUse(key) {\n    return this._lookupKeyValue(key) !== undefined;\n  }\n  /**\n   *  Map input key associated with mediaQuery activation to closest defined input key\n   *  then return the values associated with the targeted input property\n   *\n   *  !! change events may arrive out-of-order (activate before deactivate)\n   *     so make sure the deactivate is used ONLY when the keys match\n   *     (since a different activate may be in use)\n   * @param {?} current\n   * @return {?}\n   */\n  _calculateActivatedValue(current) {\n    /** @type {?} */\n    const currentKey = this._options.baseKey + current.suffix;\n    /** @type {?} */\n    let newKey = this._activatedInputKey; // e.g. newKey == hideGtSm\n    newKey = current.matches ? currentKey : newKey == currentKey ? '' : newKey;\n    this._activatedInputKey = this._validateInputKey(newKey);\n    return this.activatedInput;\n  }\n  /**\n   * For the specified input property key, validate it is defined (used in the markup)\n   * If not see if a overlapping mediaQuery-related input key fallback has been defined\n   *\n   * NOTE: scans in the order defined by activeOverLaps (largest viewport ranges -> smallest ranges)\n   * @param {?} inputKey\n   * @return {?}\n   */\n  _validateInputKey(inputKey) {\n    /** @type {?} */\n    let isMissingKey = key => !this._keyInUse(key);\n    if (isMissingKey(inputKey)) {\n      this.mediaMonitor.activeOverlaps.some(bp => {\n        /** @type {?} */\n        let key = this._options.baseKey + bp.suffix;\n        if (!isMissingKey(key)) {\n          inputKey = key;\n          return true; // exit .some()\n        }\n\n        return false;\n      });\n    }\n    return inputKey;\n  }\n  /**\n   * Get the value (if any) for the directive instances \\@Input property (aka key)\n   * @param {?} key\n   * @return {?}\n   */\n  _lookupKeyValue(key) {\n    return this._options.inputKeys[key];\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Abstract base class for the Layout API styling directives.\n * @abstract\n */\nclass BaseDirective {\n  /**\n   * @param {?} _mediaMonitor\n   * @param {?} _elementRef\n   * @param {?} _styler\n   */\n  constructor(_mediaMonitor, _elementRef, _styler) {\n    this._mediaMonitor = _mediaMonitor;\n    this._elementRef = _elementRef;\n    this._styler = _styler;\n    /**\n     * Dictionary of input keys with associated values\n     */\n    this._inputMap = {};\n    /**\n     * Has the `ngOnInit()` method fired\n     *\n     * Used to allow *ngFor tasks to finish and support queries like\n     * getComputedStyle() during ngOnInit().\n     */\n    this._hasInitialized = false;\n  }\n  /**\n   * @return {?}\n   */\n  get hasMediaQueryListener() {\n    return !!this._mqActivation;\n  }\n  /**\n   * Imperatively determine the current activated [input] value;\n   * if called before ngOnInit() this will return `undefined`\n   * @return {?}\n   */\n  get activatedValue() {\n    return this._mqActivation ? this._mqActivation.activatedInput : undefined;\n  }\n  /**\n   * Change the currently activated input value and force-update\n   * the injected CSS (by-passing change detection).\n   *\n   * NOTE: Only the currently activated input value will be modified;\n   *       other input values will NOT be affected.\n   * @param {?} value\n   * @return {?}\n   */\n  set activatedValue(value) {\n    /** @type {?} */\n    let key = 'baseKey';\n    /** @type {?} */\n    let previousVal;\n    if (this._mqActivation) {\n      key = this._mqActivation.activatedInputKey;\n      previousVal = this._inputMap[key];\n      this._inputMap[key] = value;\n    }\n    /** @type {?} */\n    let change = new SimpleChange(previousVal, value, false);\n    this.ngOnChanges( /** @type {?} */{\n      [key]: change\n    });\n  }\n  /**\n   * Does this directive have 1 or more responsive keys defined\n   * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n   * @param {?} baseKey\n   * @return {?}\n   */\n  hasResponsiveAPI(baseKey) {\n    /** @type {?} */\n    const totalKeys = Object.keys(this._inputMap).length;\n    /** @type {?} */\n    const baseValue = this._inputMap[baseKey];\n    return totalKeys - (!!baseValue ? 1 : 0) > 0;\n  }\n  /**\n   * Use post-component-initialization event to perform extra\n   * querying such as computed Display style\n   * @return {?}\n   */\n  ngOnInit() {\n    this._hasInitialized = true;\n  }\n  /**\n   * @param {?} change\n   * @return {?}\n   */\n  ngOnChanges(change) {\n    throw new Error(`BaseDirective::ngOnChanges should be overridden in subclass: ${change}`);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._mqActivation) {\n      this._mqActivation.destroy();\n    }\n    delete this._mediaMonitor;\n  }\n  /**\n   * Access to host element's parent DOM node\n   * @return {?}\n   */\n  get parentElement() {\n    return this._elementRef.nativeElement.parentNode;\n  }\n  /**\n   * @return {?}\n   */\n  get nativeElement() {\n    return this._elementRef.nativeElement;\n  }\n  /**\n   * Access the current value (if any) of the \\@Input property\n   * @param {?} key\n   * @return {?}\n   */\n  _queryInput(key) {\n    return this._inputMap[key];\n  }\n  /**\n   * Was the directive's default selector used ?\n   * If not, use the fallback value!\n   * @param {?} key\n   * @param {?} fallbackVal\n   * @return {?}\n   */\n  _getDefaultVal(key, fallbackVal) {\n    /** @type {?} */\n    let val = this._queryInput(key);\n    /** @type {?} */\n    let hasDefaultVal = val !== undefined && val !== null;\n    return hasDefaultVal && val !== '' ? val : fallbackVal;\n  }\n  /**\n   * Quick accessor to the current HTMLElement's `display` style\n   * Note: this allows us to preserve the original style\n   * and optional restore it when the mediaQueries deactivate\n   * @param {?=} source\n   * @return {?}\n   */\n  _getDisplayStyle(source = this.nativeElement) {\n    /** @type {?} */\n    const query = 'display';\n    return this._styler.lookupStyle(source, query);\n  }\n  /**\n   * Quick accessor to raw attribute value on the target DOM element\n   * @param {?} attribute\n   * @param {?=} source\n   * @return {?}\n   */\n  _getAttributeValue(attribute, source = this.nativeElement) {\n    return this._styler.lookupAttributeValue(source, attribute);\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   * @param {?} target\n   * @param {?=} addIfMissing\n   * @return {?}\n   */\n  _getFlexFlowDirection(target, addIfMissing = false) {\n    /** @type {?} */\n    let value = 'row';\n    /** @type {?} */\n    let hasInlineValue = '';\n    if (target) {\n      [value, hasInlineValue] = this._styler.getFlowDirection(target);\n      if (!hasInlineValue && addIfMissing) {\n        /** @type {?} */\n        const style = buildLayoutCSS(value);\n        /** @type {?} */\n        const elements = [target];\n        this._styler.applyStyleToElements(style, elements);\n      }\n    }\n    return value.trim() || 'row';\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   * @param {?} style\n   * @param {?=} value\n   * @param {?=} element\n   * @return {?}\n   */\n  _applyStyleToElement(style, value, element = this.nativeElement) {\n    this._styler.applyStyleToElement(element, style, value);\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   * @param {?} style\n   * @param {?} elements\n   * @return {?}\n   */\n  _applyStyleToElements(style, elements) {\n    this._styler.applyStyleToElements(style, elements);\n  }\n  /**\n   *  Save the property value; which may be a complex object.\n   *  Complex objects support property chains\n   * @param {?=} key\n   * @param {?=} source\n   * @return {?}\n   */\n  _cacheInput(key, source) {\n    if (typeof source === 'object') {\n      for (let prop in source) {\n        this._inputMap[prop] = source[prop];\n      }\n    } else {\n      if (!!key) {\n        this._inputMap[key] = source;\n      }\n    }\n  }\n  /**\n   *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n   *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n   *  (or closest match).\n   * @param {?} key\n   * @param {?} defaultValue\n   * @param {?} onMediaQueryChange\n   * @return {?}\n   */\n  _listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange) {\n    // tslint:disable-line:max-line-length\n    if (!this._mqActivation) {\n      /** @type {?} */\n      let keyOptions = new KeyOptions(key, defaultValue, this._inputMap);\n      this._mqActivation = new ResponsiveActivation(keyOptions, this._mediaMonitor, change => onMediaQueryChange(change));\n    }\n    return this._mqActivation;\n  }\n  /**\n   * Special accessor to query for all child 'element' nodes regardless of type, class, etc\n   * @return {?}\n   */\n  get childrenNodes() {\n    /** @type {?} */\n    const obj = this.nativeElement.children;\n    /** @type {?} */\n    const buffer = [];\n    // iterate backwards ensuring that length is an UInt32\n    for (let i = obj.length; i--;) {\n      buffer[i] = obj[i];\n    }\n    return buffer;\n  }\n  /**\n   * Fast validator for presence of attribute on the host element\n   * @param {?} key\n   * @return {?}\n   */\n  hasKeyValue(key) {\n    return (/** @type {?} */this._mqActivation.hasKeyValue(key)\n    );\n  }\n  /**\n   * @return {?}\n   */\n  get hasInitialized() {\n    return this._hasInitialized;\n  }\n}\nBaseDirective.Éµfac = function BaseDirective_Factory(t) {\n  Éµngcc0.ÉµÉµinvalidFactory();\n};\nBaseDirective.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n  type: BaseDirective,\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Adapter to the BaseDirective abstract class so it can be used via composition.\n * @see BaseDirective\n */\nclass BaseDirectiveAdapter extends BaseDirective {\n  /**\n   * BaseDirectiveAdapter constructor\n   * @param {?} _baseKey\n   * @param {?} _mediaMonitor\n   * @param {?} _elementRef\n   * @param {?} _styler\n   */\n  constructor(_baseKey,\n  // non-responsive @Input property name\n  // non-responsive @Input property name\n  _mediaMonitor, _elementRef, _styler) {\n    super(_mediaMonitor, _elementRef, _styler);\n    this._baseKey = _baseKey;\n    this._mediaMonitor = _mediaMonitor;\n    this._elementRef = _elementRef;\n    this._styler = _styler;\n  }\n  /**\n   * Accessor to determine which \\@Input property is \"active\"\n   * e.g. which property value will be used.\n   * @return {?}\n   */\n  get activeKey() {\n    /** @type {?} */\n    let mqa = this._mqActivation;\n    /** @type {?} */\n    let key = mqa ? mqa.activatedInputKey : this._baseKey;\n    // Note: ClassDirective::SimpleChanges uses 'klazz' instead of 'class' as a key\n    return key === 'class' ? 'klazz' : key;\n  }\n  /**\n   * Hash map of all \\@Input keys/values defined/used\n   * @return {?}\n   */\n  get inputMap() {\n    return this._inputMap;\n  }\n  /**\n   * @see BaseDirective._mqActivation\n   * @return {?}\n   */\n  get mqActivation() {\n    return (/** @type {?} */this._mqActivation\n    );\n  }\n  /**\n   * Does this directive have 1 or more responsive keys defined\n   * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n   * @return {?}\n   */\n  hasResponsiveAPI() {\n    return super.hasResponsiveAPI(this._baseKey);\n  }\n  /**\n   * @see BaseDirective._queryInput\n   * @param {?} key\n   * @return {?}\n   */\n  queryInput(key) {\n    return key ? this._queryInput(key) : undefined;\n  }\n  /**\n   *  Save the property value.\n   * @param {?=} key\n   * @param {?=} source\n   * @param {?=} cacheRaw\n   * @return {?}\n   */\n  cacheInput(key, source, cacheRaw = false) {\n    if (cacheRaw) {\n      this._cacheInputRaw(key, source);\n    } else if (Array.isArray(source)) {\n      this._cacheInputArray(key, source);\n    } else if (typeof source === 'object') {\n      this._cacheInputObject(key, source);\n    } else if (typeof source === 'string') {\n      this._cacheInputString(key, source);\n    } else {\n      throw new Error(`Invalid class value '${key}' provided. Did you want to cache the raw value?`);\n    }\n  }\n  /**\n   * @see BaseDirective._listenForMediaQueryChanges\n   * @param {?} key\n   * @param {?} defaultValue\n   * @param {?} onMediaQueryChange\n   * @return {?}\n   */\n  listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange) {\n    return this._listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange);\n  }\n  /**\n   * No implicit transforms of the source.\n   * Required when caching values expected later for KeyValueDiffers\n   * @param {?=} key\n   * @param {?=} source\n   * @return {?}\n   */\n  _cacheInputRaw(key, source) {\n    if (key) {\n      this._inputMap[key] = source;\n    }\n  }\n  /**\n   *  Save the property value for Array values.\n   * @param {?=} key\n   * @param {?=} source\n   * @return {?}\n   */\n  _cacheInputArray(key = '', source) {\n    this._inputMap[key] = source ? source.join(' ') : '';\n  }\n  /**\n   *  Save the property value for key/value pair values.\n   * @param {?=} key\n   * @param {?=} source\n   * @return {?}\n   */\n  _cacheInputObject(key = '', source) {\n    /** @type {?} */\n    let classes = [];\n    if (source) {\n      for (let prop in source) {\n        if (!!source[prop]) {\n          classes.push(prop);\n        }\n      }\n    }\n    this._inputMap[key] = classes.join(' ');\n  }\n  /**\n   *  Save the property value for string values.\n   * @param {?=} key\n   * @param {?=} source\n   * @return {?}\n   */\n  _cacheInputString(key = '', source) {\n    this._inputMap[key] = source;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n  /**\n   * @param {?} _zone\n   * @param {?} _platformId\n   * @param {?} _document\n   * @param {?} _breakpoints\n   */\n  constructor(_zone, _platformId, _document, _breakpoints) {\n    super(_zone, _platformId, _document);\n    this._breakpoints = _breakpoints;\n    /**\n     * Special flag used to test BreakPoint registrations with MatchMedia\n     */\n    this.autoRegisterQueries = true;\n    /**\n     * Allow fallback to overlapping mediaQueries to determine\n     * activatedInput(s).\n     */\n    this.useOverlaps = false;\n    this._registry = new Map();\n    this._actives = [];\n    this._actives = [];\n  }\n  /**\n   * Easy method to clear all listeners for all mediaQueries\n   * @return {?}\n   */\n  clearAll() {\n    this._registry.forEach(mql => {\n      mql.destroy();\n    });\n    this._registry.clear();\n    this.useOverlaps = false;\n  }\n  /**\n   * Feature to support manual, simulated activation of a mediaQuery.\n   * @param {?} mediaQuery\n   * @param {?=} useOverlaps\n   * @return {?}\n   */\n  activate(mediaQuery, useOverlaps = false) {\n    useOverlaps = useOverlaps || this.useOverlaps;\n    mediaQuery = this._validateQuery(mediaQuery);\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n    return this.hasActivated;\n  }\n  /**\n   * Converts an optional mediaQuery alias to a specific, valid mediaQuery\n   * @param {?} queryOrAlias\n   * @return {?}\n   */\n  _validateQuery(queryOrAlias) {\n    /** @type {?} */\n    let bp = this._breakpoints.findByAlias(queryOrAlias);\n    if (bp) {\n      queryOrAlias = bp.mediaQuery;\n    }\n    return queryOrAlias;\n  }\n  /**\n   * Manually activate any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   * @param {?} mediaQuery\n   * @param {?} useOverlaps\n   * @return {?}\n   */\n  _activateWithOverlaps(mediaQuery, useOverlaps) {\n    if (useOverlaps) {\n      /** @type {?} */\n      let bp = this._breakpoints.findByQuery(mediaQuery);\n      /** @type {?} */\n      let alias = bp ? bp.alias : 'unknown';\n      // Simulate activation of overlapping lt-<XXX> ranges\n      switch (alias) {\n        case 'lg':\n          this._activateByAlias('lt-xl');\n          break;\n        case 'md':\n          this._activateByAlias('lt-xl, lt-lg');\n          break;\n        case 'sm':\n          this._activateByAlias('lt-xl, lt-lg, lt-md');\n          break;\n        case 'xs':\n          this._activateByAlias('lt-xl, lt-lg, lt-md, lt-sm');\n          break;\n      }\n      // Simulate activate of overlapping gt-<xxxx> mediaQuery ranges\n      switch (alias) {\n        case 'xl':\n          this._activateByAlias('gt-lg, gt-md, gt-sm, gt-xs');\n          break;\n        case 'lg':\n          this._activateByAlias('gt-md, gt-sm, gt-xs');\n          break;\n        case 'md':\n          this._activateByAlias('gt-sm, gt-xs');\n          break;\n        case 'sm':\n          this._activateByAlias('gt-xs');\n          break;\n      }\n    }\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n  /**\n   *\n   * @param {?} aliases\n   * @return {?}\n   */\n  _activateByAlias(aliases) {\n    /** @type {?} */\n    let activate = alias => {\n      /** @type {?} */\n      let bp = this._breakpoints.findByAlias(alias);\n      this._activateByQuery(bp ? bp.mediaQuery : alias);\n    };\n    aliases.split(',').forEach(alias => activate(alias.trim()));\n  }\n  /**\n   *\n   * @param {?} mediaQuery\n   * @return {?}\n   */\n  _activateByQuery(mediaQuery) {\n    /** @type {?} */\n    let mql = /** @type {?} */this._registry.get(mediaQuery);\n    /** @type {?} */\n    let alreadyAdded = this._actives.reduce((found, it) => {\n      return found || mql && it.media === mql.media;\n    }, false);\n    if (mql && !alreadyAdded) {\n      this._actives.push(mql.activate());\n    }\n    return this.hasActivated;\n  }\n  /**\n   * Deactivate all current Mock MQLs\n   * @return {?}\n   */\n  _deactivateAll() {\n    if (this._actives.length) {\n      // Deactivate all current MQLs and reset the buffer\n      for (const it of this._actives) {\n        it.deactivate();\n      }\n      this._actives = [];\n    }\n    return this;\n  }\n  /**\n   * Insure the mediaQuery is registered with MatchMedia\n   * @param {?} mediaQuery\n   * @return {?}\n   */\n  _registerMediaQuery(mediaQuery) {\n    if (!this._registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   * @param {?} query\n   * @return {?}\n   */\n  _buildMQL(query) {\n    return new MockMediaQueryList(query);\n  }\n  /**\n   * @return {?}\n   */\n  get hasActivated() {\n    return this._actives.length > 0;\n  }\n}\nMockMatchMedia.Éµfac = function MockMatchMedia_Factory(t) {\n  return new (t || MockMatchMedia)(Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµinject(PLATFORM_ID), Éµngcc0.ÉµÉµinject(DOCUMENT), Éµngcc0.ÉµÉµinject(BreakPointRegistry));\n};\nMockMatchMedia.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: MockMatchMedia,\n  factory: MockMatchMedia.Éµfac\n});\n/** @nocollapse */\nMockMatchMedia.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: BreakPointRegistry\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MockMatchMedia, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Éµngcc0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: BreakPointRegistry\n    }];\n  }, null);\n})();\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList {\n  /**\n   * @param {?} _mediaQuery\n   */\n  constructor(_mediaQuery) {\n    this._mediaQuery = _mediaQuery;\n    this._isActive = false;\n    this._listeners = [];\n    this.onchange = null;\n  }\n  /**\n   * @return {?}\n   */\n  get matches() {\n    return this._isActive;\n  }\n  /**\n   * @return {?}\n   */\n  get media() {\n    return this._mediaQuery;\n  }\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   * @return {?}\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n  /**\n   * Notify all listeners that 'matches === TRUE'\n   * @return {?}\n   */\n  activate() {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach(callback => {\n        /** @type {?} */\n        const cb = /** @type {?} */callback;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n  /**\n   * Notify all listeners that 'matches === false'\n   * @return {?}\n   */\n  deactivate() {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach(callback => {\n        /** @type {?} */\n        const cb = /** @type {?} */callback;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n  /**\n   * Add a listener to our internal list to activate later\n   * @param {?} listener\n   * @return {?}\n   */\n  addListener(listener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      /** @type {?} */\n      const cb = /** @type {?} */listener;\n      cb.call(null, this);\n    }\n  }\n  /**\n   * Don't need to remove listeners in the testing environment\n   * @param {?} _\n   * @return {?}\n   */\n  removeListener(_) {}\n  /**\n   * @param {?} _\n   * @param {?} __\n   * @param {?=} ___\n   * @return {?}\n   */\n  addEventListener(_, __, ___) {}\n  /**\n   * @param {?} _\n   * @param {?} __\n   * @param {?=} ___\n   * @return {?}\n   */\n  removeEventListener(_, __, ___) {}\n  /**\n   * @param {?} _\n   * @return {?}\n   */\n  dispatchEvent(_) {\n    return false;\n  }\n}\n/** *\n * Pre-configured provider for MockMatchMedia\n  @type {?} */\nconst MockMatchMediaProvider = {\n  // tslint:disable-line:variable-name\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Special server-only class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass ServerMediaQueryList {\n  /**\n   * @param {?} _mediaQuery\n   */\n  constructor(_mediaQuery) {\n    this._mediaQuery = _mediaQuery;\n    this._isActive = false;\n    this._listeners = [];\n    this.onchange = null;\n  }\n  /**\n   * @return {?}\n   */\n  get matches() {\n    return this._isActive;\n  }\n  /**\n   * @return {?}\n   */\n  get media() {\n    return this._mediaQuery;\n  }\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   * @return {?}\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n  /**\n   * Notify all listeners that 'matches === TRUE'\n   * @return {?}\n   */\n  activate() {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach(callback => {\n        /** @type {?} */\n        const cb = /** @type {?} */callback;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n  /**\n   * Notify all listeners that 'matches === false'\n   * @return {?}\n   */\n  deactivate() {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach(callback => {\n        /** @type {?} */\n        const cb = /** @type {?} */callback;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n  /**\n   * Add a listener to our internal list to activate later\n   * @param {?} listener\n   * @return {?}\n   */\n  addListener(listener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      /** @type {?} */\n      const cb = /** @type {?} */listener;\n      cb.call(null, this);\n    }\n  }\n  /**\n   * Don't need to remove listeners in the server environment\n   * @param {?} _\n   * @return {?}\n   */\n  removeListener(_) {}\n  /**\n   * @param {?} _\n   * @param {?} __\n   * @param {?=} ___\n   * @return {?}\n   */\n  addEventListener(_, __, ___) {}\n  /**\n   * @param {?} _\n   * @param {?} __\n   * @param {?=} ___\n   * @return {?}\n   */\n  removeEventListener(_, __, ___) {}\n  /**\n   * @param {?} _\n   * @return {?}\n   */\n  dispatchEvent(_) {\n    return false;\n  }\n}\n/**\n * Special server-only implementation of MatchMedia that uses the above\n * ServerMediaQueryList as its internal representation\n *\n * Also contains methods to activate and deactivate breakpoints\n */\nclass ServerMatchMedia extends MatchMedia {\n  /**\n   * @param {?} _zone\n   * @param {?} _platformId\n   * @param {?} _document\n   */\n  constructor(_zone, _platformId, _document) {\n    super(_zone, _platformId, _document);\n    this._zone = _zone;\n    this._platformId = _platformId;\n    this._document = _document;\n    this._registry = new Map();\n    this._source = new BehaviorSubject(new MediaChange(true));\n    this._observable$ = this._source.asObservable();\n  }\n  /**\n   * Activate the specified breakpoint if we're on the server, no-op otherwise\n   * @param {?} bp\n   * @return {?}\n   */\n  activateBreakpoint(bp) {\n    /** @type {?} */\n    const lookupBreakpoint = this._registry.get(bp.mediaQuery);\n    if (lookupBreakpoint) {\n      lookupBreakpoint.activate();\n    }\n  }\n  /**\n   * Deactivate the specified breakpoint if we're on the server, no-op otherwise\n   * @param {?} bp\n   * @return {?}\n   */\n  deactivateBreakpoint(bp) {\n    /** @type {?} */\n    const lookupBreakpoint = this._registry.get(bp.mediaQuery);\n    if (lookupBreakpoint) {\n      lookupBreakpoint.deactivate();\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   * @param {?} query\n   * @return {?}\n   */\n  _buildMQL(query) {\n    return new ServerMediaQueryList(query);\n  }\n}\nServerMatchMedia.Éµfac = function ServerMatchMedia_Factory(t) {\n  return new (t || ServerMatchMedia)(Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµinject(PLATFORM_ID), Éµngcc0.ÉµÉµinject(DOCUMENT));\n};\nServerMatchMedia.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: ServerMatchMedia,\n  factory: ServerMatchMedia.Éµfac\n});\n/** @nocollapse */\nServerMatchMedia.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(ServerMatchMedia, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Éµngcc0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * MediaMonitor uses the MatchMedia service to observe mediaQuery changes (both activations and\n * deactivations). These changes are are published as MediaChange notifications.\n *\n * Note: all notifications will be performed within the\n * ng Zone to trigger change detections and component updates.\n *\n * It is the MediaMonitor that:\n *  - auto registers all known breakpoints\n *  - injects alias information into each raw MediaChange event\n *  - provides accessor to the currently active BreakPoint\n *  - publish list of overlapping BreakPoint(s); used by ResponsiveActivation\n */\nclass MediaMonitor {\n  /**\n   * @param {?} _breakpoints\n   * @param {?} _matchMedia\n   */\n  constructor(_breakpoints, _matchMedia) {\n    this._breakpoints = _breakpoints;\n    this._matchMedia = _matchMedia;\n    this._registerBreakpoints();\n  }\n  /**\n   * Read-only accessor to the list of breakpoints configured in the BreakPointRegistry provider\n   * @return {?}\n   */\n  get breakpoints() {\n    return [...this._breakpoints.items];\n  }\n  /**\n   * @return {?}\n   */\n  get activeOverlaps() {\n    /** @type {?} */\n    let items = this._breakpoints.overlappings.reverse();\n    return items.filter(bp => {\n      return this._matchMedia.isActive(bp.mediaQuery);\n    });\n  }\n  /**\n   * @return {?}\n   */\n  get active() {\n    /** @type {?} */\n    let found = null;\n    /** @type {?} */\n    let items = this.breakpoints.reverse();\n    items.forEach(bp => {\n      if (bp.alias !== '') {\n        if (!found && this._matchMedia.isActive(bp.mediaQuery)) {\n          found = bp;\n        }\n      }\n    });\n    /** @type {?} */\n    let first = this.breakpoints[0];\n    return found || (this._matchMedia.isActive(first.mediaQuery) ? first : null);\n  }\n  /**\n   * For the specified mediaQuery alias, is the mediaQuery range active?\n   * @param {?} alias\n   * @return {?}\n   */\n  isActive(alias) {\n    /** @type {?} */\n    let bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n    return this._matchMedia.isActive(bp ? bp.mediaQuery : alias);\n  }\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * If specific breakpoint is observed, only return *activated* events\n   * otherwise return all events for BOTH activated + deactivated changes.\n   * @param {?=} alias\n   * @return {?}\n   */\n  observe(alias) {\n    /** @type {?} */\n    let bp = this._breakpoints.findByAlias(alias || '') || this._breakpoints.findByQuery(alias || '');\n    /** @type {?} */\n    let hasAlias = change => bp ? change.mqAlias !== '' : true;\n    /** @type {?} */\n    let media$ = this._matchMedia.observe(bp ? bp.mediaQuery : alias);\n    return media$.pipe(map(change => mergeAlias(change, bp)), filter(hasAlias));\n  }\n  /**\n   * Immediate calls to matchMedia() to establish listeners\n   * and prepare for immediate subscription notifications\n   * @return {?}\n   */\n  _registerBreakpoints() {\n    /** @type {?} */\n    let queries = this._breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this._matchMedia.registerQuery(queries);\n  }\n}\nMediaMonitor.Éµfac = function MediaMonitor_Factory(t) {\n  return new (t || MediaMonitor)(Éµngcc0.ÉµÉµinject(BreakPointRegistry), Éµngcc0.ÉµÉµinject(MatchMedia));\n};\nMediaMonitor.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: MediaMonitor,\n  factory: MediaMonitor.Éµfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nMediaMonitor.ctorParameters = () => [{\n  type: BreakPointRegistry\n}, {\n  type: MatchMedia\n}];\n/** @nocollapse */\nMediaMonitor.ngInjectableDef = defineInjectable({\n  factory: function MediaMonitor_Factory() {\n    return new MediaMonitor(inject(BreakPointRegistry), inject(MatchMedia));\n  },\n  token: MediaMonitor,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MediaMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n * @param {?} target\n * @return {?}\n */\nfunction applyCssPrefixes(target) {\n  for (let key in target) {\n    /** @type {?} */\n    let value = target[key] || '';\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = ['-webkit-flex', 'flex'];\n        } else if (value === 'inline-flex') {\n          target['display'] = ['-webkit-inline-flex', 'inline-flex'];\n        } else {\n          target['display'] = value;\n        }\n        break;\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n        break;\n    }\n  }\n  return target;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass StyleUtils {\n  /**\n   * @param {?} _serverStylesheet\n   * @param {?} _serverModuleLoaded\n   * @param {?} _platformId\n   * @param {?} layoutConfig\n   */\n  constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n    this._serverStylesheet = _serverStylesheet;\n    this._serverModuleLoaded = _serverModuleLoaded;\n    this._platformId = _platformId;\n    this.layoutConfig = layoutConfig;\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   * @param {?} element\n   * @param {?} style\n   * @param {?=} value\n   * @return {?}\n   */\n  applyStyleToElement(element, style, value = null) {\n    /** @type {?} */\n    let styles = {};\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   * @param {?} style\n   * @param {?=} elements\n   * @return {?}\n   */\n  applyStyleToElements(style, elements = []) {\n    /** @type {?} */\n    const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    elements.forEach(el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   * @param {?} target\n   * @return {?}\n   */\n  getFlowDirection(target) {\n    /** @type {?} */\n    const query = 'flex-direction';\n    /** @type {?} */\n    let value = this.lookupStyle(target, query);\n    if (value === FALLBACK_STYLE) {\n      value = '';\n    }\n    /** @type {?} */\n    const hasInlineValue = this.lookupInlineStyle(target, query) || isPlatformServer(this._platformId) && this._serverModuleLoaded ? value : '';\n    return [value || 'row', hasInlineValue];\n  }\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   * @param {?} element\n   * @param {?} attribute\n   * @return {?}\n   */\n  lookupAttributeValue(element, attribute) {\n    return element.getAttribute(attribute) || '';\n  }\n  /**\n   * Find the DOM element's inline style value (if any)\n   * @param {?} element\n   * @param {?} styleName\n   * @return {?}\n   */\n  lookupInlineStyle(element, styleName) {\n    return isPlatformBrowser(this._platformId) ? element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n  }\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   * @param {?} element\n   * @param {?} styleName\n   * @param {?=} inlineOnly\n   * @return {?}\n   */\n  lookupStyle(element, styleName, inlineOnly = false) {\n    /** @type {?} */\n    let value = '';\n    if (element) {\n      /** @type {?} */\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    }\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n    return value ? value.trim() : FALLBACK_STYLE;\n  }\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   * @param {?} styles\n   * @param {?} element\n   * @return {?}\n   */\n  _applyMultiValueStyleToElement(styles, element) {\n    Object.keys(styles).sort().forEach(key => {\n      /** @type {?} */\n      const el = styles[key];\n      /** @type {?} */\n      const values = Array.isArray(el) ? el : [el];\n      values.sort();\n      for (let value of values) {\n        value = value ? value + '' : '';\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          isPlatformBrowser(this._platformId) ? element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n  /**\n   * @param {?} element\n   * @param {?} styleName\n   * @param {?=} styleValue\n   * @return {?}\n   */\n  _setServerStyle(element, styleName, styleValue) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    /** @type {?} */\n    const styleMap = this._readStyleAttribute(element);\n    styleMap[styleName] = styleValue || '';\n    this._writeStyleAttribute(element, styleMap);\n  }\n  /**\n   * @param {?} element\n   * @param {?} styleName\n   * @return {?}\n   */\n  _getServerStyle(element, styleName) {\n    /** @type {?} */\n    const styleMap = this._readStyleAttribute(element);\n    return styleMap[styleName] || '';\n  }\n  /**\n   * @param {?} element\n   * @return {?}\n   */\n  _readStyleAttribute(element) {\n    /** @type {?} */\n    const styleMap = {};\n    /** @type {?} */\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n      /** @type {?} */\n      const styleList = styleAttribute.split(/;+/g);\n      for (let i = 0; i < styleList.length; i++) {\n        /** @type {?} */\n        const style = styleList[i].trim();\n        if (style.length > 0) {\n          /** @type {?} */\n          const colonIndex = style.indexOf(':');\n          if (colonIndex === -1) {\n            throw new Error(`Invalid CSS style: ${style}`);\n          }\n          /** @type {?} */\n          const name = style.substr(0, colonIndex).trim();\n          styleMap[name] = style.substr(colonIndex + 1).trim();\n        }\n      }\n    }\n    return styleMap;\n  }\n  /**\n   * @param {?} element\n   * @param {?} styleMap\n   * @return {?}\n   */\n  _writeStyleAttribute(element, styleMap) {\n    /** @type {?} */\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n      /** @type {?} */\n      const newValue = styleMap[key];\n      if (newValue) {\n        styleAttrValue += key + ':' + styleMap[key] + ';';\n      }\n    }\n    element.setAttribute('style', styleAttrValue);\n  }\n}\nStyleUtils.Éµfac = function StyleUtils_Factory(t) {\n  return new (t || StyleUtils)(Éµngcc0.ÉµÉµinject(StylesheetMap, 8), Éµngcc0.ÉµÉµinject(SERVER_TOKEN, 8), Éµngcc0.ÉµÉµinject(PLATFORM_ID), Éµngcc0.ÉµÉµinject(LAYOUT_CONFIG));\n};\nStyleUtils.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: StyleUtils,\n  factory: StyleUtils.Éµfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nStyleUtils.ctorParameters = () => [{\n  type: StylesheetMap,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: Boolean,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [SERVER_TOKEN]\n  }]\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [LAYOUT_CONFIG]\n  }]\n}];\n/** @nocollapse */\nStyleUtils.ngInjectableDef = defineInjectable({\n  factory: function StyleUtils_Factory() {\n    return new StyleUtils(inject(StylesheetMap, 8), inject(SERVER_TOKEN, 8), inject(PLATFORM_ID), inject(LAYOUT_CONFIG));\n  },\n  token: StyleUtils,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(StyleUtils, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: StylesheetMap,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [SERVER_TOKEN]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/** @type {?} */\nconst FALLBACK_STYLE = 'block';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n * @param {?} basis\n * @param {?=} grow\n * @param {?=} shrink\n * @return {?}\n */\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n  /** @type {?} */\n  let parts = [grow, shrink, basis];\n  /** @type {?} */\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    /** @type {?} */\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    /** @type {?} */\n    let matches = basis.split(' ');\n    parts = matches.length === 3 ? matches : [grow, shrink, basis];\n  }\n  return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n * @param {?} calc\n * @return {?}\n */\nfunction _validateCalcValue(calc) {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { removeStyles, BROWSER_PROVIDER, CLASS_NAME, CoreModule, MediaChange, StylesheetMap, DEFAULT_CONFIG, LAYOUT_CONFIG, SERVER_TOKEN, BREAKPOINT, BaseDirective, BaseDirectiveAdapter, RESPONSIVE_ALIASES, DEFAULT_BREAKPOINTS, ScreenTypes, ORIENTATION_BREAKPOINTS, BreakPointRegistry, BREAKPOINTS, MatchMedia, MockMatchMedia, MockMediaQueryList, MockMatchMediaProvider, ServerMediaQueryList, ServerMatchMedia, MediaMonitor, ObservableMedia, MediaService, ObservableMediaProvider, KeyOptions, ResponsiveActivation, StyleUtils, validateBasis };","map":{"version":3,"names":["APP_BOOTSTRAP_LISTENER","PLATFORM_ID","InjectionToken","inject","Injectable","Inject","NgModule","NgZone","SimpleChange","Optional","defineInjectable","DOCUMENT","isPlatformBrowser","isPlatformServer","BehaviorSubject","filter","map","Éµngcc0","removeStyles","_document","platformId","elements","Array","from","querySelectorAll","CLASS_NAME","classRegex","forEach","el","classList","contains","parentNode","removeChild","className","replace","BROWSER_PROVIDER","provide","useFactory","deps","multi","BREAKPOINT","providedIn","factory","RESPONSIVE_ALIASES","DEFAULT_BREAKPOINTS","alias","mediaQuery","overlapping","HANDSET_PORTRAIT","HANDSET_LANDSCAPE","TABLET_LANDSCAPE","TABLET_PORTRAIT","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","ORIENTATION_BREAKPOINTS","HANDSET","TABLET","WEB","extendObject","dest","sources","TypeError","source","key","hasOwnProperty","ALIAS_DELIMITERS","firstUpperCase","part","first","length","charAt","remainder","slice","toUpperCase","camelCase","name","split","join","validateSuffixes","list","bp","suffix","mergeByAlias","defaults","custom","dict","Object","keys","k","DEFAULT_CONFIG","addFlexToParent","addOrientationBps","disableDefaultBps","disableVendorPrefixes","serverLoaded","useColumnBasisZero","LAYOUT_CONFIG","BREAKPOINTS","breakpoints","layoutConfig","bpFlattenArray","concat","apply","v","isArray","builtIns","BreakPointRegistry","constructor","_registry","items","sortedItems","overlaps","it","nonOverlaps","findByAlias","find","findByQuery","query","overlappings","aliases","suffixes","Éµfac","BreakPointRegistry_Factory","t","ÉµÉµinject","Éµprov","ÉµÉµdefineInjectable","token","ctorParameters","type","decorators","args","ngInjectableDef","ngDevMode","ÉµsetClassMetadata","MediaChange","matches","mqAlias","property","clone","MatchMedia","_zone","_platformId","Map","_source","_observable$","asObservable","isActive","mql","get","observe","registerQuery","pipe","change","normalizeQuery","_prepareQueryCSS","onMQLEvent","e","run","next","_buildMQL","addListener","set","canListen","window","matchMedia","media","removeListener","mediaQueries","ALL_STYLES","styleEl","createElement","setAttribute","styleSheet","cssText","appendChild","createTextNode","head","mq","console","error","MatchMedia_Factory","undefined","unique","seen","item","mergeAlias","ObservableMedia","MediaService","mediaWatcher","filterOverlaps","_registerBreakPoints","observable$","_buildObservable","_toMediaQuery","subscribe","observerOrNext","complete","queries","self","media$","activationsOnly","addAliasInformation","_findByQuery","excludeOverlaps","_findByAlias","MediaService_Factory","ObservableMediaProvider","useClass","CoreModule","CoreModule_Factory","Éµmod","ÉµÉµdefineNgModule","Éµinj","ÉµÉµdefineInjector","providers","StylesheetMap","stylesheet","addStyleToElement","element","style","value","clearStyles","clear","getStyleForElement","styleName","styles","StylesheetMap_Factory","SERVER_TOKEN","INLINE","LAYOUT_VALUES","buildLayoutCSS","direction","wrap","isInline","validateValue","buildCSS","toLowerCase","inline","x","validateWrapValue","KeyOptions","baseKey","defaultValue","inputKeys","ResponsiveActivation","_options","_mediaMonitor","_onMediaChanges","_subscribers","_activatedInputKey","_registryMap","_buildRegistryMap","_configureChangeObservers","registryFromLargest","reverse","mediaMonitor","activatedInputKey","activatedInput","hasKeyValue","_lookupKeyValue","destroy","link","unsubscribe","subscriptions","_keyInUse","buildChanges","push","_onMonitorEvents","_calculateActivatedValue","current","currentKey","newKey","_validateInputKey","inputKey","isMissingKey","activeOverlaps","some","BaseDirective","_elementRef","_styler","_inputMap","_hasInitialized","hasMediaQueryListener","_mqActivation","activatedValue","previousVal","ngOnChanges","hasResponsiveAPI","totalKeys","baseValue","ngOnInit","Error","ngOnDestroy","parentElement","nativeElement","_queryInput","_getDefaultVal","fallbackVal","val","hasDefaultVal","_getDisplayStyle","lookupStyle","_getAttributeValue","attribute","lookupAttributeValue","_getFlexFlowDirection","target","addIfMissing","hasInlineValue","getFlowDirection","applyStyleToElements","trim","_applyStyleToElement","applyStyleToElement","_applyStyleToElements","_cacheInput","prop","_listenForMediaQueryChanges","onMediaQueryChange","keyOptions","childrenNodes","obj","children","buffer","i","hasInitialized","BaseDirective_Factory","ÉµÉµinvalidFactory","Éµdir","ÉµÉµdefineDirective","features","ÉµÉµNgOnChangesFeature","BaseDirectiveAdapter","_baseKey","activeKey","mqa","inputMap","mqActivation","queryInput","cacheInput","cacheRaw","_cacheInputRaw","_cacheInputArray","_cacheInputObject","_cacheInputString","listenForMediaQueryChanges","classes","MockMatchMedia","_breakpoints","autoRegisterQueries","useOverlaps","_actives","clearAll","activate","_validateQuery","_deactivateAll","_registerMediaQuery","_activateWithOverlaps","hasActivated","queryOrAlias","_activateByAlias","_activateByQuery","alreadyAdded","reduce","found","deactivate","has","MockMediaQueryList","MockMatchMedia_Factory","_mediaQuery","_isActive","_listeners","onchange","callback","cb","call","listener","indexOf","_","addEventListener","__","___","removeEventListener","dispatchEvent","MockMatchMediaProvider","ServerMediaQueryList","ServerMatchMedia","activateBreakpoint","lookupBreakpoint","deactivateBreakpoint","ServerMatchMedia_Factory","MediaMonitor","_matchMedia","_registerBreakpoints","active","hasAlias","MediaMonitor_Factory","applyCssPrefixes","isNaN","StyleUtils","_serverStylesheet","_serverModuleLoaded","_applyMultiValueStyleToElement","FALLBACK_STYLE","lookupInlineStyle","getAttribute","getPropertyValue","_getServerStyle","inlineOnly","immediateValue","getComputedStyle","sort","values","setProperty","_setServerStyle","styleValue","styleMap","_readStyleAttribute","_writeStyleAttribute","styleAttribute","styleList","colonIndex","substr","styleAttrValue","newValue","StyleUtils_Factory","Boolean","validateBasis","basis","grow","shrink","parts","j","_validateCalcValue","substring","calc"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/flex-layout/__ivy_ngcc__/esm2015/core.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, InjectionToken, inject, Injectable, Inject, NgModule, NgZone, SimpleChange, Optional, defineInjectable } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n * @param {?} _document\n * @param {?} platformId\n * @return {?}\n */\nimport * as Éµngcc0 from '@angular/core';\nfunction removeStyles(_document, platformId) {\n    return () => {\n        if (isPlatformBrowser(platformId)) {\n            /** @type {?} */\n            const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n            /** @type {?} */\n            const classRegex = /\\bflex-layout-.+?\\b/g;\n            elements.forEach(el => {\n                el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n                    el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n            });\n        }\n    };\n}\n/** *\n *  Provider to remove SSR styles on the browser\n  @type {?} */\nconst BROWSER_PROVIDER = {\n    provide: /** @type {?} */ (APP_BOOTSTRAP_LISTENER),\n    useFactory: removeStyles,\n    deps: [DOCUMENT, PLATFORM_ID],\n    multi: true\n};\n/** @type {?} */\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: () => null\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RESPONSIVE_ALIASES = [\n    'xs', 'gt-xs', 'sm', 'gt-sm', 'md', 'gt-md', 'lg', 'gt-lg', 'xl'\n];\n/** @type {?} */\nconst DEFAULT_BREAKPOINTS = [\n    {\n        alias: 'xs',\n        mediaQuery: '(min-width: 0px) and (max-width: 599px)'\n    },\n    {\n        alias: 'gt-xs',\n        overlapping: true,\n        mediaQuery: '(min-width: 600px)'\n    },\n    {\n        alias: 'lt-sm',\n        overlapping: true,\n        mediaQuery: '(max-width: 599px)'\n    },\n    {\n        alias: 'sm',\n        mediaQuery: '(min-width: 600px) and (max-width: 959px)'\n    },\n    {\n        alias: 'gt-sm',\n        overlapping: true,\n        mediaQuery: '(min-width: 960px)'\n    },\n    {\n        alias: 'lt-md',\n        overlapping: true,\n        mediaQuery: '(max-width: 959px)'\n    },\n    {\n        alias: 'md',\n        mediaQuery: '(min-width: 960px) and (max-width: 1279px)'\n    },\n    {\n        alias: 'gt-md',\n        overlapping: true,\n        mediaQuery: '(min-width: 1280px)'\n    },\n    {\n        alias: 'lt-lg',\n        overlapping: true,\n        mediaQuery: '(max-width: 1279px)'\n    },\n    {\n        alias: 'lg',\n        mediaQuery: '(min-width: 1280px) and (max-width: 1919px)'\n    },\n    {\n        alias: 'gt-lg',\n        overlapping: true,\n        mediaQuery: '(min-width: 1920px)'\n    },\n    {\n        alias: 'lt-xl',\n        overlapping: true,\n        mediaQuery: '(max-width: 1919px)'\n    },\n    {\n        alias: 'xl',\n        mediaQuery: '(min-width: 1920px) and (max-width: 5000px)'\n    }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599px)';\n/** @type {?} */\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959px)';\n/** @type {?} */\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279px)';\n/** @type {?} */\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839px)';\n/** @type {?} */\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\n/** @type {?} */\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\n/** @type {?} */\nconst ScreenTypes = {\n    'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n    'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n    'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n    'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n    'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n    'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n    'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}]`,\n    'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n    'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/** *\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n  @type {?} */\nconst ORIENTATION_BREAKPOINTS = [\n    { 'alias': 'handset', 'mediaQuery': ScreenTypes.HANDSET },\n    { 'alias': 'handset.landscape', 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE },\n    { 'alias': 'handset.portrait', 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT },\n    { 'alias': 'tablet', 'mediaQuery': ScreenTypes.TABLET },\n    { 'alias': 'tablet.landscape', 'mediaQuery': ScreenTypes.TABLET },\n    { 'alias': 'tablet.portrait', 'mediaQuery': ScreenTypes.TABLET_PORTRAIT },\n    { 'alias': 'web', 'mediaQuery': ScreenTypes.WEB, overlapping: true },\n    { 'alias': 'web.landscape', 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping: true },\n    { 'alias': 'web.portrait', 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping: true }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nfunction extendObject(dest, ...sources) {\n    if (dest == null) {\n        throw TypeError('Cannot convert undefined or null to object');\n    }\n    for (let source of sources) {\n        if (source != null) {\n            for (let key in source) {\n                if (source.hasOwnProperty(key)) {\n                    dest[key] = source[key];\n                }\n            }\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\n/**\n * @param {?} part\n * @return {?}\n */\nfunction firstUpperCase(part) {\n    /** @type {?} */\n    let first = part.length > 0 ? part.charAt(0) : '';\n    /** @type {?} */\n    let remainder = (part.length > 1) ? part.slice(1) : '';\n    return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param {?} name Text to UpperCamelCase\n * @return {?}\n */\nfunction camelCase(name) {\n    return name\n        .replace(ALIAS_DELIMITERS, '|')\n        .split('|')\n        .map(firstUpperCase)\n        .join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n * @param {?} list\n * @return {?}\n */\nfunction validateSuffixes(list) {\n    list.forEach((bp) => {\n        if (!bp.suffix) {\n            bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n            bp.overlapping = !!bp.overlapping; // ensure default value\n        }\n    });\n    return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n * @param {?} defaults\n * @param {?=} custom\n * @return {?}\n */\nfunction mergeByAlias(defaults, custom = []) {\n    /** @type {?} */\n    const dict = {};\n    defaults.forEach(bp => {\n        dict[bp.alias] = bp;\n    });\n    // Merge custom breakpoints\n    custom.forEach((bp) => {\n        if (dict[bp.alias]) {\n            extendObject(dict[bp.alias], bp);\n        }\n        else {\n            dict[bp.alias] = bp;\n        }\n    });\n    return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n    addFlexToParent: true,\n    addOrientationBps: false,\n    disableDefaultBps: false,\n    disableVendorPrefixes: false,\n    serverLoaded: false,\n    useColumnBasisZero: true,\n};\n/** @type {?} */\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n    providedIn: 'root',\n    factory: () => DEFAULT_CONFIG\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n  @type {?} */\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: () => {\n        /** @type {?} */\n        const breakpoints = inject(BREAKPOINT);\n        /** @type {?} */\n        const layoutConfig = inject(LAYOUT_CONFIG);\n        /** @type {?} */\n        const bpFlattenArray = [].concat.apply([], (breakpoints || [])\n            .map((v) => Array.isArray(v) ? v : [v]));\n        /** @type {?} */\n        const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n            .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n        return mergeByAlias(builtIns, bpFlattenArray);\n    }\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n    /**\n     * @param {?} _registry\n     */\n    constructor(_registry) {\n        this._registry = _registry;\n    }\n    /**\n     * Accessor to raw list\n     * @return {?}\n     */\n    get items() {\n        return [...this._registry];\n    }\n    /**\n     * Accessor to sorted list used for registration with matchMedia API\n     *\n     * NOTE: During breakpoint registration, we want to register the overlaps FIRST\n     *       so the non-overlaps will trigger the MatchMedia:BehaviorSubject last!\n     *       And the largest, non-overlap, matching breakpoint should be the lastReplay value\n     * @return {?}\n     */\n    get sortedItems() {\n        /** @type {?} */\n        let overlaps = this._registry.filter(it => it.overlapping === true);\n        /** @type {?} */\n        let nonOverlaps = this._registry.filter(it => it.overlapping !== true);\n        return [...overlaps, ...nonOverlaps];\n    }\n    /**\n     * Search breakpoints by alias (e.g. gt-xs)\n     * @param {?} alias\n     * @return {?}\n     */\n    findByAlias(alias) {\n        return this._registry.find(bp => bp.alias == alias) || null;\n    }\n    /**\n     * @param {?} query\n     * @return {?}\n     */\n    findByQuery(query) {\n        return this._registry.find(bp => bp.mediaQuery == query) || null;\n    }\n    /**\n     * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n     * e.g. gt-sm overlaps md, lg, and xl\n     * @return {?}\n     */\n    get overlappings() {\n        return this._registry.filter(it => it.overlapping == true);\n    }\n    /**\n     * Get list of all registered (non-empty) breakpoint aliases\n     * @return {?}\n     */\n    get aliases() {\n        return this._registry.map(it => it.alias);\n    }\n    /**\n     * Aliases are mapped to properties using suffixes\n     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n     * for property layoutGtSM.\n     * @return {?}\n     */\n    get suffixes() {\n        return this._registry.map(it => !!it.suffix ? it.suffix : '');\n    }\n}\nBreakPointRegistry.Éµfac = function BreakPointRegistry_Factory(t) { return new (t || BreakPointRegistry)(Éµngcc0.ÉµÉµinject(BREAKPOINTS)); };\nBreakPointRegistry.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: BreakPointRegistry, factory: BreakPointRegistry.Éµfac, providedIn: 'root' });\n/** @nocollapse */\nBreakPointRegistry.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [BREAKPOINTS,] }] }\n];\n/** @nocollapse */ BreakPointRegistry.ngInjectableDef = defineInjectable({ factory: function BreakPointRegistry_Factory() { return new BreakPointRegistry(inject(BREAKPOINTS)); }, token: BreakPointRegistry, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(BreakPointRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: Array, decorators: [{\n                type: Inject,\n                args: [BREAKPOINTS]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n    /**\n     * @param {?=} matches\n     * @param {?=} mediaQuery\n     * @param {?=} mqAlias\n     * @param {?=} suffix\n     */\n    constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '' // e.g.   GtSM, Md, GtLg\n    ) {\n        this.matches = matches;\n        this.mediaQuery = mediaQuery;\n        this.mqAlias = mqAlias;\n        this.suffix = suffix;\n        this.property = '';\n    }\n    /**\n     * @return {?}\n     */\n    clone() {\n        return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n    /**\n     * @param {?} _zone\n     * @param {?} _platformId\n     * @param {?} _document\n     */\n    constructor(_zone, _platformId, _document) {\n        this._zone = _zone;\n        this._platformId = _platformId;\n        this._document = _document;\n        this._registry = new Map();\n        this._source = new BehaviorSubject(new MediaChange(true));\n        this._observable$ = this._source.asObservable();\n    }\n    /**\n     * For the specified mediaQuery?\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    isActive(mediaQuery) {\n        /** @type {?} */\n        let mql = this._registry.get(mediaQuery);\n        return !!mql ? mql.matches : false;\n    }\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * Typically used by the MediaQueryAdaptor; optionally available to components\n     * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n     *\n     * NOTE: if a mediaQuery is not specified, then ALL mediaQuery activations will\n     *       be announced.\n     * @param {?=} mediaQuery\n     * @return {?}\n     */\n    observe(mediaQuery) {\n        if (mediaQuery) {\n            this.registerQuery(mediaQuery);\n        }\n        return this._observable$.pipe(filter((change) => {\n            return mediaQuery ? (change.mediaQuery === mediaQuery) : true;\n        }));\n    }\n    /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    registerQuery(mediaQuery) {\n        /** @type {?} */\n        let list = normalizeQuery(mediaQuery);\n        if (list.length > 0) {\n            this._prepareQueryCSS(list, this._document);\n            list.forEach(query => {\n                /** @type {?} */\n                let mql = this._registry.get(query);\n                /** @type {?} */\n                let onMQLEvent = (e) => {\n                    this._zone.run(() => {\n                        /** @type {?} */\n                        let change = new MediaChange(e.matches, query);\n                        this._source.next(change);\n                    });\n                };\n                if (!mql) {\n                    mql = this._buildMQL(query);\n                    mql.addListener(onMQLEvent);\n                    this._registry.set(query, mql);\n                }\n                if (mql.matches) {\n                    onMQLEvent(/** @type {?} */ ((mql)));\n                }\n            });\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @param {?} query\n     * @return {?}\n     */\n    _buildMQL(query) {\n        /** @type {?} */\n        let canListen = isPlatformBrowser(this._platformId) &&\n            !!(/** @type {?} */ (window)).matchMedia('all').addListener;\n        return canListen ? (/** @type {?} */ (window)).matchMedia(query) : /** @type {?} */ (({\n            matches: query === 'all' || query === '',\n            media: query,\n            addListener: () => {\n            },\n            removeListener: () => {\n            }\n        }));\n    }\n    /**\n     * For Webkit engines that only trigger the MediaQueryList Listener\n     * when there is at least one CSS selector for the respective media query.\n     *\n     * @param {?} mediaQueries\n     * @param {?} _document\n     * @return {?}\n     */\n    _prepareQueryCSS(mediaQueries, _document) {\n        /** @type {?} */\n        const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n        if (list.length > 0) {\n            /** @type {?} */\n            const query = list.join(', ');\n            try {\n                /** @type {?} */\n                let styleEl = _document.createElement('style');\n                styleEl.setAttribute('type', 'text/css');\n                if (!(/** @type {?} */ (styleEl)).styleSheet) {\n                    /** @type {?} */\n                    let cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n                    styleEl.appendChild(_document.createTextNode(cssText));\n                } /** @type {?} */\n                ((_document.head)).appendChild(styleEl);\n                // Store in private global registry\n                list.forEach(mq => ALL_STYLES[mq] = styleEl);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n    }\n}\nMatchMedia.Éµfac = function MatchMedia_Factory(t) { return new (t || MatchMedia)(Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµinject(PLATFORM_ID), Éµngcc0.ÉµÉµinject(DOCUMENT)); };\nMatchMedia.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: MatchMedia, factory: MatchMedia.Éµfac, providedIn: 'root' });\n/** @nocollapse */\nMatchMedia.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ MatchMedia.ngInjectableDef = defineInjectable({ factory: function MatchMedia_Factory() { return new MatchMedia(inject(NgZone), inject(PLATFORM_ID), inject(DOCUMENT)); }, token: MatchMedia, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MatchMedia, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: Éµngcc0.NgZone }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/** *\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n  @type {?} */\nconst ALL_STYLES = {};\n/**\n * Always convert to unique list of queries; for iteration in ::registerQuery()\n * @param {?} mediaQuery\n * @return {?}\n */\nfunction normalizeQuery(mediaQuery) {\n    return (typeof mediaQuery === 'undefined') ? [] :\n        (typeof mediaQuery === 'string') ? [mediaQuery] : unique(/** @type {?} */ (mediaQuery));\n}\n/**\n * Filter duplicate mediaQueries in the list\n * @param {?} list\n * @return {?}\n */\nfunction unique(list) {\n    /** @type {?} */\n    let seen = {};\n    return list.filter(item => {\n        return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction mergeAlias(dest, source) {\n    return extendObject(dest, source ? {\n        mqAlias: source.alias,\n        suffix: source.suffix\n    } : {});\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Base class for MediaService and pseudo-token for\n * @abstract\n */\nclass ObservableMedia {\n}\n/**\n * Class internalizes a MatchMedia service and exposes an Subscribable and Observable interface.\n * This an Observable with that exposes a feature to subscribe to mediaQuery\n * changes and a validator method (`isActive(<alias>)`) to test if a mediaQuery (or alias) is\n * currently active.\n *\n * !! Only mediaChange activations (not de-activations) are announced by the ObservableMedia\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * !! This is not an actual Observable. It is a wrapper of an Observable used to publish additional\n * methods like `isActive(<alias>). To access the Observable and use RxJS operators, use\n * `.asObservable()` with syntax like media.asObservable().map(....).\n *\n * \\@usage\n *\n *  // RxJS\n *  import {filter} from 'rxjs/operators/filter';\n *  import { ObservableMedia } from '\\@angular/flex-layout';\n *\n * \\@Component({ ... })\n *  export class AppComponent {\n *    status : string = '';\n *\n *    constructor(  media:ObservableMedia ) {\n *      let onChange = (change:MediaChange) => {\n *        this.status = change ? `'${change.mqAlias}' = (${change.mediaQuery})` : '';\n *      };\n *\n *      // Subscribe directly or access observable to use filter/map operators\n *      // e.g.\n *      //      media.subscribe(onChange);\n *\n *      media.asObservable()\n *        .pipe(\n *          filter((change:MediaChange) => true)   // silly noop filter\n *        ).subscribe(onChange);\n *    }\n *  }\n */\nclass MediaService {\n    /**\n     * @param {?} breakpoints\n     * @param {?} mediaWatcher\n     */\n    constructor(breakpoints, mediaWatcher) {\n        this.breakpoints = breakpoints;\n        this.mediaWatcher = mediaWatcher;\n        /**\n         * Should we announce gt-<xxx> breakpoint activations ?\n         */\n        this.filterOverlaps = true;\n        this._registerBreakPoints();\n        this.observable$ = this._buildObservable();\n    }\n    /**\n     * Test if specified query/alias is active.\n     * @param {?} alias\n     * @return {?}\n     */\n    isActive(alias) {\n        /** @type {?} */\n        let query = this._toMediaQuery(alias);\n        return this.mediaWatcher.isActive(query);\n    }\n    /**\n     * Proxy to the Observable subscribe method\n     * @param {?=} observerOrNext\n     * @param {?=} error\n     * @param {?=} complete\n     * @return {?}\n     */\n    subscribe(observerOrNext, error, complete) {\n        if (observerOrNext) {\n            if (typeof observerOrNext === 'object') {\n                return this.observable$.subscribe(observerOrNext.next, observerOrNext.error, observerOrNext.complete);\n            }\n        }\n        return this.observable$.subscribe(observerOrNext, error, complete);\n    }\n    /**\n     * Access to observable for use with operators like\n     * .filter(), .map(), etc.\n     * @return {?}\n     */\n    asObservable() {\n        return this.observable$;\n    }\n    /**\n     * Register all the mediaQueries registered in the BreakPointRegistry\n     * This is needed so subscribers can be auto-notified of all standard, registered\n     * mediaQuery activations\n     * @return {?}\n     */\n    _registerBreakPoints() {\n        /** @type {?} */\n        let queries = this.breakpoints.sortedItems.map(bp => bp.mediaQuery);\n        this.mediaWatcher.registerQuery(queries);\n    }\n    /**\n     * Prepare internal observable\n     *\n     * NOTE: the raw MediaChange events [from MatchMedia] do not\n     *       contain important alias information; as such this info\n     *       must be injected into the MediaChange\n     * @return {?}\n     */\n    _buildObservable() {\n        /** @type {?} */\n        const self = this;\n        /** @type {?} */\n        const media$ = this.mediaWatcher.observe();\n        /** @type {?} */\n        const activationsOnly = (change) => {\n            return change.matches === true;\n        };\n        /** @type {?} */\n        const addAliasInformation = (change) => {\n            return mergeAlias(change, this._findByQuery(change.mediaQuery));\n        };\n        /** @type {?} */\n        const excludeOverlaps = (change) => {\n            /** @type {?} */\n            let bp = this.breakpoints.findByQuery(change.mediaQuery);\n            return !bp ? true : !(self.filterOverlaps && bp.overlapping);\n        };\n        /**\n             * Only pass/announce activations (not de-activations)\n             * Inject associated (if any) alias information into the MediaChange event\n             * Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n             */\n        return media$.pipe(filter(activationsOnly), filter(excludeOverlaps), map(addAliasInformation));\n    }\n    /**\n     * Breakpoint locator by alias\n     * @param {?} alias\n     * @return {?}\n     */\n    _findByAlias(alias) {\n        return this.breakpoints.findByAlias(alias);\n    }\n    /**\n     * Breakpoint locator by mediaQuery\n     * @param {?} query\n     * @return {?}\n     */\n    _findByQuery(query) {\n        return this.breakpoints.findByQuery(query);\n    }\n    /**\n     * Find associated breakpoint (if any)\n     * @param {?} query\n     * @return {?}\n     */\n    _toMediaQuery(query) {\n        /** @type {?} */\n        let bp = this._findByAlias(query) || this._findByQuery(query);\n        return bp ? bp.mediaQuery : query;\n    }\n}\nMediaService.Éµfac = function MediaService_Factory(t) { return new (t || MediaService)(Éµngcc0.ÉµÉµinject(BreakPointRegistry), Éµngcc0.ÉµÉµinject(MatchMedia)); };\nMediaService.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: MediaService, factory: MediaService.Éµfac, providedIn: 'root' });\n/** @nocollapse */\nMediaService.ctorParameters = () => [\n    { type: BreakPointRegistry },\n    { type: MatchMedia }\n];\n/** @nocollapse */ MediaService.ngInjectableDef = defineInjectable({ factory: function MediaService_Factory() { return new MediaService(inject(BreakPointRegistry), inject(MatchMedia)); }, token: MediaService, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MediaService, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: BreakPointRegistry }, { type: MatchMedia }]; }, null); })();\n/** @type {?} */\nconst ObservableMediaProvider = {\n    // tslint:disable-line:variable-name\n    provide: ObservableMedia,\n    useClass: MediaService\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * *****************************************************************\n * Define module for the MediaQuery API\n * *****************************************************************\n */\nclass CoreModule {\n}\nCoreModule.Éµfac = function CoreModule_Factory(t) { return new (t || CoreModule)(); };\nCoreModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: CoreModule });\nCoreModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({ providers: [ObservableMediaProvider, BROWSER_PROVIDER] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CoreModule, [{\n        type: NgModule,\n        args: [{\n                providers: [ObservableMediaProvider, BROWSER_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n    constructor() {\n        this.stylesheet = new Map();\n    }\n    /**\n     * Add an individual style to an HTML element\n     * @param {?} element\n     * @param {?} style\n     * @param {?} value\n     * @return {?}\n     */\n    addStyleToElement(element, style, value) {\n        /** @type {?} */\n        const stylesheet = this.stylesheet.get(element);\n        if (stylesheet) {\n            stylesheet.set(style, value);\n        }\n        else {\n            this.stylesheet.set(element, new Map([[style, value]]));\n        }\n    }\n    /**\n     * Clear the virtual stylesheet\n     * @return {?}\n     */\n    clearStyles() {\n        this.stylesheet.clear();\n    }\n    /**\n     * Retrieve a given style for an HTML element\n     * @param {?} el\n     * @param {?} styleName\n     * @return {?}\n     */\n    getStyleForElement(el, styleName) {\n        /** @type {?} */\n        const styles = this.stylesheet.get(el);\n        /** @type {?} */\n        let value = '';\n        if (styles) {\n            /** @type {?} */\n            const style = styles.get(styleName);\n            if (typeof style === 'number' || typeof style === 'string') {\n                value = style + '';\n            }\n        }\n        return value;\n    }\n}\nStylesheetMap.Éµfac = function StylesheetMap_Factory(t) { return new (t || StylesheetMap)(); };\nStylesheetMap.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: StylesheetMap, factory: StylesheetMap.Éµfac, providedIn: 'root' });\n/** @nocollapse */ StylesheetMap.ngInjectableDef = defineInjectable({ factory: function StylesheetMap_Factory() { return new StylesheetMap(); }, token: StylesheetMap, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(StylesheetMap, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n  @type {?} */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: () => false\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n  @type {?} */\nconst INLINE = 'inline';\n/** @type {?} */\nconst LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n * @param {?} value\n * @return {?}\n */\nfunction buildLayoutCSS(value) {\n    let [direction, wrap, isInline] = validateValue(value);\n    return buildCSS(direction, wrap, isInline);\n}\n/**\n * Validate the value to be one of the acceptable value options\n * Use default fallback of 'row'\n * @param {?} value\n * @return {?}\n */\nfunction validateValue(value) {\n    value = value ? value.toLowerCase() : '';\n    let [direction, wrap, inline] = value.split(' ');\n    // First value must be the `flex-direction`\n    if (!LAYOUT_VALUES.find(x => x === direction)) {\n        direction = LAYOUT_VALUES[0];\n    }\n    if (wrap === INLINE) {\n        wrap = (inline !== INLINE) ? inline : '';\n        inline = INLINE;\n    }\n    return [direction, validateWrapValue(wrap), !!inline];\n}\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n * @param {?} value\n * @return {?}\n */\nfunction validateWrapValue(value) {\n    if (!!value) {\n        switch (value.toLowerCase()) {\n            case 'reverse':\n            case 'wrap-reverse':\n            case 'reverse-wrap':\n                value = 'wrap-reverse';\n                break;\n            case 'no':\n            case 'none':\n            case 'nowrap':\n                value = 'nowrap';\n                break;\n            // All other values fallback to 'wrap'\n            default:\n                value = 'wrap';\n                break;\n        }\n    }\n    return value;\n}\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container wonât apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n * @param {?} direction\n * @param {?=} wrap\n * @param {?=} inline\n * @return {?}\n */\nfunction buildCSS(direction, wrap = null, inline = false) {\n    return {\n        'display': inline ? 'inline-flex' : 'flex',\n        'box-sizing': 'border-box',\n        'flex-direction': direction,\n        'flex-wrap': !!wrap ? wrap : null\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass KeyOptions {\n    /**\n     * @param {?} baseKey\n     * @param {?} defaultValue\n     * @param {?} inputKeys\n     */\n    constructor(baseKey, defaultValue, inputKeys) {\n        this.baseKey = baseKey;\n        this.defaultValue = defaultValue;\n        this.inputKeys = inputKeys;\n    }\n}\n/**\n * ResponsiveActivation acts as a proxy between the MonitorMedia service (which emits mediaQuery\n * changes) and the fx API directives. The MQA proxies mediaQuery change events and notifies the\n * directive via the specified callback.\n *\n * - The MQA also determines which directive property should be used to determine the\n *   current change 'value'... BEFORE the original `onMediaQueryChanges()` method is called.\n * - The `ngOnDestroy()` method is also head-hooked to enable auto-unsubscribe from the\n *   MediaQueryServices.\n *\n * NOTE: these interceptions enables the logic in the fx API directives to remain terse and clean.\n */\nclass ResponsiveActivation {\n    /**\n     * Constructor\n     * @param {?} _options\n     * @param {?} _mediaMonitor\n     * @param {?} _onMediaChanges\n     */\n    constructor(_options, _mediaMonitor, _onMediaChanges) {\n        this._options = _options;\n        this._mediaMonitor = _mediaMonitor;\n        this._onMediaChanges = _onMediaChanges;\n        this._subscribers = [];\n        this._activatedInputKey = '';\n        this._registryMap = this._buildRegistryMap();\n        this._subscribers = this._configureChangeObservers();\n    }\n    /**\n     * Get a readonly sorted list of the breakpoints corresponding to the directive properties\n     * defined in the HTML markup: the sorting is done from largest to smallest. The order is\n     * important when several media queries are 'registered' and from which, the browser uses the\n     * first matching media query.\n     * @return {?}\n     */\n    get registryFromLargest() {\n        return [...this._registryMap].reverse();\n    }\n    /**\n     * Accessor to the DI'ed directive property\n     * Each directive instance has a reference to the MediaMonitor which is\n     * used HERE to subscribe to mediaQuery change notifications.\n     * @return {?}\n     */\n    get mediaMonitor() {\n        return this._mediaMonitor;\n    }\n    /**\n     * Determine which directive \\@Input() property is currently active (for the viewport size):\n     * The key must be defined (in use) or fallback to the 'closest' overlapping property key\n     * that is defined; otherwise the default property key will be used.\n     * e.g.\n     *      if `<div fxHide fxHide.gt-sm=\"false\">` is used but the current activated mediaQuery alias\n     *      key is `.md` then `.gt-sm` should be used instead\n     * @return {?}\n     */\n    get activatedInputKey() {\n        return this._activatedInputKey || this._options.baseKey;\n    }\n    /**\n     * Get the currently activated \\@Input value or the fallback default \\@Input value\n     * @return {?}\n     */\n    get activatedInput() {\n        /** @type {?} */\n        let key = this.activatedInputKey;\n        return this.hasKeyValue(key) ? this._lookupKeyValue(key) : this._options.defaultValue;\n    }\n    /**\n     * Fast validator for presence of attribute on the host element\n     * @param {?} key\n     * @return {?}\n     */\n    hasKeyValue(key) {\n        /** @type {?} */\n        let value = this._options.inputKeys[key];\n        return typeof value !== 'undefined';\n    }\n    /**\n     * Remove interceptors, restore original functions, and forward the onDestroy() call\n     * @return {?}\n     */\n    destroy() {\n        this._subscribers.forEach((link) => {\n            link.unsubscribe();\n        });\n        this._subscribers = [];\n    }\n    /**\n     * For each *defined* API property, register a callback to `_onMonitorEvents( )`\n     * Cache 1..n subscriptions for internal auto-unsubscribes when the the directive destructs\n     * @return {?}\n     */\n    _configureChangeObservers() {\n        /** @type {?} */\n        let subscriptions = [];\n        this._registryMap.forEach((bp) => {\n            if (this._keyInUse(bp.key)) {\n                /** @type {?} */\n                let buildChanges = (change) => {\n                    change = change.clone();\n                    change.property = this._options.baseKey;\n                    return change;\n                };\n                subscriptions.push(this.mediaMonitor\n                    .observe(bp.alias)\n                    .pipe(map(buildChanges))\n                    .subscribe(change => {\n                    this._onMonitorEvents(change);\n                }));\n            }\n        });\n        return subscriptions;\n    }\n    /**\n     * Build mediaQuery key-hashmap; only for the directive properties that are actually defined/used\n     * in the HTML markup\n     * @return {?}\n     */\n    _buildRegistryMap() {\n        return this.mediaMonitor.breakpoints\n            .map(bp => {\n            return /** @type {?} */ (extendObject({}, bp, {\n                baseKey: this._options.baseKey,\n                // e.g. layout, hide, self-align, flex-wrap\n                key: this._options.baseKey + bp.suffix // e.g.  layoutGtSm, layoutMd, layoutGtLg\n            }));\n        })\n            .filter(bp => this._keyInUse(bp.key));\n    }\n    /**\n     * Synchronizes change notifications with the current mq-activated \\@Input and calculates the\n     * mq-activated input value or the default value\n     * @param {?} change\n     * @return {?}\n     */\n    _onMonitorEvents(change) {\n        if (change.property == this._options.baseKey) {\n            change.value = this._calculateActivatedValue(change);\n            this._onMediaChanges(change);\n        }\n    }\n    /**\n     * Has the key been specified in the HTML markup and thus is intended\n     * to participate in activation processes.\n     * @param {?} key\n     * @return {?}\n     */\n    _keyInUse(key) {\n        return this._lookupKeyValue(key) !== undefined;\n    }\n    /**\n     *  Map input key associated with mediaQuery activation to closest defined input key\n     *  then return the values associated with the targeted input property\n     *\n     *  !! change events may arrive out-of-order (activate before deactivate)\n     *     so make sure the deactivate is used ONLY when the keys match\n     *     (since a different activate may be in use)\n     * @param {?} current\n     * @return {?}\n     */\n    _calculateActivatedValue(current) {\n        /** @type {?} */\n        const currentKey = this._options.baseKey + current.suffix;\n        /** @type {?} */\n        let newKey = this._activatedInputKey; // e.g. newKey == hideGtSm\n        newKey = current.matches ? currentKey : ((newKey == currentKey) ? '' : newKey);\n        this._activatedInputKey = this._validateInputKey(newKey);\n        return this.activatedInput;\n    }\n    /**\n     * For the specified input property key, validate it is defined (used in the markup)\n     * If not see if a overlapping mediaQuery-related input key fallback has been defined\n     *\n     * NOTE: scans in the order defined by activeOverLaps (largest viewport ranges -> smallest ranges)\n     * @param {?} inputKey\n     * @return {?}\n     */\n    _validateInputKey(inputKey) {\n        /** @type {?} */\n        let isMissingKey = (key) => !this._keyInUse(key);\n        if (isMissingKey(inputKey)) {\n            this.mediaMonitor.activeOverlaps.some(bp => {\n                /** @type {?} */\n                let key = this._options.baseKey + bp.suffix;\n                if (!isMissingKey(key)) {\n                    inputKey = key;\n                    return true; // exit .some()\n                }\n                return false;\n            });\n        }\n        return inputKey;\n    }\n    /**\n     * Get the value (if any) for the directive instances \\@Input property (aka key)\n     * @param {?} key\n     * @return {?}\n     */\n    _lookupKeyValue(key) {\n        return this._options.inputKeys[key];\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Abstract base class for the Layout API styling directives.\n * @abstract\n */\nclass BaseDirective {\n    /**\n     * @param {?} _mediaMonitor\n     * @param {?} _elementRef\n     * @param {?} _styler\n     */\n    constructor(_mediaMonitor, _elementRef, _styler) {\n        this._mediaMonitor = _mediaMonitor;\n        this._elementRef = _elementRef;\n        this._styler = _styler;\n        /**\n         * Dictionary of input keys with associated values\n         */\n        this._inputMap = {};\n        /**\n         * Has the `ngOnInit()` method fired\n         *\n         * Used to allow *ngFor tasks to finish and support queries like\n         * getComputedStyle() during ngOnInit().\n         */\n        this._hasInitialized = false;\n    }\n    /**\n     * @return {?}\n     */\n    get hasMediaQueryListener() {\n        return !!this._mqActivation;\n    }\n    /**\n     * Imperatively determine the current activated [input] value;\n     * if called before ngOnInit() this will return `undefined`\n     * @return {?}\n     */\n    get activatedValue() {\n        return this._mqActivation ? this._mqActivation.activatedInput : undefined;\n    }\n    /**\n     * Change the currently activated input value and force-update\n     * the injected CSS (by-passing change detection).\n     *\n     * NOTE: Only the currently activated input value will be modified;\n     *       other input values will NOT be affected.\n     * @param {?} value\n     * @return {?}\n     */\n    set activatedValue(value) {\n        /** @type {?} */\n        let key = 'baseKey';\n        /** @type {?} */\n        let previousVal;\n        if (this._mqActivation) {\n            key = this._mqActivation.activatedInputKey;\n            previousVal = this._inputMap[key];\n            this._inputMap[key] = value;\n        }\n        /** @type {?} */\n        let change = new SimpleChange(previousVal, value, false);\n        this.ngOnChanges(/** @type {?} */ ({ [key]: change }));\n    }\n    /**\n     * Does this directive have 1 or more responsive keys defined\n     * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n     * @param {?} baseKey\n     * @return {?}\n     */\n    hasResponsiveAPI(baseKey) {\n        /** @type {?} */\n        const totalKeys = Object.keys(this._inputMap).length;\n        /** @type {?} */\n        const baseValue = this._inputMap[baseKey];\n        return (totalKeys - (!!baseValue ? 1 : 0)) > 0;\n    }\n    /**\n     * Use post-component-initialization event to perform extra\n     * querying such as computed Display style\n     * @return {?}\n     */\n    ngOnInit() {\n        this._hasInitialized = true;\n    }\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    ngOnChanges(change) {\n        throw new Error(`BaseDirective::ngOnChanges should be overridden in subclass: ${change}`);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._mqActivation) {\n            this._mqActivation.destroy();\n        }\n        delete this._mediaMonitor;\n    }\n    /**\n     * Access to host element's parent DOM node\n     * @return {?}\n     */\n    get parentElement() {\n        return this._elementRef.nativeElement.parentNode;\n    }\n    /**\n     * @return {?}\n     */\n    get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n    /**\n     * Access the current value (if any) of the \\@Input property\n     * @param {?} key\n     * @return {?}\n     */\n    _queryInput(key) {\n        return this._inputMap[key];\n    }\n    /**\n     * Was the directive's default selector used ?\n     * If not, use the fallback value!\n     * @param {?} key\n     * @param {?} fallbackVal\n     * @return {?}\n     */\n    _getDefaultVal(key, fallbackVal) {\n        /** @type {?} */\n        let val = this._queryInput(key);\n        /** @type {?} */\n        let hasDefaultVal = (val !== undefined && val !== null);\n        return (hasDefaultVal && val !== '') ? val : fallbackVal;\n    }\n    /**\n     * Quick accessor to the current HTMLElement's `display` style\n     * Note: this allows us to preserve the original style\n     * and optional restore it when the mediaQueries deactivate\n     * @param {?=} source\n     * @return {?}\n     */\n    _getDisplayStyle(source = this.nativeElement) {\n        /** @type {?} */\n        const query = 'display';\n        return this._styler.lookupStyle(source, query);\n    }\n    /**\n     * Quick accessor to raw attribute value on the target DOM element\n     * @param {?} attribute\n     * @param {?=} source\n     * @return {?}\n     */\n    _getAttributeValue(attribute, source = this.nativeElement) {\n        return this._styler.lookupAttributeValue(source, attribute);\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     * @param {?} target\n     * @param {?=} addIfMissing\n     * @return {?}\n     */\n    _getFlexFlowDirection(target, addIfMissing = false) {\n        /** @type {?} */\n        let value = 'row';\n        /** @type {?} */\n        let hasInlineValue = '';\n        if (target) {\n            [value, hasInlineValue] = this._styler.getFlowDirection(target);\n            if (!hasInlineValue && addIfMissing) {\n                /** @type {?} */\n                const style = buildLayoutCSS(value);\n                /** @type {?} */\n                const elements = [target];\n                this._styler.applyStyleToElements(style, elements);\n            }\n        }\n        return value.trim() || 'row';\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     * @param {?} style\n     * @param {?=} value\n     * @param {?=} element\n     * @return {?}\n     */\n    _applyStyleToElement(style, value, element = this.nativeElement) {\n        this._styler.applyStyleToElement(element, style, value);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     * @param {?} style\n     * @param {?} elements\n     * @return {?}\n     */\n    _applyStyleToElements(style, elements) {\n        this._styler.applyStyleToElements(style, elements);\n    }\n    /**\n     *  Save the property value; which may be a complex object.\n     *  Complex objects support property chains\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n    _cacheInput(key, source) {\n        if (typeof source === 'object') {\n            for (let prop in source) {\n                this._inputMap[prop] = source[prop];\n            }\n        }\n        else {\n            if (!!key) {\n                this._inputMap[key] = source;\n            }\n        }\n    }\n    /**\n     *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n     *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n     *  (or closest match).\n     * @param {?} key\n     * @param {?} defaultValue\n     * @param {?} onMediaQueryChange\n     * @return {?}\n     */\n    _listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange) {\n        // tslint:disable-line:max-line-length\n        if (!this._mqActivation) {\n            /** @type {?} */\n            let keyOptions = new KeyOptions(key, defaultValue, this._inputMap);\n            this._mqActivation = new ResponsiveActivation(keyOptions, this._mediaMonitor, (change) => onMediaQueryChange(change));\n        }\n        return this._mqActivation;\n    }\n    /**\n     * Special accessor to query for all child 'element' nodes regardless of type, class, etc\n     * @return {?}\n     */\n    get childrenNodes() {\n        /** @type {?} */\n        const obj = this.nativeElement.children;\n        /** @type {?} */\n        const buffer = [];\n        // iterate backwards ensuring that length is an UInt32\n        for (let i = obj.length; i--;) {\n            buffer[i] = obj[i];\n        }\n        return buffer;\n    }\n    /**\n     * Fast validator for presence of attribute on the host element\n     * @param {?} key\n     * @return {?}\n     */\n    hasKeyValue(key) {\n        return /** @type {?} */ ((this._mqActivation)).hasKeyValue(key);\n    }\n    /**\n     * @return {?}\n     */\n    get hasInitialized() {\n        return this._hasInitialized;\n    }\n}\nBaseDirective.Éµfac = function BaseDirective_Factory(t) { Éµngcc0.ÉµÉµinvalidFactory(); };\nBaseDirective.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: BaseDirective, features: [Éµngcc0.ÉµÉµNgOnChangesFeature] });\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Adapter to the BaseDirective abstract class so it can be used via composition.\n * @see BaseDirective\n */\nclass BaseDirectiveAdapter extends BaseDirective {\n    /**\n     * BaseDirectiveAdapter constructor\n     * @param {?} _baseKey\n     * @param {?} _mediaMonitor\n     * @param {?} _elementRef\n     * @param {?} _styler\n     */\n    constructor(_baseKey, // non-responsive @Input property name\n    // non-responsive @Input property name\n    _mediaMonitor, _elementRef, _styler) {\n        super(_mediaMonitor, _elementRef, _styler);\n        this._baseKey = _baseKey;\n        this._mediaMonitor = _mediaMonitor;\n        this._elementRef = _elementRef;\n        this._styler = _styler;\n    }\n    /**\n     * Accessor to determine which \\@Input property is \"active\"\n     * e.g. which property value will be used.\n     * @return {?}\n     */\n    get activeKey() {\n        /** @type {?} */\n        let mqa = this._mqActivation;\n        /** @type {?} */\n        let key = mqa ? mqa.activatedInputKey : this._baseKey;\n        // Note: ClassDirective::SimpleChanges uses 'klazz' instead of 'class' as a key\n        return (key === 'class') ? 'klazz' : key;\n    }\n    /**\n     * Hash map of all \\@Input keys/values defined/used\n     * @return {?}\n     */\n    get inputMap() {\n        return this._inputMap;\n    }\n    /**\n     * @see BaseDirective._mqActivation\n     * @return {?}\n     */\n    get mqActivation() {\n        return /** @type {?} */ ((this._mqActivation));\n    }\n    /**\n     * Does this directive have 1 or more responsive keys defined\n     * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n     * @return {?}\n     */\n    hasResponsiveAPI() {\n        return super.hasResponsiveAPI(this._baseKey);\n    }\n    /**\n     * @see BaseDirective._queryInput\n     * @param {?} key\n     * @return {?}\n     */\n    queryInput(key) {\n        return key ? this._queryInput(key) : undefined;\n    }\n    /**\n     *  Save the property value.\n     * @param {?=} key\n     * @param {?=} source\n     * @param {?=} cacheRaw\n     * @return {?}\n     */\n    cacheInput(key, source, cacheRaw = false) {\n        if (cacheRaw) {\n            this._cacheInputRaw(key, source);\n        }\n        else if (Array.isArray(source)) {\n            this._cacheInputArray(key, source);\n        }\n        else if (typeof source === 'object') {\n            this._cacheInputObject(key, source);\n        }\n        else if (typeof source === 'string') {\n            this._cacheInputString(key, source);\n        }\n        else {\n            throw new Error(`Invalid class value '${key}' provided. Did you want to cache the raw value?`);\n        }\n    }\n    /**\n     * @see BaseDirective._listenForMediaQueryChanges\n     * @param {?} key\n     * @param {?} defaultValue\n     * @param {?} onMediaQueryChange\n     * @return {?}\n     */\n    listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange) {\n        return this._listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange);\n    }\n    /**\n     * No implicit transforms of the source.\n     * Required when caching values expected later for KeyValueDiffers\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n    _cacheInputRaw(key, source) {\n        if (key) {\n            this._inputMap[key] = source;\n        }\n    }\n    /**\n     *  Save the property value for Array values.\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n    _cacheInputArray(key = '', source) {\n        this._inputMap[key] = source ? source.join(' ') : '';\n    }\n    /**\n     *  Save the property value for key/value pair values.\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n    _cacheInputObject(key = '', source) {\n        /** @type {?} */\n        let classes = [];\n        if (source) {\n            for (let prop in source) {\n                if (!!source[prop]) {\n                    classes.push(prop);\n                }\n            }\n        }\n        this._inputMap[key] = classes.join(' ');\n    }\n    /**\n     *  Save the property value for string values.\n     * @param {?=} key\n     * @param {?=} source\n     * @return {?}\n     */\n    _cacheInputString(key = '', source) {\n        this._inputMap[key] = source;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n    /**\n     * @param {?} _zone\n     * @param {?} _platformId\n     * @param {?} _document\n     * @param {?} _breakpoints\n     */\n    constructor(_zone, _platformId, _document, _breakpoints) {\n        super(_zone, _platformId, _document);\n        this._breakpoints = _breakpoints;\n        /**\n         * Special flag used to test BreakPoint registrations with MatchMedia\n         */\n        this.autoRegisterQueries = true;\n        /**\n         * Allow fallback to overlapping mediaQueries to determine\n         * activatedInput(s).\n         */\n        this.useOverlaps = false;\n        this._registry = new Map();\n        this._actives = [];\n        this._actives = [];\n    }\n    /**\n     * Easy method to clear all listeners for all mediaQueries\n     * @return {?}\n     */\n    clearAll() {\n        this._registry.forEach((mql) => {\n            mql.destroy();\n        });\n        this._registry.clear();\n        this.useOverlaps = false;\n    }\n    /**\n     * Feature to support manual, simulated activation of a mediaQuery.\n     * @param {?} mediaQuery\n     * @param {?=} useOverlaps\n     * @return {?}\n     */\n    activate(mediaQuery, useOverlaps = false) {\n        useOverlaps = useOverlaps || this.useOverlaps;\n        mediaQuery = this._validateQuery(mediaQuery);\n        if (useOverlaps || !this.isActive(mediaQuery)) {\n            this._deactivateAll();\n            this._registerMediaQuery(mediaQuery);\n            this._activateWithOverlaps(mediaQuery, useOverlaps);\n        }\n        return this.hasActivated;\n    }\n    /**\n     * Converts an optional mediaQuery alias to a specific, valid mediaQuery\n     * @param {?} queryOrAlias\n     * @return {?}\n     */\n    _validateQuery(queryOrAlias) {\n        /** @type {?} */\n        let bp = this._breakpoints.findByAlias(queryOrAlias);\n        if (bp) {\n            queryOrAlias = bp.mediaQuery;\n        }\n        return queryOrAlias;\n    }\n    /**\n     * Manually activate any overlapping mediaQueries to simulate\n     * similar functionality in the window.matchMedia()\n     * @param {?} mediaQuery\n     * @param {?} useOverlaps\n     * @return {?}\n     */\n    _activateWithOverlaps(mediaQuery, useOverlaps) {\n        if (useOverlaps) {\n            /** @type {?} */\n            let bp = this._breakpoints.findByQuery(mediaQuery);\n            /** @type {?} */\n            let alias = bp ? bp.alias : 'unknown';\n            // Simulate activation of overlapping lt-<XXX> ranges\n            switch (alias) {\n                case 'lg':\n                    this._activateByAlias('lt-xl');\n                    break;\n                case 'md':\n                    this._activateByAlias('lt-xl, lt-lg');\n                    break;\n                case 'sm':\n                    this._activateByAlias('lt-xl, lt-lg, lt-md');\n                    break;\n                case 'xs':\n                    this._activateByAlias('lt-xl, lt-lg, lt-md, lt-sm');\n                    break;\n            }\n            // Simulate activate of overlapping gt-<xxxx> mediaQuery ranges\n            switch (alias) {\n                case 'xl':\n                    this._activateByAlias('gt-lg, gt-md, gt-sm, gt-xs');\n                    break;\n                case 'lg':\n                    this._activateByAlias('gt-md, gt-sm, gt-xs');\n                    break;\n                case 'md':\n                    this._activateByAlias('gt-sm, gt-xs');\n                    break;\n                case 'sm':\n                    this._activateByAlias('gt-xs');\n                    break;\n            }\n        }\n        // Activate last since the responsiveActivation is watching *this* mediaQuery\n        return this._activateByQuery(mediaQuery);\n    }\n    /**\n     *\n     * @param {?} aliases\n     * @return {?}\n     */\n    _activateByAlias(aliases) {\n        /** @type {?} */\n        let activate = (alias) => {\n            /** @type {?} */\n            let bp = this._breakpoints.findByAlias(alias);\n            this._activateByQuery(bp ? bp.mediaQuery : alias);\n        };\n        aliases.split(',').forEach(alias => activate(alias.trim()));\n    }\n    /**\n     *\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    _activateByQuery(mediaQuery) {\n        /** @type {?} */\n        let mql = /** @type {?} */ (this._registry.get(mediaQuery));\n        /** @type {?} */\n        let alreadyAdded = this._actives.reduce((found, it) => {\n            return found || (mql && (it.media === mql.media));\n        }, false);\n        if (mql && !alreadyAdded) {\n            this._actives.push(mql.activate());\n        }\n        return this.hasActivated;\n    }\n    /**\n     * Deactivate all current Mock MQLs\n     * @return {?}\n     */\n    _deactivateAll() {\n        if (this._actives.length) {\n            // Deactivate all current MQLs and reset the buffer\n            for (const it of this._actives) {\n                it.deactivate();\n            }\n            this._actives = [];\n        }\n        return this;\n    }\n    /**\n     * Insure the mediaQuery is registered with MatchMedia\n     * @param {?} mediaQuery\n     * @return {?}\n     */\n    _registerMediaQuery(mediaQuery) {\n        if (!this._registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this.registerQuery(mediaQuery);\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @param {?} query\n     * @return {?}\n     */\n    _buildMQL(query) {\n        return new MockMediaQueryList(query);\n    }\n    /**\n     * @return {?}\n     */\n    get hasActivated() {\n        return (this._actives.length > 0);\n    }\n}\nMockMatchMedia.Éµfac = function MockMatchMedia_Factory(t) { return new (t || MockMatchMedia)(Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµinject(PLATFORM_ID), Éµngcc0.ÉµÉµinject(DOCUMENT), Éµngcc0.ÉµÉµinject(BreakPointRegistry)); };\nMockMatchMedia.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: MockMatchMedia, factory: MockMatchMedia.Éµfac });\n/** @nocollapse */\nMockMatchMedia.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: BreakPointRegistry }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MockMatchMedia, [{\n        type: Injectable\n    }], function () { return [{ type: Éµngcc0.NgZone }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: BreakPointRegistry }]; }, null); })();\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList {\n    /**\n     * @param {?} _mediaQuery\n     */\n    constructor(_mediaQuery) {\n        this._mediaQuery = _mediaQuery;\n        this._isActive = false;\n        this._listeners = [];\n        this.onchange = null;\n    }\n    /**\n     * @return {?}\n     */\n    get matches() {\n        return this._isActive;\n    }\n    /**\n     * @return {?}\n     */\n    get media() {\n        return this._mediaQuery;\n    }\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     * @return {?}\n     */\n    destroy() {\n        this.deactivate();\n        this._listeners = [];\n    }\n    /**\n     * Notify all listeners that 'matches === TRUE'\n     * @return {?}\n     */\n    activate() {\n        if (!this._isActive) {\n            this._isActive = true;\n            this._listeners.forEach((callback) => {\n                /** @type {?} */\n                const cb = /** @type {?} */ ((callback));\n                cb.call(null, this);\n            });\n        }\n        return this;\n    }\n    /**\n     * Notify all listeners that 'matches === false'\n     * @return {?}\n     */\n    deactivate() {\n        if (this._isActive) {\n            this._isActive = false;\n            this._listeners.forEach((callback) => {\n                /** @type {?} */\n                const cb = /** @type {?} */ ((callback));\n                cb.call(null, this);\n            });\n        }\n        return this;\n    }\n    /**\n     * Add a listener to our internal list to activate later\n     * @param {?} listener\n     * @return {?}\n     */\n    addListener(listener) {\n        if (this._listeners.indexOf(listener) === -1) {\n            this._listeners.push(listener);\n        }\n        if (this._isActive) {\n            /** @type {?} */\n            const cb = /** @type {?} */ ((listener));\n            cb.call(null, this);\n        }\n    }\n    /**\n     * Don't need to remove listeners in the testing environment\n     * @param {?} _\n     * @return {?}\n     */\n    removeListener(_) {\n    }\n    /**\n     * @param {?} _\n     * @param {?} __\n     * @param {?=} ___\n     * @return {?}\n     */\n    addEventListener(_, __, ___) {\n    }\n    /**\n     * @param {?} _\n     * @param {?} __\n     * @param {?=} ___\n     * @return {?}\n     */\n    removeEventListener(_, __, ___) {\n    }\n    /**\n     * @param {?} _\n     * @return {?}\n     */\n    dispatchEvent(_) {\n        return false;\n    }\n}\n/** *\n * Pre-configured provider for MockMatchMedia\n  @type {?} */\nconst MockMatchMediaProvider = {\n    // tslint:disable-line:variable-name\n    provide: MatchMedia,\n    useClass: MockMatchMedia\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Special server-only class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass ServerMediaQueryList {\n    /**\n     * @param {?} _mediaQuery\n     */\n    constructor(_mediaQuery) {\n        this._mediaQuery = _mediaQuery;\n        this._isActive = false;\n        this._listeners = [];\n        this.onchange = null;\n    }\n    /**\n     * @return {?}\n     */\n    get matches() {\n        return this._isActive;\n    }\n    /**\n     * @return {?}\n     */\n    get media() {\n        return this._mediaQuery;\n    }\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     * @return {?}\n     */\n    destroy() {\n        this.deactivate();\n        this._listeners = [];\n    }\n    /**\n     * Notify all listeners that 'matches === TRUE'\n     * @return {?}\n     */\n    activate() {\n        if (!this._isActive) {\n            this._isActive = true;\n            this._listeners.forEach((callback) => {\n                /** @type {?} */\n                const cb = /** @type {?} */ ((callback));\n                cb.call(null, this);\n            });\n        }\n        return this;\n    }\n    /**\n     * Notify all listeners that 'matches === false'\n     * @return {?}\n     */\n    deactivate() {\n        if (this._isActive) {\n            this._isActive = false;\n            this._listeners.forEach((callback) => {\n                /** @type {?} */\n                const cb = /** @type {?} */ ((callback));\n                cb.call(null, this);\n            });\n        }\n        return this;\n    }\n    /**\n     * Add a listener to our internal list to activate later\n     * @param {?} listener\n     * @return {?}\n     */\n    addListener(listener) {\n        if (this._listeners.indexOf(listener) === -1) {\n            this._listeners.push(listener);\n        }\n        if (this._isActive) {\n            /** @type {?} */\n            const cb = /** @type {?} */ ((listener));\n            cb.call(null, this);\n        }\n    }\n    /**\n     * Don't need to remove listeners in the server environment\n     * @param {?} _\n     * @return {?}\n     */\n    removeListener(_) {\n    }\n    /**\n     * @param {?} _\n     * @param {?} __\n     * @param {?=} ___\n     * @return {?}\n     */\n    addEventListener(_, __, ___) {\n    }\n    /**\n     * @param {?} _\n     * @param {?} __\n     * @param {?=} ___\n     * @return {?}\n     */\n    removeEventListener(_, __, ___) {\n    }\n    /**\n     * @param {?} _\n     * @return {?}\n     */\n    dispatchEvent(_) {\n        return false;\n    }\n}\n/**\n * Special server-only implementation of MatchMedia that uses the above\n * ServerMediaQueryList as its internal representation\n *\n * Also contains methods to activate and deactivate breakpoints\n */\nclass ServerMatchMedia extends MatchMedia {\n    /**\n     * @param {?} _zone\n     * @param {?} _platformId\n     * @param {?} _document\n     */\n    constructor(_zone, _platformId, _document) {\n        super(_zone, _platformId, _document);\n        this._zone = _zone;\n        this._platformId = _platformId;\n        this._document = _document;\n        this._registry = new Map();\n        this._source = new BehaviorSubject(new MediaChange(true));\n        this._observable$ = this._source.asObservable();\n    }\n    /**\n     * Activate the specified breakpoint if we're on the server, no-op otherwise\n     * @param {?} bp\n     * @return {?}\n     */\n    activateBreakpoint(bp) {\n        /** @type {?} */\n        const lookupBreakpoint = this._registry.get(bp.mediaQuery);\n        if (lookupBreakpoint) {\n            lookupBreakpoint.activate();\n        }\n    }\n    /**\n     * Deactivate the specified breakpoint if we're on the server, no-op otherwise\n     * @param {?} bp\n     * @return {?}\n     */\n    deactivateBreakpoint(bp) {\n        /** @type {?} */\n        const lookupBreakpoint = this._registry.get(bp.mediaQuery);\n        if (lookupBreakpoint) {\n            lookupBreakpoint.deactivate();\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     * @param {?} query\n     * @return {?}\n     */\n    _buildMQL(query) {\n        return new ServerMediaQueryList(query);\n    }\n}\nServerMatchMedia.Éµfac = function ServerMatchMedia_Factory(t) { return new (t || ServerMatchMedia)(Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµinject(PLATFORM_ID), Éµngcc0.ÉµÉµinject(DOCUMENT)); };\nServerMatchMedia.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: ServerMatchMedia, factory: ServerMatchMedia.Éµfac });\n/** @nocollapse */\nServerMatchMedia.ctorParameters = () => [\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(ServerMatchMedia, [{\n        type: Injectable\n    }], function () { return [{ type: Éµngcc0.NgZone }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * MediaMonitor uses the MatchMedia service to observe mediaQuery changes (both activations and\n * deactivations). These changes are are published as MediaChange notifications.\n *\n * Note: all notifications will be performed within the\n * ng Zone to trigger change detections and component updates.\n *\n * It is the MediaMonitor that:\n *  - auto registers all known breakpoints\n *  - injects alias information into each raw MediaChange event\n *  - provides accessor to the currently active BreakPoint\n *  - publish list of overlapping BreakPoint(s); used by ResponsiveActivation\n */\nclass MediaMonitor {\n    /**\n     * @param {?} _breakpoints\n     * @param {?} _matchMedia\n     */\n    constructor(_breakpoints, _matchMedia) {\n        this._breakpoints = _breakpoints;\n        this._matchMedia = _matchMedia;\n        this._registerBreakpoints();\n    }\n    /**\n     * Read-only accessor to the list of breakpoints configured in the BreakPointRegistry provider\n     * @return {?}\n     */\n    get breakpoints() {\n        return [...this._breakpoints.items];\n    }\n    /**\n     * @return {?}\n     */\n    get activeOverlaps() {\n        /** @type {?} */\n        let items = this._breakpoints.overlappings.reverse();\n        return items.filter((bp) => {\n            return this._matchMedia.isActive(bp.mediaQuery);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    get active() {\n        /** @type {?} */\n        let found = null;\n        /** @type {?} */\n        let items = this.breakpoints.reverse();\n        items.forEach(bp => {\n            if (bp.alias !== '') {\n                if (!found && this._matchMedia.isActive(bp.mediaQuery)) {\n                    found = bp;\n                }\n            }\n        });\n        /** @type {?} */\n        let first = this.breakpoints[0];\n        return found || (this._matchMedia.isActive(first.mediaQuery) ? first : null);\n    }\n    /**\n     * For the specified mediaQuery alias, is the mediaQuery range active?\n     * @param {?} alias\n     * @return {?}\n     */\n    isActive(alias) {\n        /** @type {?} */\n        let bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n        return this._matchMedia.isActive(bp ? bp.mediaQuery : alias);\n    }\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * If specific breakpoint is observed, only return *activated* events\n     * otherwise return all events for BOTH activated + deactivated changes.\n     * @param {?=} alias\n     * @return {?}\n     */\n    observe(alias) {\n        /** @type {?} */\n        let bp = this._breakpoints.findByAlias(alias || '') ||\n            this._breakpoints.findByQuery(alias || '');\n        /** @type {?} */\n        let hasAlias = (change) => (bp ? change.mqAlias !== '' : true);\n        /** @type {?} */\n        let media$ = this._matchMedia.observe(bp ? bp.mediaQuery : alias);\n        return media$.pipe(map(change => mergeAlias(change, bp)), filter(hasAlias));\n    }\n    /**\n     * Immediate calls to matchMedia() to establish listeners\n     * and prepare for immediate subscription notifications\n     * @return {?}\n     */\n    _registerBreakpoints() {\n        /** @type {?} */\n        let queries = this._breakpoints.sortedItems.map(bp => bp.mediaQuery);\n        this._matchMedia.registerQuery(queries);\n    }\n}\nMediaMonitor.Éµfac = function MediaMonitor_Factory(t) { return new (t || MediaMonitor)(Éµngcc0.ÉµÉµinject(BreakPointRegistry), Éµngcc0.ÉµÉµinject(MatchMedia)); };\nMediaMonitor.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: MediaMonitor, factory: MediaMonitor.Éµfac, providedIn: 'root' });\n/** @nocollapse */\nMediaMonitor.ctorParameters = () => [\n    { type: BreakPointRegistry },\n    { type: MatchMedia }\n];\n/** @nocollapse */ MediaMonitor.ngInjectableDef = defineInjectable({ factory: function MediaMonitor_Factory() { return new MediaMonitor(inject(BreakPointRegistry), inject(MatchMedia)); }, token: MediaMonitor, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MediaMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: BreakPointRegistry }, { type: MatchMedia }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n * @param {?} target\n * @return {?}\n */\nfunction applyCssPrefixes(target) {\n    for (let key in target) {\n        /** @type {?} */\n        let value = target[key] || '';\n        switch (key) {\n            case 'display':\n                if (value === 'flex') {\n                    target['display'] = [\n                        '-webkit-flex',\n                        'flex'\n                    ];\n                }\n                else if (value === 'inline-flex') {\n                    target['display'] = [\n                        '-webkit-inline-flex',\n                        'inline-flex'\n                    ];\n                }\n                else {\n                    target['display'] = value;\n                }\n                break;\n            case 'align-items':\n            case 'align-self':\n            case 'align-content':\n            case 'flex':\n            case 'flex-basis':\n            case 'flex-flow':\n            case 'flex-grow':\n            case 'flex-shrink':\n            case 'flex-wrap':\n            case 'justify-content':\n                target['-webkit-' + key] = value;\n                break;\n            case 'flex-direction':\n                value = value || 'row';\n                target['-webkit-flex-direction'] = value;\n                target['flex-direction'] = value;\n                break;\n            case 'order':\n                target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n                break;\n        }\n    }\n    return target;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass StyleUtils {\n    /**\n     * @param {?} _serverStylesheet\n     * @param {?} _serverModuleLoaded\n     * @param {?} _platformId\n     * @param {?} layoutConfig\n     */\n    constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n        this._serverStylesheet = _serverStylesheet;\n        this._serverModuleLoaded = _serverModuleLoaded;\n        this._platformId = _platformId;\n        this.layoutConfig = layoutConfig;\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     * @param {?} element\n     * @param {?} style\n     * @param {?=} value\n     * @return {?}\n     */\n    applyStyleToElement(element, style, value = null) {\n        /** @type {?} */\n        let styles = {};\n        if (typeof style === 'string') {\n            styles[style] = value;\n            style = styles;\n        }\n        styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        this._applyMultiValueStyleToElement(styles, element);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     * @param {?} style\n     * @param {?=} elements\n     * @return {?}\n     */\n    applyStyleToElements(style, elements = []) {\n        /** @type {?} */\n        const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        elements.forEach(el => {\n            this._applyMultiValueStyleToElement(styles, el);\n        });\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     * @param {?} target\n     * @return {?}\n     */\n    getFlowDirection(target) {\n        /** @type {?} */\n        const query = 'flex-direction';\n        /** @type {?} */\n        let value = this.lookupStyle(target, query);\n        if (value === FALLBACK_STYLE) {\n            value = '';\n        }\n        /** @type {?} */\n        const hasInlineValue = this.lookupInlineStyle(target, query) ||\n            (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n        return [value || 'row', hasInlineValue];\n    }\n    /**\n     * Find the DOM element's raw attribute value (if any)\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    lookupAttributeValue(element, attribute) {\n        return element.getAttribute(attribute) || '';\n    }\n    /**\n     * Find the DOM element's inline style value (if any)\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n    lookupInlineStyle(element, styleName) {\n        return isPlatformBrowser(this._platformId) ?\n            element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n    }\n    /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} inlineOnly\n     * @return {?}\n     */\n    lookupStyle(element, styleName, inlineOnly = false) {\n        /** @type {?} */\n        let value = '';\n        if (element) {\n            /** @type {?} */\n            let immediateValue = value = this.lookupInlineStyle(element, styleName);\n            if (!immediateValue) {\n                if (isPlatformBrowser(this._platformId)) {\n                    if (!inlineOnly) {\n                        value = getComputedStyle(element).getPropertyValue(styleName);\n                    }\n                }\n                else {\n                    if (this._serverModuleLoaded) {\n                        value = this._serverStylesheet.getStyleForElement(element, styleName);\n                    }\n                }\n            }\n        }\n        // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n        //       in which case getComputedStyle() should determine a valid value.\n        return value ? value.trim() : FALLBACK_STYLE;\n    }\n    /**\n     * Applies the styles to the element. The styles object map may contain an array of values\n     * Each value will be added as element style\n     * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n     * @param {?} styles\n     * @param {?} element\n     * @return {?}\n     */\n    _applyMultiValueStyleToElement(styles, element) {\n        Object.keys(styles).sort().forEach(key => {\n            /** @type {?} */\n            const el = styles[key];\n            /** @type {?} */\n            const values = Array.isArray(el) ? el : [el];\n            values.sort();\n            for (let value of values) {\n                value = value ? value + '' : '';\n                if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n                    isPlatformBrowser(this._platformId) ?\n                        element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n                }\n                else {\n                    this._serverStylesheet.addStyleToElement(element, key, value);\n                }\n            }\n        });\n    }\n    /**\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    _setServerStyle(element, styleName, styleValue) {\n        styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n        /** @type {?} */\n        const styleMap = this._readStyleAttribute(element);\n        styleMap[styleName] = styleValue || '';\n        this._writeStyleAttribute(element, styleMap);\n    }\n    /**\n     * @param {?} element\n     * @param {?} styleName\n     * @return {?}\n     */\n    _getServerStyle(element, styleName) {\n        /** @type {?} */\n        const styleMap = this._readStyleAttribute(element);\n        return styleMap[styleName] || '';\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    _readStyleAttribute(element) {\n        /** @type {?} */\n        const styleMap = {};\n        /** @type {?} */\n        const styleAttribute = element.getAttribute('style');\n        if (styleAttribute) {\n            /** @type {?} */\n            const styleList = styleAttribute.split(/;+/g);\n            for (let i = 0; i < styleList.length; i++) {\n                /** @type {?} */\n                const style = styleList[i].trim();\n                if (style.length > 0) {\n                    /** @type {?} */\n                    const colonIndex = style.indexOf(':');\n                    if (colonIndex === -1) {\n                        throw new Error(`Invalid CSS style: ${style}`);\n                    }\n                    /** @type {?} */\n                    const name = style.substr(0, colonIndex).trim();\n                    styleMap[name] = style.substr(colonIndex + 1).trim();\n                }\n            }\n        }\n        return styleMap;\n    }\n    /**\n     * @param {?} element\n     * @param {?} styleMap\n     * @return {?}\n     */\n    _writeStyleAttribute(element, styleMap) {\n        /** @type {?} */\n        let styleAttrValue = '';\n        for (const key in styleMap) {\n            /** @type {?} */\n            const newValue = styleMap[key];\n            if (newValue) {\n                styleAttrValue += key + ':' + styleMap[key] + ';';\n            }\n        }\n        element.setAttribute('style', styleAttrValue);\n    }\n}\nStyleUtils.Éµfac = function StyleUtils_Factory(t) { return new (t || StyleUtils)(Éµngcc0.ÉµÉµinject(StylesheetMap, 8), Éµngcc0.ÉµÉµinject(SERVER_TOKEN, 8), Éµngcc0.ÉµÉµinject(PLATFORM_ID), Éµngcc0.ÉµÉµinject(LAYOUT_CONFIG)); };\nStyleUtils.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: StyleUtils, factory: StyleUtils.Éµfac, providedIn: 'root' });\n/** @nocollapse */\nStyleUtils.ctorParameters = () => [\n    { type: StylesheetMap, decorators: [{ type: Optional }] },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [SERVER_TOKEN,] }] },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [LAYOUT_CONFIG,] }] }\n];\n/** @nocollapse */ StyleUtils.ngInjectableDef = defineInjectable({ factory: function StyleUtils_Factory() { return new StyleUtils(inject(StylesheetMap, 8), inject(SERVER_TOKEN, 8), inject(PLATFORM_ID), inject(LAYOUT_CONFIG)); }, token: StyleUtils, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(StyleUtils, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: StylesheetMap, decorators: [{\n                type: Optional\n            }] }, { type: Boolean, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [SERVER_TOKEN]\n            }] }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [LAYOUT_CONFIG]\n            }] }]; }, null); })();\n/** @type {?} */\nconst FALLBACK_STYLE = 'block';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n * @param {?} basis\n * @param {?=} grow\n * @param {?=} shrink\n * @return {?}\n */\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n    /** @type {?} */\n    let parts = [grow, shrink, basis];\n    /** @type {?} */\n    let j = basis.indexOf('calc');\n    if (j > 0) {\n        parts[2] = _validateCalcValue(basis.substring(j).trim());\n        /** @type {?} */\n        let matches = basis.substr(0, j).trim().split(' ');\n        if (matches.length == 2) {\n            parts[0] = matches[0];\n            parts[1] = matches[1];\n        }\n    }\n    else if (j == 0) {\n        parts[2] = _validateCalcValue(basis.trim());\n    }\n    else {\n        /** @type {?} */\n        let matches = basis.split(' ');\n        parts = (matches.length === 3) ? matches : [\n            grow, shrink, basis\n        ];\n    }\n    return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n * @param {?} calc\n * @return {?}\n */\nfunction _validateCalcValue(calc) {\n    return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { removeStyles, BROWSER_PROVIDER, CLASS_NAME, CoreModule, MediaChange, StylesheetMap, DEFAULT_CONFIG, LAYOUT_CONFIG, SERVER_TOKEN, BREAKPOINT, BaseDirective, BaseDirectiveAdapter, RESPONSIVE_ALIASES, DEFAULT_BREAKPOINTS, ScreenTypes, ORIENTATION_BREAKPOINTS, BreakPointRegistry, BREAKPOINTS, MatchMedia, MockMatchMedia, MockMediaQueryList, MockMatchMediaProvider, ServerMediaQueryList, ServerMatchMedia, MediaMonitor, ObservableMedia, MediaService, ObservableMediaProvider, KeyOptions, ResponsiveActivation, StyleUtils, validateBasis };\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,sBAAsB,EAAEC,WAAW,EAAEC,cAAc,EAAEC,MAAM,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,YAAY,EAAEC,QAAQ,EAAEC,gBAAgB,QAAQ,eAAe;AAC3K,SAASC,QAAQ,EAAEC,iBAAiB,EAAEC,gBAAgB,QAAQ,iBAAiB;AAC/E,SAASC,eAAe,QAAQ,MAAM;AACtC,SAASC,MAAM,EAAEC,GAAG,QAAQ,gBAAgB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,SAASC,YAAY,CAACC,SAAS,EAAEC,UAAU,EAAE;EACzC,OAAO,MAAM;IACT,IAAIR,iBAAiB,CAACQ,UAAU,CAAC,EAAE;MAC/B;MACA,MAAMC,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAACJ,SAAS,CAACK,gBAAgB,CAAE,WAAUC,UAAW,GAAE,CAAC,CAAC;MACjF;MACA,MAAMC,UAAU,GAAG,sBAAsB;MACzCL,QAAQ,CAACM,OAAO,CAACC,EAAE,IAAI;QACnBA,EAAE,CAACC,SAAS,CAACC,QAAQ,CAAE,GAAEL,UAAW,KAAI,CAAC,IAAIG,EAAE,CAACG,UAAU,GACtDH,EAAE,CAACG,UAAU,CAACC,WAAW,CAACJ,EAAE,CAAC,GAAGA,EAAE,CAACK,SAAS,CAACC,OAAO,CAACR,UAAU,EAAE,EAAE,CAAC;MAC5E,CAAC,CAAC;IACN;EACJ,CAAC;AACL;AACA;AACA;AACA;AACA,MAAMS,gBAAgB,GAAG;EACrBC,OAAO,EAAE,gBAAkBpC,sBAAuB;EAClDqC,UAAU,EAAEnB,YAAY;EACxBoB,IAAI,EAAE,CAAC3B,QAAQ,EAAEV,WAAW,CAAC;EAC7BsC,KAAK,EAAE;AACX,CAAC;AACD;AACA,MAAMd,UAAU,GAAG,cAAc;;AAEjC;AACA;AACA;AACA;AACA;AACA,MAAMe,UAAU,GAAG,IAAItC,cAAc,CAAC,8DAA8D,EAAE;EAClGuC,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAE,MAAM;AACnB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,CACvB,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CACnE;AACD;AACA,MAAMC,mBAAmB,GAAG,CACxB;EACIC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE;AAChB,CAAC,EACD;EACID,KAAK,EAAE,OAAO;EACdE,WAAW,EAAE,IAAI;EACjBD,UAAU,EAAE;AAChB,CAAC,EACD;EACID,KAAK,EAAE,OAAO;EACdE,WAAW,EAAE,IAAI;EACjBD,UAAU,EAAE;AAChB,CAAC,EACD;EACID,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE;AAChB,CAAC,EACD;EACID,KAAK,EAAE,OAAO;EACdE,WAAW,EAAE,IAAI;EACjBD,UAAU,EAAE;AAChB,CAAC,EACD;EACID,KAAK,EAAE,OAAO;EACdE,WAAW,EAAE,IAAI;EACjBD,UAAU,EAAE;AAChB,CAAC,EACD;EACID,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE;AAChB,CAAC,EACD;EACID,KAAK,EAAE,OAAO;EACdE,WAAW,EAAE,IAAI;EACjBD,UAAU,EAAE;AAChB,CAAC,EACD;EACID,KAAK,EAAE,OAAO;EACdE,WAAW,EAAE,IAAI;EACjBD,UAAU,EAAE;AAChB,CAAC,EACD;EACID,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE;AAChB,CAAC,EACD;EACID,KAAK,EAAE,OAAO;EACdE,WAAW,EAAE,IAAI;EACjBD,UAAU,EAAE;AAChB,CAAC,EACD;EACID,KAAK,EAAE,OAAO;EACdE,WAAW,EAAE,IAAI;EACjBD,UAAU,EAAE;AAChB,CAAC,EACD;EACID,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE;AAChB,CAAC,CACJ;;AAED;AACA;AACA;AACA;;AAEA;AACA,MAAME,gBAAgB,GAAG,gDAAgD;AACzE;AACA,MAAMC,iBAAiB,GAAG,iDAAiD;AAC3E;AACA,MAAMC,gBAAgB,GAAG,yEAAyE;AAClG;AACA,MAAMC,eAAe,GAAG,uEAAuE;AAC/F;AACA,MAAMC,YAAY,GAAG,gDAAgD;AACrE;AACA,MAAMC,aAAa,GAAG,kDAAkD;AACxE;AACA,MAAMC,WAAW,GAAG;EAChB,SAAS,EAAG,GAAEN,gBAAiB,KAAIC,iBAAkB,EAAC;EACtD,QAAQ,EAAG,GAAEE,eAAgB,MAAKD,gBAAiB,EAAC;EACpD,KAAK,EAAG,GAAEE,YAAa,KAAIC,aAAc,GAAE;EAC3C,kBAAkB,EAAG,GAAEL,gBAAiB,EAAC;EACzC,iBAAiB,EAAG,GAAEG,eAAgB,GAAE;EACxC,cAAc,EAAG,GAAEC,YAAa,EAAC;EACjC,mBAAmB,EAAG,GAAEH,iBAAkB,GAAE;EAC5C,kBAAkB,EAAG,GAAEC,gBAAiB,EAAC;EACzC,eAAe,EAAG,GAAEG,aAAc;AACtC,CAAC;AACD;AACA;AACA;AACA,MAAME,uBAAuB,GAAG,CAC5B;EAAE,OAAO,EAAE,SAAS;EAAE,YAAY,EAAED,WAAW,CAACE;AAAQ,CAAC,EACzD;EAAE,OAAO,EAAE,mBAAmB;EAAE,YAAY,EAAEF,WAAW,CAACL;AAAkB,CAAC,EAC7E;EAAE,OAAO,EAAE,kBAAkB;EAAE,YAAY,EAAEK,WAAW,CAACN;AAAiB,CAAC,EAC3E;EAAE,OAAO,EAAE,QAAQ;EAAE,YAAY,EAAEM,WAAW,CAACG;AAAO,CAAC,EACvD;EAAE,OAAO,EAAE,kBAAkB;EAAE,YAAY,EAAEH,WAAW,CAACG;AAAO,CAAC,EACjE;EAAE,OAAO,EAAE,iBAAiB;EAAE,YAAY,EAAEH,WAAW,CAACH;AAAgB,CAAC,EACzE;EAAE,OAAO,EAAE,KAAK;EAAE,YAAY,EAAEG,WAAW,CAACI,GAAG;EAAEX,WAAW,EAAE;AAAK,CAAC,EACpE;EAAE,OAAO,EAAE,eAAe;EAAE,YAAY,EAAEO,WAAW,CAACD,aAAa;EAAEN,WAAW,EAAE;AAAK,CAAC,EACxF;EAAE,OAAO,EAAE,cAAc;EAAE,YAAY,EAAEO,WAAW,CAACF,YAAY;EAAEL,WAAW,EAAE;AAAK,CAAC,CACzF;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASY,YAAY,CAACC,IAAI,EAAE,GAAGC,OAAO,EAAE;EACpC,IAAID,IAAI,IAAI,IAAI,EAAE;IACd,MAAME,SAAS,CAAC,4CAA4C,CAAC;EACjE;EACA,KAAK,IAAIC,MAAM,IAAIF,OAAO,EAAE;IACxB,IAAIE,MAAM,IAAI,IAAI,EAAE;MAChB,KAAK,IAAIC,GAAG,IAAID,MAAM,EAAE;QACpB,IAAIA,MAAM,CAACE,cAAc,CAACD,GAAG,CAAC,EAAE;UAC5BJ,IAAI,CAACI,GAAG,CAAC,GAAGD,MAAM,CAACC,GAAG,CAAC;QAC3B;MACJ;IACJ;EACJ;EACA,OAAOJ,IAAI;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMM,gBAAgB,GAAG,WAAW;AACpC;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACC,IAAI,EAAE;EAC1B;EACA,IAAIC,KAAK,GAAGD,IAAI,CAACE,MAAM,GAAG,CAAC,GAAGF,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE;EACjD;EACA,IAAIC,SAAS,GAAIJ,IAAI,CAACE,MAAM,GAAG,CAAC,GAAIF,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;EACtD,OAAOJ,KAAK,CAACK,WAAW,EAAE,GAAGF,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,SAAS,CAACC,IAAI,EAAE;EACrB,OAAOA,IAAI,CACN1C,OAAO,CAACgC,gBAAgB,EAAE,GAAG,CAAC,CAC9BW,KAAK,CAAC,GAAG,CAAC,CACV7D,GAAG,CAACmD,cAAc,CAAC,CACnBW,IAAI,CAAC,EAAE,CAAC;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgB,CAACC,IAAI,EAAE;EAC5BA,IAAI,CAACrD,OAAO,CAAEsD,EAAE,IAAK;IACjB,IAAI,CAACA,EAAE,CAACC,MAAM,EAAE;MACZD,EAAE,CAACC,MAAM,GAAGP,SAAS,CAACM,EAAE,CAACpC,KAAK,CAAC,CAAC,CAAC;MACjCoC,EAAE,CAAClC,WAAW,GAAG,CAAC,CAACkC,EAAE,CAAClC,WAAW,CAAC,CAAC;IACvC;EACJ,CAAC,CAAC;;EACF,OAAOiC,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,YAAY,CAACC,QAAQ,EAAEC,MAAM,GAAG,EAAE,EAAE;EACzC;EACA,MAAMC,IAAI,GAAG,CAAC,CAAC;EACfF,QAAQ,CAACzD,OAAO,CAACsD,EAAE,IAAI;IACnBK,IAAI,CAACL,EAAE,CAACpC,KAAK,CAAC,GAAGoC,EAAE;EACvB,CAAC,CAAC;EACF;EACAI,MAAM,CAAC1D,OAAO,CAAEsD,EAAE,IAAK;IACnB,IAAIK,IAAI,CAACL,EAAE,CAACpC,KAAK,CAAC,EAAE;MAChBc,YAAY,CAAC2B,IAAI,CAACL,EAAE,CAACpC,KAAK,CAAC,EAAEoC,EAAE,CAAC;IACpC,CAAC,MACI;MACDK,IAAI,CAACL,EAAE,CAACpC,KAAK,CAAC,GAAGoC,EAAE;IACvB;EACJ,CAAC,CAAC;EACF,OAAOF,gBAAgB,CAACQ,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACtE,GAAG,CAACyE,CAAC,IAAIH,IAAI,CAACG,CAAC,CAAC,CAAC,CAAC;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACnBC,eAAe,EAAE,IAAI;EACrBC,iBAAiB,EAAE,KAAK;EACxBC,iBAAiB,EAAE,KAAK;EACxBC,qBAAqB,EAAE,KAAK;EAC5BC,YAAY,EAAE,KAAK;EACnBC,kBAAkB,EAAE;AACxB,CAAC;AACD;AACA,MAAMC,aAAa,GAAG,IAAI/F,cAAc,CAAC,mDAAmD,EAAE;EAC1FuC,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAE,MAAMgD;AACnB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,WAAW,GAAG,IAAIhG,cAAc,CAAC,0CAA0C,EAAE;EAC/EuC,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAE,MAAM;IACX;IACA,MAAMyD,WAAW,GAAGhG,MAAM,CAACqC,UAAU,CAAC;IACtC;IACA,MAAM4D,YAAY,GAAGjG,MAAM,CAAC8F,aAAa,CAAC;IAC1C;IACA,MAAMI,cAAc,GAAG,EAAE,CAACC,MAAM,CAACC,KAAK,CAAC,EAAE,EAAE,CAACJ,WAAW,IAAI,EAAE,EACxDnF,GAAG,CAAEwF,CAAC,IAAKlF,KAAK,CAACmF,OAAO,CAACD,CAAC,CAAC,GAAGA,CAAC,GAAG,CAACA,CAAC,CAAC,CAAC,CAAC;IAC5C;IACA,MAAME,QAAQ,GAAG,CAACN,YAAY,CAACP,iBAAiB,GAAG,EAAE,GAAGjD,mBAAmB,EACtE0D,MAAM,CAACF,YAAY,CAACR,iBAAiB,GAAGrC,uBAAuB,GAAG,EAAE,CAAC;IAC1E,OAAO4B,YAAY,CAACuB,QAAQ,EAAEL,cAAc,CAAC;EACjD;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,kBAAkB,CAAC;EACrB;AACJ;AACA;EACIC,WAAW,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EACA;AACJ;AACA;AACA;EACI,IAAIC,KAAK,GAAG;IACR,OAAO,CAAC,GAAG,IAAI,CAACD,SAAS,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIE,WAAW,GAAG;IACd;IACA,IAAIC,QAAQ,GAAG,IAAI,CAACH,SAAS,CAAC9F,MAAM,CAACkG,EAAE,IAAIA,EAAE,CAAClE,WAAW,KAAK,IAAI,CAAC;IACnE;IACA,IAAImE,WAAW,GAAG,IAAI,CAACL,SAAS,CAAC9F,MAAM,CAACkG,EAAE,IAAIA,EAAE,CAAClE,WAAW,KAAK,IAAI,CAAC;IACtE,OAAO,CAAC,GAAGiE,QAAQ,EAAE,GAAGE,WAAW,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACtE,KAAK,EAAE;IACf,OAAO,IAAI,CAACgE,SAAS,CAACO,IAAI,CAACnC,EAAE,IAAIA,EAAE,CAACpC,KAAK,IAAIA,KAAK,CAAC,IAAI,IAAI;EAC/D;EACA;AACJ;AACA;AACA;EACIwE,WAAW,CAACC,KAAK,EAAE;IACf,OAAO,IAAI,CAACT,SAAS,CAACO,IAAI,CAACnC,EAAE,IAAIA,EAAE,CAACnC,UAAU,IAAIwE,KAAK,CAAC,IAAI,IAAI;EACpE;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIC,YAAY,GAAG;IACf,OAAO,IAAI,CAACV,SAAS,CAAC9F,MAAM,CAACkG,EAAE,IAAIA,EAAE,CAAClE,WAAW,IAAI,IAAI,CAAC;EAC9D;EACA;AACJ;AACA;AACA;EACI,IAAIyE,OAAO,GAAG;IACV,OAAO,IAAI,CAACX,SAAS,CAAC7F,GAAG,CAACiG,EAAE,IAAIA,EAAE,CAACpE,KAAK,CAAC;EAC7C;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAI4E,QAAQ,GAAG;IACX,OAAO,IAAI,CAACZ,SAAS,CAAC7F,GAAG,CAACiG,EAAE,IAAI,CAAC,CAACA,EAAE,CAAC/B,MAAM,GAAG+B,EAAE,CAAC/B,MAAM,GAAG,EAAE,CAAC;EACjE;AACJ;AACAyB,kBAAkB,CAACe,IAAI,GAAG,SAASC,0BAA0B,CAACC,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIjB,kBAAkB,EAAE1F,MAAM,CAAC4G,QAAQ,CAAC3B,WAAW,CAAC,CAAC;AAAE,CAAC;AACxIS,kBAAkB,CAACmB,KAAK,GAAG,aAAc7G,MAAM,CAAC8G,kBAAkB,CAAC;EAAEC,KAAK,EAAErB,kBAAkB;EAAEjE,OAAO,EAAEiE,kBAAkB,CAACe,IAAI;EAAEjF,UAAU,EAAE;AAAO,CAAC,CAAC;AACvJ;AACAkE,kBAAkB,CAACsB,cAAc,GAAG,MAAM,CACtC;EAAEC,IAAI,EAAE5G,KAAK;EAAE6G,UAAU,EAAE,CAAC;IAAED,IAAI,EAAE7H,MAAM;IAAE+H,IAAI,EAAE,CAAClC,WAAW;EAAG,CAAC;AAAE,CAAC,CACxE;AACD;AAAmBS,kBAAkB,CAAC0B,eAAe,GAAG3H,gBAAgB,CAAC;EAAEgC,OAAO,EAAE,SAASiF,0BAA0B,GAAG;IAAE,OAAO,IAAIhB,kBAAkB,CAACxG,MAAM,CAAC+F,WAAW,CAAC,CAAC;EAAE,CAAC;EAAE8B,KAAK,EAAErB,kBAAkB;EAAElE,UAAU,EAAE;AAAO,CAAC,CAAC;AACnO,CAAC,YAAY;EAAE,CAAC,OAAO6F,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrH,MAAM,CAACsH,iBAAiB,CAAC5B,kBAAkB,EAAE,CAAC;IACxGuB,IAAI,EAAE9H,UAAU;IAChBgI,IAAI,EAAE,CAAC;MAAE3F,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEyF,IAAI,EAAE5G,KAAK;MAAE6G,UAAU,EAAE,CAAC;QAC1CD,IAAI,EAAE7H,MAAM;QACZ+H,IAAI,EAAE,CAAClC,WAAW;MACtB,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsC,WAAW,CAAC;EACd;AACJ;AACA;AACA;AACA;AACA;EACI5B,WAAW,CAAC6B,OAAO,GAAG,KAAK,EAAE3F,UAAU,GAAG,KAAK,EAAE4F,OAAO,GAAG,EAAE,EAAExD,MAAM,GAAG,EAAE,CAAC;EAAA,EACzE;IACE,IAAI,CAACuD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAC3F,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAAC4F,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACxD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACyD,QAAQ,GAAG,EAAE;EACtB;EACA;AACJ;AACA;EACIC,KAAK,GAAG;IACJ,OAAO,IAAIJ,WAAW,CAAC,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC3F,UAAU,EAAE,IAAI,CAAC4F,OAAO,EAAE,IAAI,CAACxD,MAAM,CAAC;EACpF;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2D,UAAU,CAAC;EACb;AACJ;AACA;AACA;AACA;EACIjC,WAAW,CAACkC,KAAK,EAAEC,WAAW,EAAE5H,SAAS,EAAE;IACvC,IAAI,CAAC2H,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAAC5H,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAAC0F,SAAS,GAAG,IAAImC,GAAG,EAAE;IAC1B,IAAI,CAACC,OAAO,GAAG,IAAInI,eAAe,CAAC,IAAI0H,WAAW,CAAC,IAAI,CAAC,CAAC;IACzD,IAAI,CAACU,YAAY,GAAG,IAAI,CAACD,OAAO,CAACE,YAAY,EAAE;EACnD;EACA;AACJ;AACA;AACA;AACA;EACIC,QAAQ,CAACtG,UAAU,EAAE;IACjB;IACA,IAAIuG,GAAG,GAAG,IAAI,CAACxC,SAAS,CAACyC,GAAG,CAACxG,UAAU,CAAC;IACxC,OAAO,CAAC,CAACuG,GAAG,GAAGA,GAAG,CAACZ,OAAO,GAAG,KAAK;EACtC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIc,OAAO,CAACzG,UAAU,EAAE;IAChB,IAAIA,UAAU,EAAE;MACZ,IAAI,CAAC0G,aAAa,CAAC1G,UAAU,CAAC;IAClC;IACA,OAAO,IAAI,CAACoG,YAAY,CAACO,IAAI,CAAC1I,MAAM,CAAE2I,MAAM,IAAK;MAC7C,OAAO5G,UAAU,GAAI4G,MAAM,CAAC5G,UAAU,KAAKA,UAAU,GAAI,IAAI;IACjE,CAAC,CAAC,CAAC;EACP;EACA;AACJ;AACA;AACA;AACA;AACA;EACI0G,aAAa,CAAC1G,UAAU,EAAE;IACtB;IACA,IAAIkC,IAAI,GAAG2E,cAAc,CAAC7G,UAAU,CAAC;IACrC,IAAIkC,IAAI,CAACV,MAAM,GAAG,CAAC,EAAE;MACjB,IAAI,CAACsF,gBAAgB,CAAC5E,IAAI,EAAE,IAAI,CAAC7D,SAAS,CAAC;MAC3C6D,IAAI,CAACrD,OAAO,CAAC2F,KAAK,IAAI;QAClB;QACA,IAAI+B,GAAG,GAAG,IAAI,CAACxC,SAAS,CAACyC,GAAG,CAAChC,KAAK,CAAC;QACnC;QACA,IAAIuC,UAAU,GAAIC,CAAC,IAAK;UACpB,IAAI,CAAChB,KAAK,CAACiB,GAAG,CAAC,MAAM;YACjB;YACA,IAAIL,MAAM,GAAG,IAAIlB,WAAW,CAACsB,CAAC,CAACrB,OAAO,EAAEnB,KAAK,CAAC;YAC9C,IAAI,CAAC2B,OAAO,CAACe,IAAI,CAACN,MAAM,CAAC;UAC7B,CAAC,CAAC;QACN,CAAC;QACD,IAAI,CAACL,GAAG,EAAE;UACNA,GAAG,GAAG,IAAI,CAACY,SAAS,CAAC3C,KAAK,CAAC;UAC3B+B,GAAG,CAACa,WAAW,CAACL,UAAU,CAAC;UAC3B,IAAI,CAAChD,SAAS,CAACsD,GAAG,CAAC7C,KAAK,EAAE+B,GAAG,CAAC;QAClC;QACA,IAAIA,GAAG,CAACZ,OAAO,EAAE;UACboB,UAAU,EAAC,gBAAmBR,GAAG,CAAG;QACxC;MACJ,CAAC,CAAC;IACN;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIY,SAAS,CAAC3C,KAAK,EAAE;IACb;IACA,IAAI8C,SAAS,GAAGxJ,iBAAiB,CAAC,IAAI,CAACmI,WAAW,CAAC,IAC/C,CAAC,CAAC,CAAC,gBAAkBsB,MAAM,CAAGC,UAAU,CAAC,KAAK,CAAC,CAACJ,WAAW;IAC/D,OAAOE,SAAS,GAAI,gBAAkBC,MAAM,CAAGC,UAAU,CAAChD,KAAK,CAAC,GAAG,gBAAmB;MAClFmB,OAAO,EAAEnB,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,EAAE;MACxCiD,KAAK,EAAEjD,KAAK;MACZ4C,WAAW,EAAE,MAAM,CACnB,CAAC;MACDM,cAAc,EAAE,MAAM,CACtB;IACJ,CAAG;EACP;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIZ,gBAAgB,CAACa,YAAY,EAAEtJ,SAAS,EAAE;IACtC;IACA,MAAM6D,IAAI,GAAGyF,YAAY,CAAC1J,MAAM,CAACkG,EAAE,IAAI,CAACyD,UAAU,CAACzD,EAAE,CAAC,CAAC;IACvD,IAAIjC,IAAI,CAACV,MAAM,GAAG,CAAC,EAAE;MACjB;MACA,MAAMgD,KAAK,GAAGtC,IAAI,CAACF,IAAI,CAAC,IAAI,CAAC;MAC7B,IAAI;QACA;QACA,IAAI6F,OAAO,GAAGxJ,SAAS,CAACyJ,aAAa,CAAC,OAAO,CAAC;QAC9CD,OAAO,CAACE,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC;QACxC,IAAI,CAAC,CAAC,gBAAkBF,OAAO,CAAGG,UAAU,EAAE;UAC1C;UACA,IAAIC,OAAO,GAAI;AACnC;AACA;AACA;AACA;AACA,SAASzD,KAAM;AACf,CAAC;UACmBqD,OAAO,CAACK,WAAW,CAAC7J,SAAS,CAAC8J,cAAc,CAACF,OAAO,CAAC,CAAC;QAC1D,CAAC,CAAC;QACA5J,SAAS,CAAC+J,IAAI,CAAGF,WAAW,CAACL,OAAO,CAAC;QACvC;QACA3F,IAAI,CAACrD,OAAO,CAACwJ,EAAE,IAAIT,UAAU,CAACS,EAAE,CAAC,GAAGR,OAAO,CAAC;MAChD,CAAC,CACD,OAAOb,CAAC,EAAE;QACNsB,OAAO,CAACC,KAAK,CAACvB,CAAC,CAAC;MACpB;IACJ;EACJ;AACJ;AACAjB,UAAU,CAACnB,IAAI,GAAG,SAAS4D,kBAAkB,CAAC1D,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIiB,UAAU,EAAE5H,MAAM,CAAC4G,QAAQ,CAAC5G,MAAM,CAACV,MAAM,CAAC,EAAEU,MAAM,CAAC4G,QAAQ,CAAC5H,WAAW,CAAC,EAAEgB,MAAM,CAAC4G,QAAQ,CAAClH,QAAQ,CAAC,CAAC;AAAE,CAAC;AAC3KkI,UAAU,CAACf,KAAK,GAAG,aAAc7G,MAAM,CAAC8G,kBAAkB,CAAC;EAAEC,KAAK,EAAEa,UAAU;EAAEnG,OAAO,EAAEmG,UAAU,CAACnB,IAAI;EAAEjF,UAAU,EAAE;AAAO,CAAC,CAAC;AAC/H;AACAoG,UAAU,CAACZ,cAAc,GAAG,MAAM,CAC9B;EAAEC,IAAI,EAAE3H;AAAO,CAAC,EAChB;EAAE2H,IAAI,EAAE3C,MAAM;EAAE4C,UAAU,EAAE,CAAC;IAAED,IAAI,EAAE7H,MAAM;IAAE+H,IAAI,EAAE,CAACnI,WAAW;EAAG,CAAC;AAAE,CAAC,EACtE;EAAEiI,IAAI,EAAEqD,SAAS;EAAEpD,UAAU,EAAE,CAAC;IAAED,IAAI,EAAE7H,MAAM;IAAE+H,IAAI,EAAE,CAACzH,QAAQ;EAAG,CAAC;AAAE,CAAC,CACzE;AACD;AAAmBkI,UAAU,CAACR,eAAe,GAAG3H,gBAAgB,CAAC;EAAEgC,OAAO,EAAE,SAAS4I,kBAAkB,GAAG;IAAE,OAAO,IAAIzC,UAAU,CAAC1I,MAAM,CAACI,MAAM,CAAC,EAAEJ,MAAM,CAACF,WAAW,CAAC,EAAEE,MAAM,CAACQ,QAAQ,CAAC,CAAC;EAAE,CAAC;EAAEqH,KAAK,EAAEa,UAAU;EAAEpG,UAAU,EAAE;AAAO,CAAC,CAAC;AACrO,CAAC,YAAY;EAAE,CAAC,OAAO6F,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrH,MAAM,CAACsH,iBAAiB,CAACM,UAAU,EAAE,CAAC;IAChGX,IAAI,EAAE9H,UAAU;IAChBgI,IAAI,EAAE,CAAC;MAAE3F,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEyF,IAAI,EAAEjH,MAAM,CAACV;IAAO,CAAC,EAAE;MAAE2H,IAAI,EAAE3C,MAAM;MAAE4C,UAAU,EAAE,CAAC;QACpED,IAAI,EAAE7H,MAAM;QACZ+H,IAAI,EAAE,CAACnI,WAAW;MACtB,CAAC;IAAE,CAAC,EAAE;MAAEiI,IAAI,EAAEqD,SAAS;MAAEpD,UAAU,EAAE,CAAC;QAClCD,IAAI,EAAE7H,MAAM;QACZ+H,IAAI,EAAE,CAACzH,QAAQ;MACnB,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;AACjC;AACA;AACA;AACA;AACA,MAAM+J,UAAU,GAAG,CAAC,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA,SAASf,cAAc,CAAC7G,UAAU,EAAE;EAChC,OAAQ,OAAOA,UAAU,KAAK,WAAW,GAAI,EAAE,GAC1C,OAAOA,UAAU,KAAK,QAAQ,GAAI,CAACA,UAAU,CAAC,GAAG0I,MAAM,EAAC,gBAAkB1I,UAAU,CAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0I,MAAM,CAACxG,IAAI,EAAE;EAClB;EACA,IAAIyG,IAAI,GAAG,CAAC,CAAC;EACb,OAAOzG,IAAI,CAACjE,MAAM,CAAC2K,IAAI,IAAI;IACvB,OAAOD,IAAI,CAACxH,cAAc,CAACyH,IAAI,CAAC,GAAG,KAAK,GAAID,IAAI,CAACC,IAAI,CAAC,GAAG,IAAK;EAClE,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,CAAC/H,IAAI,EAAEG,MAAM,EAAE;EAC9B,OAAOJ,YAAY,CAACC,IAAI,EAAEG,MAAM,GAAG;IAC/B2E,OAAO,EAAE3E,MAAM,CAAClB,KAAK;IACrBqC,MAAM,EAAEnB,MAAM,CAACmB;EACnB,CAAC,GAAG,CAAC,CAAC,CAAC;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM0G,eAAe,CAAC;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,CAAC;EACf;AACJ;AACA;AACA;EACIjF,WAAW,CAACT,WAAW,EAAE2F,YAAY,EAAE;IACnC,IAAI,CAAC3F,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAAC2F,YAAY,GAAGA,YAAY;IAChC;AACR;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,oBAAoB,EAAE;IAC3B,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,gBAAgB,EAAE;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACI9C,QAAQ,CAACvG,KAAK,EAAE;IACZ;IACA,IAAIyE,KAAK,GAAG,IAAI,CAAC6E,aAAa,CAACtJ,KAAK,CAAC;IACrC,OAAO,IAAI,CAACiJ,YAAY,CAAC1C,QAAQ,CAAC9B,KAAK,CAAC;EAC5C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI8E,SAAS,CAACC,cAAc,EAAEhB,KAAK,EAAEiB,QAAQ,EAAE;IACvC,IAAID,cAAc,EAAE;MAChB,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;QACpC,OAAO,IAAI,CAACJ,WAAW,CAACG,SAAS,CAACC,cAAc,CAACrC,IAAI,EAAEqC,cAAc,CAAChB,KAAK,EAAEgB,cAAc,CAACC,QAAQ,CAAC;MACzG;IACJ;IACA,OAAO,IAAI,CAACL,WAAW,CAACG,SAAS,CAACC,cAAc,EAAEhB,KAAK,EAAEiB,QAAQ,CAAC;EACtE;EACA;AACJ;AACA;AACA;AACA;EACInD,YAAY,GAAG;IACX,OAAO,IAAI,CAAC8C,WAAW;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;EACID,oBAAoB,GAAG;IACnB;IACA,IAAIO,OAAO,GAAG,IAAI,CAACpG,WAAW,CAACY,WAAW,CAAC/F,GAAG,CAACiE,EAAE,IAAIA,EAAE,CAACnC,UAAU,CAAC;IACnE,IAAI,CAACgJ,YAAY,CAACtC,aAAa,CAAC+C,OAAO,CAAC;EAC5C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIL,gBAAgB,GAAG;IACf;IACA,MAAMM,IAAI,GAAG,IAAI;IACjB;IACA,MAAMC,MAAM,GAAG,IAAI,CAACX,YAAY,CAACvC,OAAO,EAAE;IAC1C;IACA,MAAMmD,eAAe,GAAIhD,MAAM,IAAK;MAChC,OAAOA,MAAM,CAACjB,OAAO,KAAK,IAAI;IAClC,CAAC;IACD;IACA,MAAMkE,mBAAmB,GAAIjD,MAAM,IAAK;MACpC,OAAOiC,UAAU,CAACjC,MAAM,EAAE,IAAI,CAACkD,YAAY,CAAClD,MAAM,CAAC5G,UAAU,CAAC,CAAC;IACnE,CAAC;IACD;IACA,MAAM+J,eAAe,GAAInD,MAAM,IAAK;MAChC;MACA,IAAIzE,EAAE,GAAG,IAAI,CAACkB,WAAW,CAACkB,WAAW,CAACqC,MAAM,CAAC5G,UAAU,CAAC;MACxD,OAAO,CAACmC,EAAE,GAAG,IAAI,GAAG,EAAEuH,IAAI,CAACT,cAAc,IAAI9G,EAAE,CAAClC,WAAW,CAAC;IAChE,CAAC;IACD;AACR;AACA;AACA;AACA;IACQ,OAAO0J,MAAM,CAAChD,IAAI,CAAC1I,MAAM,CAAC2L,eAAe,CAAC,EAAE3L,MAAM,CAAC8L,eAAe,CAAC,EAAE7L,GAAG,CAAC2L,mBAAmB,CAAC,CAAC;EAClG;EACA;AACJ;AACA;AACA;AACA;EACIG,YAAY,CAACjK,KAAK,EAAE;IAChB,OAAO,IAAI,CAACsD,WAAW,CAACgB,WAAW,CAACtE,KAAK,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACI+J,YAAY,CAACtF,KAAK,EAAE;IAChB,OAAO,IAAI,CAACnB,WAAW,CAACkB,WAAW,CAACC,KAAK,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACI6E,aAAa,CAAC7E,KAAK,EAAE;IACjB;IACA,IAAIrC,EAAE,GAAG,IAAI,CAAC6H,YAAY,CAACxF,KAAK,CAAC,IAAI,IAAI,CAACsF,YAAY,CAACtF,KAAK,CAAC;IAC7D,OAAOrC,EAAE,GAAGA,EAAE,CAACnC,UAAU,GAAGwE,KAAK;EACrC;AACJ;AACAuE,YAAY,CAACnE,IAAI,GAAG,SAASqF,oBAAoB,CAACnF,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIiE,YAAY,EAAE5K,MAAM,CAAC4G,QAAQ,CAAClB,kBAAkB,CAAC,EAAE1F,MAAM,CAAC4G,QAAQ,CAACgB,UAAU,CAAC,CAAC;AAAE,CAAC;AAC1JgD,YAAY,CAAC/D,KAAK,GAAG,aAAc7G,MAAM,CAAC8G,kBAAkB,CAAC;EAAEC,KAAK,EAAE6D,YAAY;EAAEnJ,OAAO,EAAEmJ,YAAY,CAACnE,IAAI;EAAEjF,UAAU,EAAE;AAAO,CAAC,CAAC;AACrI;AACAoJ,YAAY,CAAC5D,cAAc,GAAG,MAAM,CAChC;EAAEC,IAAI,EAAEvB;AAAmB,CAAC,EAC5B;EAAEuB,IAAI,EAAEW;AAAW,CAAC,CACvB;AACD;AAAmBgD,YAAY,CAACxD,eAAe,GAAG3H,gBAAgB,CAAC;EAAEgC,OAAO,EAAE,SAASqK,oBAAoB,GAAG;IAAE,OAAO,IAAIlB,YAAY,CAAC1L,MAAM,CAACwG,kBAAkB,CAAC,EAAExG,MAAM,CAAC0I,UAAU,CAAC,CAAC;EAAE,CAAC;EAAEb,KAAK,EAAE6D,YAAY;EAAEpJ,UAAU,EAAE;AAAO,CAAC,CAAC;AACtO,CAAC,YAAY;EAAE,CAAC,OAAO6F,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrH,MAAM,CAACsH,iBAAiB,CAACsD,YAAY,EAAE,CAAC;IAClG3D,IAAI,EAAE9H,UAAU;IAChBgI,IAAI,EAAE,CAAC;MAAE3F,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEyF,IAAI,EAAEvB;IAAmB,CAAC,EAAE;MAAEuB,IAAI,EAAEW;IAAW,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;AACjG;AACA,MAAMmE,uBAAuB,GAAG;EAC5B;EACA5K,OAAO,EAAEwJ,eAAe;EACxBqB,QAAQ,EAAEpB;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqB,UAAU,CAAC;AAEjBA,UAAU,CAACxF,IAAI,GAAG,SAASyF,kBAAkB,CAACvF,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIsF,UAAU,GAAG;AAAE,CAAC;AACpFA,UAAU,CAACE,IAAI,GAAG,aAAcnM,MAAM,CAACoM,gBAAgB,CAAC;EAAEnF,IAAI,EAAEgF;AAAW,CAAC,CAAC;AAC7EA,UAAU,CAACI,IAAI,GAAG,aAAcrM,MAAM,CAACsM,gBAAgB,CAAC;EAAEC,SAAS,EAAE,CAACR,uBAAuB,EAAE7K,gBAAgB;AAAE,CAAC,CAAC;AACnH,CAAC,YAAY;EAAE,CAAC,OAAOmG,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrH,MAAM,CAACsH,iBAAiB,CAAC2E,UAAU,EAAE,CAAC;IAChGhF,IAAI,EAAE5H,QAAQ;IACd8H,IAAI,EAAE,CAAC;MACCoF,SAAS,EAAE,CAACR,uBAAuB,EAAE7K,gBAAgB;IACzD,CAAC;EACT,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsL,aAAa,CAAC;EAChB7G,WAAW,GAAG;IACV,IAAI,CAAC8G,UAAU,GAAG,IAAI1E,GAAG,EAAE;EAC/B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI2E,iBAAiB,CAACC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAE;IACrC;IACA,MAAMJ,UAAU,GAAG,IAAI,CAACA,UAAU,CAACpE,GAAG,CAACsE,OAAO,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACZA,UAAU,CAACvD,GAAG,CAAC0D,KAAK,EAAEC,KAAK,CAAC;IAChC,CAAC,MACI;MACD,IAAI,CAACJ,UAAU,CAACvD,GAAG,CAACyD,OAAO,EAAE,IAAI5E,GAAG,CAAC,CAAC,CAAC6E,KAAK,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3D;EACJ;EACA;AACJ;AACA;AACA;EACIC,WAAW,GAAG;IACV,IAAI,CAACL,UAAU,CAACM,KAAK,EAAE;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,kBAAkB,CAACrM,EAAE,EAAEsM,SAAS,EAAE;IAC9B;IACA,MAAMC,MAAM,GAAG,IAAI,CAACT,UAAU,CAACpE,GAAG,CAAC1H,EAAE,CAAC;IACtC;IACA,IAAIkM,KAAK,GAAG,EAAE;IACd,IAAIK,MAAM,EAAE;MACR;MACA,MAAMN,KAAK,GAAGM,MAAM,CAAC7E,GAAG,CAAC4E,SAAS,CAAC;MACnC,IAAI,OAAOL,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACxDC,KAAK,GAAGD,KAAK,GAAG,EAAE;MACtB;IACJ;IACA,OAAOC,KAAK;EAChB;AACJ;AACAL,aAAa,CAAC/F,IAAI,GAAG,SAAS0G,qBAAqB,CAACxG,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAI6F,aAAa,GAAG;AAAE,CAAC;AAC7FA,aAAa,CAAC3F,KAAK,GAAG,aAAc7G,MAAM,CAAC8G,kBAAkB,CAAC;EAAEC,KAAK,EAAEyF,aAAa;EAAE/K,OAAO,EAAE+K,aAAa,CAAC/F,IAAI;EAAEjF,UAAU,EAAE;AAAO,CAAC,CAAC;AACxI;AAAmBgL,aAAa,CAACpF,eAAe,GAAG3H,gBAAgB,CAAC;EAAEgC,OAAO,EAAE,SAAS0L,qBAAqB,GAAG;IAAE,OAAO,IAAIX,aAAa,EAAE;EAAE,CAAC;EAAEzF,KAAK,EAAEyF,aAAa;EAAEhL,UAAU,EAAE;AAAO,CAAC,CAAC;AAC5L,CAAC,YAAY;EAAE,CAAC,OAAO6F,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrH,MAAM,CAACsH,iBAAiB,CAACkF,aAAa,EAAE,CAAC;IACnGvF,IAAI,EAAE9H,UAAU;IAChBgI,IAAI,EAAE,CAAC;MAAE3F,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,EAAE;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;;AAE/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4L,YAAY,GAAG,IAAInO,cAAc,CAAC,wBAAwB,EAAE;EAC9DuC,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAE,MAAM;AACnB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4L,MAAM,GAAG,QAAQ;AACvB;AACA,MAAMC,aAAa,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,aAAa,EAAE,gBAAgB,CAAC;AACxE;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACV,KAAK,EAAE;EAC3B,IAAI,CAACW,SAAS,EAAEC,IAAI,EAAEC,QAAQ,CAAC,GAAGC,aAAa,CAACd,KAAK,CAAC;EACtD,OAAOe,QAAQ,CAACJ,SAAS,EAAEC,IAAI,EAAEC,QAAQ,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAa,CAACd,KAAK,EAAE;EAC1BA,KAAK,GAAGA,KAAK,GAAGA,KAAK,CAACgB,WAAW,EAAE,GAAG,EAAE;EACxC,IAAI,CAACL,SAAS,EAAEC,IAAI,EAAEK,MAAM,CAAC,GAAGjB,KAAK,CAACjJ,KAAK,CAAC,GAAG,CAAC;EAChD;EACA,IAAI,CAAC0J,aAAa,CAACnH,IAAI,CAAC4H,CAAC,IAAIA,CAAC,KAAKP,SAAS,CAAC,EAAE;IAC3CA,SAAS,GAAGF,aAAa,CAAC,CAAC,CAAC;EAChC;EACA,IAAIG,IAAI,KAAKJ,MAAM,EAAE;IACjBI,IAAI,GAAIK,MAAM,KAAKT,MAAM,GAAIS,MAAM,GAAG,EAAE;IACxCA,MAAM,GAAGT,MAAM;EACnB;EACA,OAAO,CAACG,SAAS,EAAEQ,iBAAiB,CAACP,IAAI,CAAC,EAAE,CAAC,CAACK,MAAM,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,iBAAiB,CAACnB,KAAK,EAAE;EAC9B,IAAI,CAAC,CAACA,KAAK,EAAE;IACT,QAAQA,KAAK,CAACgB,WAAW,EAAE;MACvB,KAAK,SAAS;MACd,KAAK,cAAc;MACnB,KAAK,cAAc;QACfhB,KAAK,GAAG,cAAc;QACtB;MACJ,KAAK,IAAI;MACT,KAAK,MAAM;MACX,KAAK,QAAQ;QACTA,KAAK,GAAG,QAAQ;QAChB;MACJ;MACA;QACIA,KAAK,GAAG,MAAM;QACd;IAAM;EAElB;EACA,OAAOA,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASe,QAAQ,CAACJ,SAAS,EAAEC,IAAI,GAAG,IAAI,EAAEK,MAAM,GAAG,KAAK,EAAE;EACtD,OAAO;IACH,SAAS,EAAEA,MAAM,GAAG,aAAa,GAAG,MAAM;IAC1C,YAAY,EAAE,YAAY;IAC1B,gBAAgB,EAAEN,SAAS;IAC3B,WAAW,EAAE,CAAC,CAACC,IAAI,GAAGA,IAAI,GAAG;EACjC,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA,MAAMQ,UAAU,CAAC;EACb;AACJ;AACA;AACA;AACA;EACItI,WAAW,CAACuI,OAAO,EAAEC,YAAY,EAAEC,SAAS,EAAE;IAC1C,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,CAAC;EACvB;AACJ;AACA;AACA;AACA;AACA;EACI1I,WAAW,CAAC2I,QAAQ,EAAEC,aAAa,EAAEC,eAAe,EAAE;IAClD,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,kBAAkB,GAAG,EAAE;IAC5B,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,iBAAiB,EAAE;IAC5C,IAAI,CAACH,YAAY,GAAG,IAAI,CAACI,yBAAyB,EAAE;EACxD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,mBAAmB,GAAG;IACtB,OAAO,CAAC,GAAG,IAAI,CAACH,YAAY,CAAC,CAACI,OAAO,EAAE;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIC,YAAY,GAAG;IACf,OAAO,IAAI,CAACT,aAAa;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIU,iBAAiB,GAAG;IACpB,OAAO,IAAI,CAACP,kBAAkB,IAAI,IAAI,CAACJ,QAAQ,CAACJ,OAAO;EAC3D;EACA;AACJ;AACA;AACA;EACI,IAAIgB,cAAc,GAAG;IACjB;IACA,IAAInM,GAAG,GAAG,IAAI,CAACkM,iBAAiB;IAChC,OAAO,IAAI,CAACE,WAAW,CAACpM,GAAG,CAAC,GAAG,IAAI,CAACqM,eAAe,CAACrM,GAAG,CAAC,GAAG,IAAI,CAACuL,QAAQ,CAACH,YAAY;EACzF;EACA;AACJ;AACA;AACA;AACA;EACIgB,WAAW,CAACpM,GAAG,EAAE;IACb;IACA,IAAI8J,KAAK,GAAG,IAAI,CAACyB,QAAQ,CAACF,SAAS,CAACrL,GAAG,CAAC;IACxC,OAAO,OAAO8J,KAAK,KAAK,WAAW;EACvC;EACA;AACJ;AACA;AACA;EACIwC,OAAO,GAAG;IACN,IAAI,CAACZ,YAAY,CAAC/N,OAAO,CAAE4O,IAAI,IAAK;MAChCA,IAAI,CAACC,WAAW,EAAE;IACtB,CAAC,CAAC;IACF,IAAI,CAACd,YAAY,GAAG,EAAE;EAC1B;EACA;AACJ;AACA;AACA;AACA;EACII,yBAAyB,GAAG;IACxB;IACA,IAAIW,aAAa,GAAG,EAAE;IACtB,IAAI,CAACb,YAAY,CAACjO,OAAO,CAAEsD,EAAE,IAAK;MAC9B,IAAI,IAAI,CAACyL,SAAS,CAACzL,EAAE,CAACjB,GAAG,CAAC,EAAE;QACxB;QACA,IAAI2M,YAAY,GAAIjH,MAAM,IAAK;UAC3BA,MAAM,GAAGA,MAAM,CAACd,KAAK,EAAE;UACvBc,MAAM,CAACf,QAAQ,GAAG,IAAI,CAAC4G,QAAQ,CAACJ,OAAO;UACvC,OAAOzF,MAAM;QACjB,CAAC;QACD+G,aAAa,CAACG,IAAI,CAAC,IAAI,CAACX,YAAY,CAC/B1G,OAAO,CAACtE,EAAE,CAACpC,KAAK,CAAC,CACjB4G,IAAI,CAACzI,GAAG,CAAC2P,YAAY,CAAC,CAAC,CACvBvE,SAAS,CAAC1C,MAAM,IAAI;UACrB,IAAI,CAACmH,gBAAgB,CAACnH,MAAM,CAAC;QACjC,CAAC,CAAC,CAAC;MACP;IACJ,CAAC,CAAC;IACF,OAAO+G,aAAa;EACxB;EACA;AACJ;AACA;AACA;AACA;EACIZ,iBAAiB,GAAG;IAChB,OAAO,IAAI,CAACI,YAAY,CAAC9J,WAAW,CAC/BnF,GAAG,CAACiE,EAAE,IAAI;MACX,OAAO,iBAAkBtB,YAAY,CAAC,CAAC,CAAC,EAAEsB,EAAE,EAAE;UAC1CkK,OAAO,EAAE,IAAI,CAACI,QAAQ,CAACJ,OAAO;UAC9B;UACAnL,GAAG,EAAE,IAAI,CAACuL,QAAQ,CAACJ,OAAO,GAAGlK,EAAE,CAACC,MAAM,CAAC;QAC3C,CAAC;MAAC;IACN,CAAC,CAAC,CACGnE,MAAM,CAACkE,EAAE,IAAI,IAAI,CAACyL,SAAS,CAACzL,EAAE,CAACjB,GAAG,CAAC,CAAC;EAC7C;EACA;AACJ;AACA;AACA;AACA;AACA;EACI6M,gBAAgB,CAACnH,MAAM,EAAE;IACrB,IAAIA,MAAM,CAACf,QAAQ,IAAI,IAAI,CAAC4G,QAAQ,CAACJ,OAAO,EAAE;MAC1CzF,MAAM,CAACoE,KAAK,GAAG,IAAI,CAACgD,wBAAwB,CAACpH,MAAM,CAAC;MACpD,IAAI,CAAC+F,eAAe,CAAC/F,MAAM,CAAC;IAChC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIgH,SAAS,CAAC1M,GAAG,EAAE;IACX,OAAO,IAAI,CAACqM,eAAe,CAACrM,GAAG,CAAC,KAAKuH,SAAS;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIuF,wBAAwB,CAACC,OAAO,EAAE;IAC9B;IACA,MAAMC,UAAU,GAAG,IAAI,CAACzB,QAAQ,CAACJ,OAAO,GAAG4B,OAAO,CAAC7L,MAAM;IACzD;IACA,IAAI+L,MAAM,GAAG,IAAI,CAACtB,kBAAkB,CAAC,CAAC;IACtCsB,MAAM,GAAGF,OAAO,CAACtI,OAAO,GAAGuI,UAAU,GAAKC,MAAM,IAAID,UAAU,GAAI,EAAE,GAAGC,MAAO;IAC9E,IAAI,CAACtB,kBAAkB,GAAG,IAAI,CAACuB,iBAAiB,CAACD,MAAM,CAAC;IACxD,OAAO,IAAI,CAACd,cAAc;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIe,iBAAiB,CAACC,QAAQ,EAAE;IACxB;IACA,IAAIC,YAAY,GAAIpN,GAAG,IAAK,CAAC,IAAI,CAAC0M,SAAS,CAAC1M,GAAG,CAAC;IAChD,IAAIoN,YAAY,CAACD,QAAQ,CAAC,EAAE;MACxB,IAAI,CAAClB,YAAY,CAACoB,cAAc,CAACC,IAAI,CAACrM,EAAE,IAAI;QACxC;QACA,IAAIjB,GAAG,GAAG,IAAI,CAACuL,QAAQ,CAACJ,OAAO,GAAGlK,EAAE,CAACC,MAAM;QAC3C,IAAI,CAACkM,YAAY,CAACpN,GAAG,CAAC,EAAE;UACpBmN,QAAQ,GAAGnN,GAAG;UACd,OAAO,IAAI,CAAC,CAAC;QACjB;;QACA,OAAO,KAAK;MAChB,CAAC,CAAC;IACN;IACA,OAAOmN,QAAQ;EACnB;EACA;AACJ;AACA;AACA;AACA;EACId,eAAe,CAACrM,GAAG,EAAE;IACjB,OAAO,IAAI,CAACuL,QAAQ,CAACF,SAAS,CAACrL,GAAG,CAAC;EACvC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuN,aAAa,CAAC;EAChB;AACJ;AACA;AACA;AACA;EACI3K,WAAW,CAAC4I,aAAa,EAAEgC,WAAW,EAAEC,OAAO,EAAE;IAC7C,IAAI,CAACjC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACgC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB;AACR;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;IACnB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,KAAK;EAChC;EACA;AACJ;AACA;EACI,IAAIC,qBAAqB,GAAG;IACxB,OAAO,CAAC,CAAC,IAAI,CAACC,aAAa;EAC/B;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIC,cAAc,GAAG;IACjB,OAAO,IAAI,CAACD,aAAa,GAAG,IAAI,CAACA,aAAa,CAAC1B,cAAc,GAAG5E,SAAS;EAC7E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIuG,cAAc,CAAChE,KAAK,EAAE;IACtB;IACA,IAAI9J,GAAG,GAAG,SAAS;IACnB;IACA,IAAI+N,WAAW;IACf,IAAI,IAAI,CAACF,aAAa,EAAE;MACpB7N,GAAG,GAAG,IAAI,CAAC6N,aAAa,CAAC3B,iBAAiB;MAC1C6B,WAAW,GAAG,IAAI,CAACL,SAAS,CAAC1N,GAAG,CAAC;MACjC,IAAI,CAAC0N,SAAS,CAAC1N,GAAG,CAAC,GAAG8J,KAAK;IAC/B;IACA;IACA,IAAIpE,MAAM,GAAG,IAAIlJ,YAAY,CAACuR,WAAW,EAAEjE,KAAK,EAAE,KAAK,CAAC;IACxD,IAAI,CAACkE,WAAW,EAAC,gBAAkB;MAAE,CAAChO,GAAG,GAAG0F;IAAO,CAAC,CAAE;EAC1D;EACA;AACJ;AACA;AACA;AACA;AACA;EACIuI,gBAAgB,CAAC9C,OAAO,EAAE;IACtB;IACA,MAAM+C,SAAS,GAAG3M,MAAM,CAACC,IAAI,CAAC,IAAI,CAACkM,SAAS,CAAC,CAACpN,MAAM;IACpD;IACA,MAAM6N,SAAS,GAAG,IAAI,CAACT,SAAS,CAACvC,OAAO,CAAC;IACzC,OAAQ+C,SAAS,IAAI,CAAC,CAACC,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,GAAI,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;EACIC,QAAQ,GAAG;IACP,IAAI,CAACT,eAAe,GAAG,IAAI;EAC/B;EACA;AACJ;AACA;AACA;EACIK,WAAW,CAACtI,MAAM,EAAE;IAChB,MAAM,IAAI2I,KAAK,CAAE,gEAA+D3I,MAAO,EAAC,CAAC;EAC7F;EACA;AACJ;AACA;EACI4I,WAAW,GAAG;IACV,IAAI,IAAI,CAACT,aAAa,EAAE;MACpB,IAAI,CAACA,aAAa,CAACvB,OAAO,EAAE;IAChC;IACA,OAAO,IAAI,CAACd,aAAa;EAC7B;EACA;AACJ;AACA;AACA;EACI,IAAI+C,aAAa,GAAG;IAChB,OAAO,IAAI,CAACf,WAAW,CAACgB,aAAa,CAACzQ,UAAU;EACpD;EACA;AACJ;AACA;EACI,IAAIyQ,aAAa,GAAG;IAChB,OAAO,IAAI,CAAChB,WAAW,CAACgB,aAAa;EACzC;EACA;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACzO,GAAG,EAAE;IACb,OAAO,IAAI,CAAC0N,SAAS,CAAC1N,GAAG,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI0O,cAAc,CAAC1O,GAAG,EAAE2O,WAAW,EAAE;IAC7B;IACA,IAAIC,GAAG,GAAG,IAAI,CAACH,WAAW,CAACzO,GAAG,CAAC;IAC/B;IACA,IAAI6O,aAAa,GAAID,GAAG,KAAKrH,SAAS,IAAIqH,GAAG,KAAK,IAAK;IACvD,OAAQC,aAAa,IAAID,GAAG,KAAK,EAAE,GAAIA,GAAG,GAAGD,WAAW;EAC5D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,gBAAgB,CAAC/O,MAAM,GAAG,IAAI,CAACyO,aAAa,EAAE;IAC1C;IACA,MAAMlL,KAAK,GAAG,SAAS;IACvB,OAAO,IAAI,CAACmK,OAAO,CAACsB,WAAW,CAAChP,MAAM,EAAEuD,KAAK,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;EACI0L,kBAAkB,CAACC,SAAS,EAAElP,MAAM,GAAG,IAAI,CAACyO,aAAa,EAAE;IACvD,OAAO,IAAI,CAACf,OAAO,CAACyB,oBAAoB,CAACnP,MAAM,EAAEkP,SAAS,CAAC;EAC/D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,qBAAqB,CAACC,MAAM,EAAEC,YAAY,GAAG,KAAK,EAAE;IAChD;IACA,IAAIvF,KAAK,GAAG,KAAK;IACjB;IACA,IAAIwF,cAAc,GAAG,EAAE;IACvB,IAAIF,MAAM,EAAE;MACR,CAACtF,KAAK,EAAEwF,cAAc,CAAC,GAAG,IAAI,CAAC7B,OAAO,CAAC8B,gBAAgB,CAACH,MAAM,CAAC;MAC/D,IAAI,CAACE,cAAc,IAAID,YAAY,EAAE;QACjC;QACA,MAAMxF,KAAK,GAAGW,cAAc,CAACV,KAAK,CAAC;QACnC;QACA,MAAMzM,QAAQ,GAAG,CAAC+R,MAAM,CAAC;QACzB,IAAI,CAAC3B,OAAO,CAAC+B,oBAAoB,CAAC3F,KAAK,EAAExM,QAAQ,CAAC;MACtD;IACJ;IACA,OAAOyM,KAAK,CAAC2F,IAAI,EAAE,IAAI,KAAK;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,oBAAoB,CAAC7F,KAAK,EAAEC,KAAK,EAAEF,OAAO,GAAG,IAAI,CAAC4E,aAAa,EAAE;IAC7D,IAAI,CAACf,OAAO,CAACkC,mBAAmB,CAAC/F,OAAO,EAAEC,KAAK,EAAEC,KAAK,CAAC;EAC3D;EACA;AACJ;AACA;AACA;AACA;AACA;EACI8F,qBAAqB,CAAC/F,KAAK,EAAExM,QAAQ,EAAE;IACnC,IAAI,CAACoQ,OAAO,CAAC+B,oBAAoB,CAAC3F,KAAK,EAAExM,QAAQ,CAAC;EACtD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIwS,WAAW,CAAC7P,GAAG,EAAED,MAAM,EAAE;IACrB,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MAC5B,KAAK,IAAI+P,IAAI,IAAI/P,MAAM,EAAE;QACrB,IAAI,CAAC2N,SAAS,CAACoC,IAAI,CAAC,GAAG/P,MAAM,CAAC+P,IAAI,CAAC;MACvC;IACJ,CAAC,MACI;MACD,IAAI,CAAC,CAAC9P,GAAG,EAAE;QACP,IAAI,CAAC0N,SAAS,CAAC1N,GAAG,CAAC,GAAGD,MAAM;MAChC;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIgQ,2BAA2B,CAAC/P,GAAG,EAAEoL,YAAY,EAAE4E,kBAAkB,EAAE;IAC/D;IACA,IAAI,CAAC,IAAI,CAACnC,aAAa,EAAE;MACrB;MACA,IAAIoC,UAAU,GAAG,IAAI/E,UAAU,CAAClL,GAAG,EAAEoL,YAAY,EAAE,IAAI,CAACsC,SAAS,CAAC;MAClE,IAAI,CAACG,aAAa,GAAG,IAAIvC,oBAAoB,CAAC2E,UAAU,EAAE,IAAI,CAACzE,aAAa,EAAG9F,MAAM,IAAKsK,kBAAkB,CAACtK,MAAM,CAAC,CAAC;IACzH;IACA,OAAO,IAAI,CAACmI,aAAa;EAC7B;EACA;AACJ;AACA;AACA;EACI,IAAIqC,aAAa,GAAG;IAChB;IACA,MAAMC,GAAG,GAAG,IAAI,CAAC3B,aAAa,CAAC4B,QAAQ;IACvC;IACA,MAAMC,MAAM,GAAG,EAAE;IACjB;IACA,KAAK,IAAIC,CAAC,GAAGH,GAAG,CAAC7P,MAAM,EAAEgQ,CAAC,EAAE,GAAG;MAC3BD,MAAM,CAACC,CAAC,CAAC,GAAGH,GAAG,CAACG,CAAC,CAAC;IACtB;IACA,OAAOD,MAAM;EACjB;EACA;AACJ;AACA;AACA;AACA;EACIjE,WAAW,CAACpM,GAAG,EAAE;IACb,OAAO,iBAAmB,IAAI,CAAC6N,aAAa,CAAGzB,WAAW,CAACpM,GAAG;IAAC;EACnE;EACA;AACJ;AACA;EACI,IAAIuQ,cAAc,GAAG;IACjB,OAAO,IAAI,CAAC5C,eAAe;EAC/B;AACJ;AACAJ,aAAa,CAAC7J,IAAI,GAAG,SAAS8M,qBAAqB,CAAC5M,CAAC,EAAE;EAAE3G,MAAM,CAACwT,gBAAgB,EAAE;AAAE,CAAC;AACrFlD,aAAa,CAACmD,IAAI,GAAG,aAAczT,MAAM,CAAC0T,iBAAiB,CAAC;EAAEzM,IAAI,EAAEqJ,aAAa;EAAEqD,QAAQ,EAAE,CAAC3T,MAAM,CAAC4T,oBAAoB;AAAE,CAAC,CAAC;;AAG7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,SAASvD,aAAa,CAAC;EAC7C;AACJ;AACA;AACA;AACA;AACA;AACA;EACI3K,WAAW,CAACmO,QAAQ;EAAE;EACtB;EACAvF,aAAa,EAAEgC,WAAW,EAAEC,OAAO,EAAE;IACjC,KAAK,CAACjC,aAAa,EAAEgC,WAAW,EAAEC,OAAO,CAAC;IAC1C,IAAI,CAACsD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACvF,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACgC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIuD,SAAS,GAAG;IACZ;IACA,IAAIC,GAAG,GAAG,IAAI,CAACpD,aAAa;IAC5B;IACA,IAAI7N,GAAG,GAAGiR,GAAG,GAAGA,GAAG,CAAC/E,iBAAiB,GAAG,IAAI,CAAC6E,QAAQ;IACrD;IACA,OAAQ/Q,GAAG,KAAK,OAAO,GAAI,OAAO,GAAGA,GAAG;EAC5C;EACA;AACJ;AACA;AACA;EACI,IAAIkR,QAAQ,GAAG;IACX,OAAO,IAAI,CAACxD,SAAS;EACzB;EACA;AACJ;AACA;AACA;EACI,IAAIyD,YAAY,GAAG;IACf,OAAO,iBAAmB,IAAI,CAACtD;IAAa;EAChD;EACA;AACJ;AACA;AACA;AACA;EACII,gBAAgB,GAAG;IACf,OAAO,KAAK,CAACA,gBAAgB,CAAC,IAAI,CAAC8C,QAAQ,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;EACIK,UAAU,CAACpR,GAAG,EAAE;IACZ,OAAOA,GAAG,GAAG,IAAI,CAACyO,WAAW,CAACzO,GAAG,CAAC,GAAGuH,SAAS;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI8J,UAAU,CAACrR,GAAG,EAAED,MAAM,EAAEuR,QAAQ,GAAG,KAAK,EAAE;IACtC,IAAIA,QAAQ,EAAE;MACV,IAAI,CAACC,cAAc,CAACvR,GAAG,EAAED,MAAM,CAAC;IACpC,CAAC,MACI,IAAIzC,KAAK,CAACmF,OAAO,CAAC1C,MAAM,CAAC,EAAE;MAC5B,IAAI,CAACyR,gBAAgB,CAACxR,GAAG,EAAED,MAAM,CAAC;IACtC,CAAC,MACI,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MACjC,IAAI,CAAC0R,iBAAiB,CAACzR,GAAG,EAAED,MAAM,CAAC;IACvC,CAAC,MACI,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MACjC,IAAI,CAAC2R,iBAAiB,CAAC1R,GAAG,EAAED,MAAM,CAAC;IACvC,CAAC,MACI;MACD,MAAM,IAAIsO,KAAK,CAAE,wBAAuBrO,GAAI,kDAAiD,CAAC;IAClG;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI2R,0BAA0B,CAAC3R,GAAG,EAAEoL,YAAY,EAAE4E,kBAAkB,EAAE;IAC9D,OAAO,IAAI,CAACD,2BAA2B,CAAC/P,GAAG,EAAEoL,YAAY,EAAE4E,kBAAkB,CAAC;EAClF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIuB,cAAc,CAACvR,GAAG,EAAED,MAAM,EAAE;IACxB,IAAIC,GAAG,EAAE;MACL,IAAI,CAAC0N,SAAS,CAAC1N,GAAG,CAAC,GAAGD,MAAM;IAChC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIyR,gBAAgB,CAACxR,GAAG,GAAG,EAAE,EAAED,MAAM,EAAE;IAC/B,IAAI,CAAC2N,SAAS,CAAC1N,GAAG,CAAC,GAAGD,MAAM,GAAGA,MAAM,CAACe,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;EACxD;EACA;AACJ;AACA;AACA;AACA;AACA;EACI2Q,iBAAiB,CAACzR,GAAG,GAAG,EAAE,EAAED,MAAM,EAAE;IAChC;IACA,IAAI6R,OAAO,GAAG,EAAE;IAChB,IAAI7R,MAAM,EAAE;MACR,KAAK,IAAI+P,IAAI,IAAI/P,MAAM,EAAE;QACrB,IAAI,CAAC,CAACA,MAAM,CAAC+P,IAAI,CAAC,EAAE;UAChB8B,OAAO,CAAChF,IAAI,CAACkD,IAAI,CAAC;QACtB;MACJ;IACJ;IACA,IAAI,CAACpC,SAAS,CAAC1N,GAAG,CAAC,GAAG4R,OAAO,CAAC9Q,IAAI,CAAC,GAAG,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;EACI4Q,iBAAiB,CAAC1R,GAAG,GAAG,EAAE,EAAED,MAAM,EAAE;IAChC,IAAI,CAAC2N,SAAS,CAAC1N,GAAG,CAAC,GAAGD,MAAM;EAChC;AACJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM8R,cAAc,SAAShN,UAAU,CAAC;EACpC;AACJ;AACA;AACA;AACA;AACA;EACIjC,WAAW,CAACkC,KAAK,EAAEC,WAAW,EAAE5H,SAAS,EAAE2U,YAAY,EAAE;IACrD,KAAK,CAAChN,KAAK,EAAEC,WAAW,EAAE5H,SAAS,CAAC;IACpC,IAAI,CAAC2U,YAAY,GAAGA,YAAY;IAChC;AACR;AACA;IACQ,IAAI,CAACC,mBAAmB,GAAG,IAAI;IAC/B;AACR;AACA;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACnP,SAAS,GAAG,IAAImC,GAAG,EAAE;IAC1B,IAAI,CAACiN,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACA,QAAQ,GAAG,EAAE;EACtB;EACA;AACJ;AACA;AACA;EACIC,QAAQ,GAAG;IACP,IAAI,CAACrP,SAAS,CAAClF,OAAO,CAAE0H,GAAG,IAAK;MAC5BA,GAAG,CAACiH,OAAO,EAAE;IACjB,CAAC,CAAC;IACF,IAAI,CAACzJ,SAAS,CAACmH,KAAK,EAAE;IACtB,IAAI,CAACgI,WAAW,GAAG,KAAK;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIG,QAAQ,CAACrT,UAAU,EAAEkT,WAAW,GAAG,KAAK,EAAE;IACtCA,WAAW,GAAGA,WAAW,IAAI,IAAI,CAACA,WAAW;IAC7ClT,UAAU,GAAG,IAAI,CAACsT,cAAc,CAACtT,UAAU,CAAC;IAC5C,IAAIkT,WAAW,IAAI,CAAC,IAAI,CAAC5M,QAAQ,CAACtG,UAAU,CAAC,EAAE;MAC3C,IAAI,CAACuT,cAAc,EAAE;MACrB,IAAI,CAACC,mBAAmB,CAACxT,UAAU,CAAC;MACpC,IAAI,CAACyT,qBAAqB,CAACzT,UAAU,EAAEkT,WAAW,CAAC;IACvD;IACA,OAAO,IAAI,CAACQ,YAAY;EAC5B;EACA;AACJ;AACA;AACA;AACA;EACIJ,cAAc,CAACK,YAAY,EAAE;IACzB;IACA,IAAIxR,EAAE,GAAG,IAAI,CAAC6Q,YAAY,CAAC3O,WAAW,CAACsP,YAAY,CAAC;IACpD,IAAIxR,EAAE,EAAE;MACJwR,YAAY,GAAGxR,EAAE,CAACnC,UAAU;IAChC;IACA,OAAO2T,YAAY;EACvB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIF,qBAAqB,CAACzT,UAAU,EAAEkT,WAAW,EAAE;IAC3C,IAAIA,WAAW,EAAE;MACb;MACA,IAAI/Q,EAAE,GAAG,IAAI,CAAC6Q,YAAY,CAACzO,WAAW,CAACvE,UAAU,CAAC;MAClD;MACA,IAAID,KAAK,GAAGoC,EAAE,GAAGA,EAAE,CAACpC,KAAK,GAAG,SAAS;MACrC;MACA,QAAQA,KAAK;QACT,KAAK,IAAI;UACL,IAAI,CAAC6T,gBAAgB,CAAC,OAAO,CAAC;UAC9B;QACJ,KAAK,IAAI;UACL,IAAI,CAACA,gBAAgB,CAAC,cAAc,CAAC;UACrC;QACJ,KAAK,IAAI;UACL,IAAI,CAACA,gBAAgB,CAAC,qBAAqB,CAAC;UAC5C;QACJ,KAAK,IAAI;UACL,IAAI,CAACA,gBAAgB,CAAC,4BAA4B,CAAC;UACnD;MAAM;MAEd;MACA,QAAQ7T,KAAK;QACT,KAAK,IAAI;UACL,IAAI,CAAC6T,gBAAgB,CAAC,4BAA4B,CAAC;UACnD;QACJ,KAAK,IAAI;UACL,IAAI,CAACA,gBAAgB,CAAC,qBAAqB,CAAC;UAC5C;QACJ,KAAK,IAAI;UACL,IAAI,CAACA,gBAAgB,CAAC,cAAc,CAAC;UACrC;QACJ,KAAK,IAAI;UACL,IAAI,CAACA,gBAAgB,CAAC,OAAO,CAAC;UAC9B;MAAM;IAElB;IACA;IACA,OAAO,IAAI,CAACC,gBAAgB,CAAC7T,UAAU,CAAC;EAC5C;EACA;AACJ;AACA;AACA;AACA;EACI4T,gBAAgB,CAAClP,OAAO,EAAE;IACtB;IACA,IAAI2O,QAAQ,GAAItT,KAAK,IAAK;MACtB;MACA,IAAIoC,EAAE,GAAG,IAAI,CAAC6Q,YAAY,CAAC3O,WAAW,CAACtE,KAAK,CAAC;MAC7C,IAAI,CAAC8T,gBAAgB,CAAC1R,EAAE,GAAGA,EAAE,CAACnC,UAAU,GAAGD,KAAK,CAAC;IACrD,CAAC;IACD2E,OAAO,CAAC3C,KAAK,CAAC,GAAG,CAAC,CAAClD,OAAO,CAACkB,KAAK,IAAIsT,QAAQ,CAACtT,KAAK,CAAC4Q,IAAI,EAAE,CAAC,CAAC;EAC/D;EACA;AACJ;AACA;AACA;AACA;EACIkD,gBAAgB,CAAC7T,UAAU,EAAE;IACzB;IACA,IAAIuG,GAAG,GAAG,gBAAkB,IAAI,CAACxC,SAAS,CAACyC,GAAG,CAACxG,UAAU,CAAE;IAC3D;IACA,IAAI8T,YAAY,GAAG,IAAI,CAACX,QAAQ,CAACY,MAAM,CAAC,CAACC,KAAK,EAAE7P,EAAE,KAAK;MACnD,OAAO6P,KAAK,IAAKzN,GAAG,IAAKpC,EAAE,CAACsD,KAAK,KAAKlB,GAAG,CAACkB,KAAO;IACrD,CAAC,EAAE,KAAK,CAAC;IACT,IAAIlB,GAAG,IAAI,CAACuN,YAAY,EAAE;MACtB,IAAI,CAACX,QAAQ,CAACrF,IAAI,CAACvH,GAAG,CAAC8M,QAAQ,EAAE,CAAC;IACtC;IACA,OAAO,IAAI,CAACK,YAAY;EAC5B;EACA;AACJ;AACA;AACA;EACIH,cAAc,GAAG;IACb,IAAI,IAAI,CAACJ,QAAQ,CAAC3R,MAAM,EAAE;MACtB;MACA,KAAK,MAAM2C,EAAE,IAAI,IAAI,CAACgP,QAAQ,EAAE;QAC5BhP,EAAE,CAAC8P,UAAU,EAAE;MACnB;MACA,IAAI,CAACd,QAAQ,GAAG,EAAE;IACtB;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIK,mBAAmB,CAACxT,UAAU,EAAE;IAC5B,IAAI,CAAC,IAAI,CAAC+D,SAAS,CAACmQ,GAAG,CAAClU,UAAU,CAAC,IAAI,IAAI,CAACiT,mBAAmB,EAAE;MAC7D,IAAI,CAACvM,aAAa,CAAC1G,UAAU,CAAC;IAClC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACImH,SAAS,CAAC3C,KAAK,EAAE;IACb,OAAO,IAAI2P,kBAAkB,CAAC3P,KAAK,CAAC;EACxC;EACA;AACJ;AACA;EACI,IAAIkP,YAAY,GAAG;IACf,OAAQ,IAAI,CAACP,QAAQ,CAAC3R,MAAM,GAAG,CAAC;EACpC;AACJ;AACAuR,cAAc,CAACnO,IAAI,GAAG,SAASwP,sBAAsB,CAACtP,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIiO,cAAc,EAAE5U,MAAM,CAAC4G,QAAQ,CAAC5G,MAAM,CAACV,MAAM,CAAC,EAAEU,MAAM,CAAC4G,QAAQ,CAAC5H,WAAW,CAAC,EAAEgB,MAAM,CAAC4G,QAAQ,CAAClH,QAAQ,CAAC,EAAEM,MAAM,CAAC4G,QAAQ,CAAClB,kBAAkB,CAAC,CAAC;AAAE,CAAC;AAC5NkP,cAAc,CAAC/N,KAAK,GAAG,aAAc7G,MAAM,CAAC8G,kBAAkB,CAAC;EAAEC,KAAK,EAAE6N,cAAc;EAAEnT,OAAO,EAAEmT,cAAc,CAACnO;AAAK,CAAC,CAAC;AACvH;AACAmO,cAAc,CAAC5N,cAAc,GAAG,MAAM,CAClC;EAAEC,IAAI,EAAE3H;AAAO,CAAC,EAChB;EAAE2H,IAAI,EAAE3C,MAAM;EAAE4C,UAAU,EAAE,CAAC;IAAED,IAAI,EAAE7H,MAAM;IAAE+H,IAAI,EAAE,CAACnI,WAAW;EAAG,CAAC;AAAE,CAAC,EACtE;EAAEiI,IAAI,EAAEqD,SAAS;EAAEpD,UAAU,EAAE,CAAC;IAAED,IAAI,EAAE7H,MAAM;IAAE+H,IAAI,EAAE,CAACzH,QAAQ;EAAG,CAAC;AAAE,CAAC,EACtE;EAAEuH,IAAI,EAAEvB;AAAmB,CAAC,CAC/B;AACD,CAAC,YAAY;EAAE,CAAC,OAAO2B,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrH,MAAM,CAACsH,iBAAiB,CAACsN,cAAc,EAAE,CAAC;IACpG3N,IAAI,EAAE9H;EACV,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE8H,IAAI,EAAEjH,MAAM,CAACV;IAAO,CAAC,EAAE;MAAE2H,IAAI,EAAE3C,MAAM;MAAE4C,UAAU,EAAE,CAAC;QACpED,IAAI,EAAE7H,MAAM;QACZ+H,IAAI,EAAE,CAACnI,WAAW;MACtB,CAAC;IAAE,CAAC,EAAE;MAAEiI,IAAI,EAAEqD,SAAS;MAAEpD,UAAU,EAAE,CAAC;QAClCD,IAAI,EAAE7H,MAAM;QACZ+H,IAAI,EAAE,CAACzH,QAAQ;MACnB,CAAC;IAAE,CAAC,EAAE;MAAEuH,IAAI,EAAEvB;IAAmB,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;AAC/D;AACA;AACA;AACA;AACA;AACA,MAAMsQ,kBAAkB,CAAC;EACrB;AACJ;AACA;EACIrQ,WAAW,CAACuQ,WAAW,EAAE;IACrB,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,QAAQ,GAAG,IAAI;EACxB;EACA;AACJ;AACA;EACI,IAAI7O,OAAO,GAAG;IACV,OAAO,IAAI,CAAC2O,SAAS;EACzB;EACA;AACJ;AACA;EACI,IAAI7M,KAAK,GAAG;IACR,OAAO,IAAI,CAAC4M,WAAW;EAC3B;EACA;AACJ;AACA;AACA;AACA;EACI7G,OAAO,GAAG;IACN,IAAI,CAACyG,UAAU,EAAE;IACjB,IAAI,CAACM,UAAU,GAAG,EAAE;EACxB;EACA;AACJ;AACA;AACA;EACIlB,QAAQ,GAAG;IACP,IAAI,CAAC,IAAI,CAACiB,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,UAAU,CAAC1V,OAAO,CAAE4V,QAAQ,IAAK;QAClC;QACA,MAAMC,EAAE,GAAG,gBAAmBD,QAAU;QACxCC,EAAE,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;MACvB,CAAC,CAAC;IACN;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIV,UAAU,GAAG;IACT,IAAI,IAAI,CAACK,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,GAAG,KAAK;MACtB,IAAI,CAACC,UAAU,CAAC1V,OAAO,CAAE4V,QAAQ,IAAK;QAClC;QACA,MAAMC,EAAE,GAAG,gBAAmBD,QAAU;QACxCC,EAAE,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;MACvB,CAAC,CAAC;IACN;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIvN,WAAW,CAACwN,QAAQ,EAAE;IAClB,IAAI,IAAI,CAACL,UAAU,CAACM,OAAO,CAACD,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1C,IAAI,CAACL,UAAU,CAACzG,IAAI,CAAC8G,QAAQ,CAAC;IAClC;IACA,IAAI,IAAI,CAACN,SAAS,EAAE;MAChB;MACA,MAAMI,EAAE,GAAG,gBAAmBE,QAAU;MACxCF,EAAE,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;IACvB;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIjN,cAAc,CAACoN,CAAC,EAAE,CAClB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,gBAAgB,CAACD,CAAC,EAAEE,EAAE,EAAEC,GAAG,EAAE,CAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,mBAAmB,CAACJ,CAAC,EAAEE,EAAE,EAAEC,GAAG,EAAE,CAChC;EACA;AACJ;AACA;AACA;EACIE,aAAa,CAACL,CAAC,EAAE;IACb,OAAO,KAAK;EAChB;AACJ;AACA;AACA;AACA;AACA,MAAMM,sBAAsB,GAAG;EAC3B;EACA9V,OAAO,EAAEyG,UAAU;EACnBoE,QAAQ,EAAE4I;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsC,oBAAoB,CAAC;EACvB;AACJ;AACA;EACIvR,WAAW,CAACuQ,WAAW,EAAE;IACrB,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,QAAQ,GAAG,IAAI;EACxB;EACA;AACJ;AACA;EACI,IAAI7O,OAAO,GAAG;IACV,OAAO,IAAI,CAAC2O,SAAS;EACzB;EACA;AACJ;AACA;EACI,IAAI7M,KAAK,GAAG;IACR,OAAO,IAAI,CAAC4M,WAAW;EAC3B;EACA;AACJ;AACA;AACA;AACA;EACI7G,OAAO,GAAG;IACN,IAAI,CAACyG,UAAU,EAAE;IACjB,IAAI,CAACM,UAAU,GAAG,EAAE;EACxB;EACA;AACJ;AACA;AACA;EACIlB,QAAQ,GAAG;IACP,IAAI,CAAC,IAAI,CAACiB,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,UAAU,CAAC1V,OAAO,CAAE4V,QAAQ,IAAK;QAClC;QACA,MAAMC,EAAE,GAAG,gBAAmBD,QAAU;QACxCC,EAAE,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;MACvB,CAAC,CAAC;IACN;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIV,UAAU,GAAG;IACT,IAAI,IAAI,CAACK,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,GAAG,KAAK;MACtB,IAAI,CAACC,UAAU,CAAC1V,OAAO,CAAE4V,QAAQ,IAAK;QAClC;QACA,MAAMC,EAAE,GAAG,gBAAmBD,QAAU;QACxCC,EAAE,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;MACvB,CAAC,CAAC;IACN;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIvN,WAAW,CAACwN,QAAQ,EAAE;IAClB,IAAI,IAAI,CAACL,UAAU,CAACM,OAAO,CAACD,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1C,IAAI,CAACL,UAAU,CAACzG,IAAI,CAAC8G,QAAQ,CAAC;IAClC;IACA,IAAI,IAAI,CAACN,SAAS,EAAE;MAChB;MACA,MAAMI,EAAE,GAAG,gBAAmBE,QAAU;MACxCF,EAAE,CAACC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;IACvB;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIjN,cAAc,CAACoN,CAAC,EAAE,CAClB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,gBAAgB,CAACD,CAAC,EAAEE,EAAE,EAAEC,GAAG,EAAE,CAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,mBAAmB,CAACJ,CAAC,EAAEE,EAAE,EAAEC,GAAG,EAAE,CAChC;EACA;AACJ;AACA;AACA;EACIE,aAAa,CAACL,CAAC,EAAE;IACb,OAAO,KAAK;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,gBAAgB,SAASvP,UAAU,CAAC;EACtC;AACJ;AACA;AACA;AACA;EACIjC,WAAW,CAACkC,KAAK,EAAEC,WAAW,EAAE5H,SAAS,EAAE;IACvC,KAAK,CAAC2H,KAAK,EAAEC,WAAW,EAAE5H,SAAS,CAAC;IACpC,IAAI,CAAC2H,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAAC5H,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAAC0F,SAAS,GAAG,IAAImC,GAAG,EAAE;IAC1B,IAAI,CAACC,OAAO,GAAG,IAAInI,eAAe,CAAC,IAAI0H,WAAW,CAAC,IAAI,CAAC,CAAC;IACzD,IAAI,CAACU,YAAY,GAAG,IAAI,CAACD,OAAO,CAACE,YAAY,EAAE;EACnD;EACA;AACJ;AACA;AACA;AACA;EACIkP,kBAAkB,CAACpT,EAAE,EAAE;IACnB;IACA,MAAMqT,gBAAgB,GAAG,IAAI,CAACzR,SAAS,CAACyC,GAAG,CAACrE,EAAE,CAACnC,UAAU,CAAC;IAC1D,IAAIwV,gBAAgB,EAAE;MAClBA,gBAAgB,CAACnC,QAAQ,EAAE;IAC/B;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIoC,oBAAoB,CAACtT,EAAE,EAAE;IACrB;IACA,MAAMqT,gBAAgB,GAAG,IAAI,CAACzR,SAAS,CAACyC,GAAG,CAACrE,EAAE,CAACnC,UAAU,CAAC;IAC1D,IAAIwV,gBAAgB,EAAE;MAClBA,gBAAgB,CAACvB,UAAU,EAAE;IACjC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACI9M,SAAS,CAAC3C,KAAK,EAAE;IACb,OAAO,IAAI6Q,oBAAoB,CAAC7Q,KAAK,CAAC;EAC1C;AACJ;AACA8Q,gBAAgB,CAAC1Q,IAAI,GAAG,SAAS8Q,wBAAwB,CAAC5Q,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIwQ,gBAAgB,EAAEnX,MAAM,CAAC4G,QAAQ,CAAC5G,MAAM,CAACV,MAAM,CAAC,EAAEU,MAAM,CAAC4G,QAAQ,CAAC5H,WAAW,CAAC,EAAEgB,MAAM,CAAC4G,QAAQ,CAAClH,QAAQ,CAAC,CAAC;AAAE,CAAC;AAC7LyX,gBAAgB,CAACtQ,KAAK,GAAG,aAAc7G,MAAM,CAAC8G,kBAAkB,CAAC;EAAEC,KAAK,EAAEoQ,gBAAgB;EAAE1V,OAAO,EAAE0V,gBAAgB,CAAC1Q;AAAK,CAAC,CAAC;AAC7H;AACA0Q,gBAAgB,CAACnQ,cAAc,GAAG,MAAM,CACpC;EAAEC,IAAI,EAAE3H;AAAO,CAAC,EAChB;EAAE2H,IAAI,EAAE3C,MAAM;EAAE4C,UAAU,EAAE,CAAC;IAAED,IAAI,EAAE7H,MAAM;IAAE+H,IAAI,EAAE,CAACnI,WAAW;EAAG,CAAC;AAAE,CAAC,EACtE;EAAEiI,IAAI,EAAEqD,SAAS;EAAEpD,UAAU,EAAE,CAAC;IAAED,IAAI,EAAE7H,MAAM;IAAE+H,IAAI,EAAE,CAACzH,QAAQ;EAAG,CAAC;AAAE,CAAC,CACzE;AACD,CAAC,YAAY;EAAE,CAAC,OAAO2H,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrH,MAAM,CAACsH,iBAAiB,CAAC6P,gBAAgB,EAAE,CAAC;IACtGlQ,IAAI,EAAE9H;EACV,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE8H,IAAI,EAAEjH,MAAM,CAACV;IAAO,CAAC,EAAE;MAAE2H,IAAI,EAAE3C,MAAM;MAAE4C,UAAU,EAAE,CAAC;QACpED,IAAI,EAAE7H,MAAM;QACZ+H,IAAI,EAAE,CAACnI,WAAW;MACtB,CAAC;IAAE,CAAC,EAAE;MAAEiI,IAAI,EAAEqD,SAAS;MAAEpD,UAAU,EAAE,CAAC;QAClCD,IAAI,EAAE7H,MAAM;QACZ+H,IAAI,EAAE,CAACzH,QAAQ;MACnB,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;;AAEjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM8X,YAAY,CAAC;EACf;AACJ;AACA;AACA;EACI7R,WAAW,CAACkP,YAAY,EAAE4C,WAAW,EAAE;IACnC,IAAI,CAAC5C,YAAY,GAAGA,YAAY;IAChC,IAAI,CAAC4C,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,oBAAoB,EAAE;EAC/B;EACA;AACJ;AACA;AACA;EACI,IAAIxS,WAAW,GAAG;IACd,OAAO,CAAC,GAAG,IAAI,CAAC2P,YAAY,CAAChP,KAAK,CAAC;EACvC;EACA;AACJ;AACA;EACI,IAAIuK,cAAc,GAAG;IACjB;IACA,IAAIvK,KAAK,GAAG,IAAI,CAACgP,YAAY,CAACvO,YAAY,CAACyI,OAAO,EAAE;IACpD,OAAOlJ,KAAK,CAAC/F,MAAM,CAAEkE,EAAE,IAAK;MACxB,OAAO,IAAI,CAACyT,WAAW,CAACtP,QAAQ,CAACnE,EAAE,CAACnC,UAAU,CAAC;IACnD,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACI,IAAI8V,MAAM,GAAG;IACT;IACA,IAAI9B,KAAK,GAAG,IAAI;IAChB;IACA,IAAIhQ,KAAK,GAAG,IAAI,CAACX,WAAW,CAAC6J,OAAO,EAAE;IACtClJ,KAAK,CAACnF,OAAO,CAACsD,EAAE,IAAI;MAChB,IAAIA,EAAE,CAACpC,KAAK,KAAK,EAAE,EAAE;QACjB,IAAI,CAACiU,KAAK,IAAI,IAAI,CAAC4B,WAAW,CAACtP,QAAQ,CAACnE,EAAE,CAACnC,UAAU,CAAC,EAAE;UACpDgU,KAAK,GAAG7R,EAAE;QACd;MACJ;IACJ,CAAC,CAAC;IACF;IACA,IAAIZ,KAAK,GAAG,IAAI,CAAC8B,WAAW,CAAC,CAAC,CAAC;IAC/B,OAAO2Q,KAAK,KAAK,IAAI,CAAC4B,WAAW,CAACtP,QAAQ,CAAC/E,KAAK,CAACvB,UAAU,CAAC,GAAGuB,KAAK,GAAG,IAAI,CAAC;EAChF;EACA;AACJ;AACA;AACA;AACA;EACI+E,QAAQ,CAACvG,KAAK,EAAE;IACZ;IACA,IAAIoC,EAAE,GAAG,IAAI,CAAC6Q,YAAY,CAAC3O,WAAW,CAACtE,KAAK,CAAC,IAAI,IAAI,CAACiT,YAAY,CAACzO,WAAW,CAACxE,KAAK,CAAC;IACrF,OAAO,IAAI,CAAC6V,WAAW,CAACtP,QAAQ,CAACnE,EAAE,GAAGA,EAAE,CAACnC,UAAU,GAAGD,KAAK,CAAC;EAChE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI0G,OAAO,CAAC1G,KAAK,EAAE;IACX;IACA,IAAIoC,EAAE,GAAG,IAAI,CAAC6Q,YAAY,CAAC3O,WAAW,CAACtE,KAAK,IAAI,EAAE,CAAC,IAC/C,IAAI,CAACiT,YAAY,CAACzO,WAAW,CAACxE,KAAK,IAAI,EAAE,CAAC;IAC9C;IACA,IAAIgW,QAAQ,GAAInP,MAAM,IAAMzE,EAAE,GAAGyE,MAAM,CAAChB,OAAO,KAAK,EAAE,GAAG,IAAK;IAC9D;IACA,IAAI+D,MAAM,GAAG,IAAI,CAACiM,WAAW,CAACnP,OAAO,CAACtE,EAAE,GAAGA,EAAE,CAACnC,UAAU,GAAGD,KAAK,CAAC;IACjE,OAAO4J,MAAM,CAAChD,IAAI,CAACzI,GAAG,CAAC0I,MAAM,IAAIiC,UAAU,CAACjC,MAAM,EAAEzE,EAAE,CAAC,CAAC,EAAElE,MAAM,CAAC8X,QAAQ,CAAC,CAAC;EAC/E;EACA;AACJ;AACA;AACA;AACA;EACIF,oBAAoB,GAAG;IACnB;IACA,IAAIpM,OAAO,GAAG,IAAI,CAACuJ,YAAY,CAAC/O,WAAW,CAAC/F,GAAG,CAACiE,EAAE,IAAIA,EAAE,CAACnC,UAAU,CAAC;IACpE,IAAI,CAAC4V,WAAW,CAAClP,aAAa,CAAC+C,OAAO,CAAC;EAC3C;AACJ;AACAkM,YAAY,CAAC/Q,IAAI,GAAG,SAASoR,oBAAoB,CAAClR,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAI6Q,YAAY,EAAExX,MAAM,CAAC4G,QAAQ,CAAClB,kBAAkB,CAAC,EAAE1F,MAAM,CAAC4G,QAAQ,CAACgB,UAAU,CAAC,CAAC;AAAE,CAAC;AAC1J4P,YAAY,CAAC3Q,KAAK,GAAG,aAAc7G,MAAM,CAAC8G,kBAAkB,CAAC;EAAEC,KAAK,EAAEyQ,YAAY;EAAE/V,OAAO,EAAE+V,YAAY,CAAC/Q,IAAI;EAAEjF,UAAU,EAAE;AAAO,CAAC,CAAC;AACrI;AACAgW,YAAY,CAACxQ,cAAc,GAAG,MAAM,CAChC;EAAEC,IAAI,EAAEvB;AAAmB,CAAC,EAC5B;EAAEuB,IAAI,EAAEW;AAAW,CAAC,CACvB;AACD;AAAmB4P,YAAY,CAACpQ,eAAe,GAAG3H,gBAAgB,CAAC;EAAEgC,OAAO,EAAE,SAASoW,oBAAoB,GAAG;IAAE,OAAO,IAAIL,YAAY,CAACtY,MAAM,CAACwG,kBAAkB,CAAC,EAAExG,MAAM,CAAC0I,UAAU,CAAC,CAAC;EAAE,CAAC;EAAEb,KAAK,EAAEyQ,YAAY;EAAEhW,UAAU,EAAE;AAAO,CAAC,CAAC;AACtO,CAAC,YAAY;EAAE,CAAC,OAAO6F,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrH,MAAM,CAACsH,iBAAiB,CAACkQ,YAAY,EAAE,CAAC;IAClGvQ,IAAI,EAAE9H,UAAU;IAChBgI,IAAI,EAAE,CAAC;MAAE3F,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEyF,IAAI,EAAEvB;IAAmB,CAAC,EAAE;MAAEuB,IAAI,EAAEW;IAAW,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;;AAEjG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkQ,gBAAgB,CAAC3F,MAAM,EAAE;EAC9B,KAAK,IAAIpP,GAAG,IAAIoP,MAAM,EAAE;IACpB;IACA,IAAItF,KAAK,GAAGsF,MAAM,CAACpP,GAAG,CAAC,IAAI,EAAE;IAC7B,QAAQA,GAAG;MACP,KAAK,SAAS;QACV,IAAI8J,KAAK,KAAK,MAAM,EAAE;UAClBsF,MAAM,CAAC,SAAS,CAAC,GAAG,CAChB,cAAc,EACd,MAAM,CACT;QACL,CAAC,MACI,IAAItF,KAAK,KAAK,aAAa,EAAE;UAC9BsF,MAAM,CAAC,SAAS,CAAC,GAAG,CAChB,qBAAqB,EACrB,aAAa,CAChB;QACL,CAAC,MACI;UACDA,MAAM,CAAC,SAAS,CAAC,GAAGtF,KAAK;QAC7B;QACA;MACJ,KAAK,aAAa;MAClB,KAAK,YAAY;MACjB,KAAK,eAAe;MACpB,KAAK,MAAM;MACX,KAAK,YAAY;MACjB,KAAK,WAAW;MAChB,KAAK,WAAW;MAChB,KAAK,aAAa;MAClB,KAAK,WAAW;MAChB,KAAK,iBAAiB;QAClBsF,MAAM,CAAC,UAAU,GAAGpP,GAAG,CAAC,GAAG8J,KAAK;QAChC;MACJ,KAAK,gBAAgB;QACjBA,KAAK,GAAGA,KAAK,IAAI,KAAK;QACtBsF,MAAM,CAAC,wBAAwB,CAAC,GAAGtF,KAAK;QACxCsF,MAAM,CAAC,gBAAgB,CAAC,GAAGtF,KAAK;QAChC;MACJ,KAAK,OAAO;QACRsF,MAAM,CAAC,OAAO,CAAC,GAAGA,MAAM,CAAC,UAAU,GAAGpP,GAAG,CAAC,GAAGgV,KAAK,CAAC,CAAClL,KAAK,CAAC,GAAG,GAAG,GAAGA,KAAK;QACxE;IAAM;EAElB;EACA,OAAOsF,MAAM;AACjB;;AAEA;AACA;AACA;AACA;AACA,MAAM6F,UAAU,CAAC;EACb;AACJ;AACA;AACA;AACA;AACA;EACIrS,WAAW,CAACsS,iBAAiB,EAAEC,mBAAmB,EAAEpQ,WAAW,EAAE3C,YAAY,EAAE;IAC3E,IAAI,CAAC8S,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACpQ,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAAC3C,YAAY,GAAGA,YAAY;EACpC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIuN,mBAAmB,CAAC/F,OAAO,EAAEC,KAAK,EAAEC,KAAK,GAAG,IAAI,EAAE;IAC9C;IACA,IAAIK,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,OAAON,KAAK,KAAK,QAAQ,EAAE;MAC3BM,MAAM,CAACN,KAAK,CAAC,GAAGC,KAAK;MACrBD,KAAK,GAAGM,MAAM;IAClB;IACAA,MAAM,GAAG,IAAI,CAAC/H,YAAY,CAACN,qBAAqB,GAAG+H,KAAK,GAAGkL,gBAAgB,CAAClL,KAAK,CAAC;IAClF,IAAI,CAACuL,8BAA8B,CAACjL,MAAM,EAAEP,OAAO,CAAC;EACxD;EACA;AACJ;AACA;AACA;AACA;AACA;EACI4F,oBAAoB,CAAC3F,KAAK,EAAExM,QAAQ,GAAG,EAAE,EAAE;IACvC;IACA,MAAM8M,MAAM,GAAG,IAAI,CAAC/H,YAAY,CAACN,qBAAqB,GAAG+H,KAAK,GAAGkL,gBAAgB,CAAClL,KAAK,CAAC;IACxFxM,QAAQ,CAACM,OAAO,CAACC,EAAE,IAAI;MACnB,IAAI,CAACwX,8BAA8B,CAACjL,MAAM,EAAEvM,EAAE,CAAC;IACnD,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI2R,gBAAgB,CAACH,MAAM,EAAE;IACrB;IACA,MAAM9L,KAAK,GAAG,gBAAgB;IAC9B;IACA,IAAIwG,KAAK,GAAG,IAAI,CAACiF,WAAW,CAACK,MAAM,EAAE9L,KAAK,CAAC;IAC3C,IAAIwG,KAAK,KAAKuL,cAAc,EAAE;MAC1BvL,KAAK,GAAG,EAAE;IACd;IACA;IACA,MAAMwF,cAAc,GAAG,IAAI,CAACgG,iBAAiB,CAAClG,MAAM,EAAE9L,KAAK,CAAC,IACvDzG,gBAAgB,CAAC,IAAI,CAACkI,WAAW,CAAC,IAAI,IAAI,CAACoQ,mBAAoB,GAAGrL,KAAK,GAAG,EAAE;IACjF,OAAO,CAACA,KAAK,IAAI,KAAK,EAAEwF,cAAc,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIJ,oBAAoB,CAACtF,OAAO,EAAEqF,SAAS,EAAE;IACrC,OAAOrF,OAAO,CAAC2L,YAAY,CAACtG,SAAS,CAAC,IAAI,EAAE;EAChD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIqG,iBAAiB,CAAC1L,OAAO,EAAEM,SAAS,EAAE;IAClC,OAAOtN,iBAAiB,CAAC,IAAI,CAACmI,WAAW,CAAC,GACtC6E,OAAO,CAACC,KAAK,CAAC2L,gBAAgB,CAACtL,SAAS,CAAC,GAAG,IAAI,CAACuL,eAAe,CAAC7L,OAAO,EAAEM,SAAS,CAAC;EAC5F;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI6E,WAAW,CAACnF,OAAO,EAAEM,SAAS,EAAEwL,UAAU,GAAG,KAAK,EAAE;IAChD;IACA,IAAI5L,KAAK,GAAG,EAAE;IACd,IAAIF,OAAO,EAAE;MACT;MACA,IAAI+L,cAAc,GAAG7L,KAAK,GAAG,IAAI,CAACwL,iBAAiB,CAAC1L,OAAO,EAAEM,SAAS,CAAC;MACvE,IAAI,CAACyL,cAAc,EAAE;QACjB,IAAI/Y,iBAAiB,CAAC,IAAI,CAACmI,WAAW,CAAC,EAAE;UACrC,IAAI,CAAC2Q,UAAU,EAAE;YACb5L,KAAK,GAAG8L,gBAAgB,CAAChM,OAAO,CAAC,CAAC4L,gBAAgB,CAACtL,SAAS,CAAC;UACjE;QACJ,CAAC,MACI;UACD,IAAI,IAAI,CAACiL,mBAAmB,EAAE;YAC1BrL,KAAK,GAAG,IAAI,CAACoL,iBAAiB,CAACjL,kBAAkB,CAACL,OAAO,EAAEM,SAAS,CAAC;UACzE;QACJ;MACJ;IACJ;IACA;IACA;IACA,OAAOJ,KAAK,GAAGA,KAAK,CAAC2F,IAAI,EAAE,GAAG4F,cAAc;EAChD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACID,8BAA8B,CAACjL,MAAM,EAAEP,OAAO,EAAE;IAC5CrI,MAAM,CAACC,IAAI,CAAC2I,MAAM,CAAC,CAAC0L,IAAI,EAAE,CAAClY,OAAO,CAACqC,GAAG,IAAI;MACtC;MACA,MAAMpC,EAAE,GAAGuM,MAAM,CAACnK,GAAG,CAAC;MACtB;MACA,MAAM8V,MAAM,GAAGxY,KAAK,CAACmF,OAAO,CAAC7E,EAAE,CAAC,GAAGA,EAAE,GAAG,CAACA,EAAE,CAAC;MAC5CkY,MAAM,CAACD,IAAI,EAAE;MACb,KAAK,IAAI/L,KAAK,IAAIgM,MAAM,EAAE;QACtBhM,KAAK,GAAGA,KAAK,GAAGA,KAAK,GAAG,EAAE,GAAG,EAAE;QAC/B,IAAIlN,iBAAiB,CAAC,IAAI,CAACmI,WAAW,CAAC,IAAI,CAAC,IAAI,CAACoQ,mBAAmB,EAAE;UAClEvY,iBAAiB,CAAC,IAAI,CAACmI,WAAW,CAAC,GAC/B6E,OAAO,CAACC,KAAK,CAACkM,WAAW,CAAC/V,GAAG,EAAE8J,KAAK,CAAC,GAAG,IAAI,CAACkM,eAAe,CAACpM,OAAO,EAAE5J,GAAG,EAAE8J,KAAK,CAAC;QACzF,CAAC,MACI;UACD,IAAI,CAACoL,iBAAiB,CAACvL,iBAAiB,CAACC,OAAO,EAAE5J,GAAG,EAAE8J,KAAK,CAAC;QACjE;MACJ;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;EACIkM,eAAe,CAACpM,OAAO,EAAEM,SAAS,EAAE+L,UAAU,EAAE;IAC5C/L,SAAS,GAAGA,SAAS,CAAChM,OAAO,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC4M,WAAW,EAAE;IACvE;IACA,MAAMoL,QAAQ,GAAG,IAAI,CAACC,mBAAmB,CAACvM,OAAO,CAAC;IAClDsM,QAAQ,CAAChM,SAAS,CAAC,GAAG+L,UAAU,IAAI,EAAE;IACtC,IAAI,CAACG,oBAAoB,CAACxM,OAAO,EAAEsM,QAAQ,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;EACIT,eAAe,CAAC7L,OAAO,EAAEM,SAAS,EAAE;IAChC;IACA,MAAMgM,QAAQ,GAAG,IAAI,CAACC,mBAAmB,CAACvM,OAAO,CAAC;IAClD,OAAOsM,QAAQ,CAAChM,SAAS,CAAC,IAAI,EAAE;EACpC;EACA;AACJ;AACA;AACA;EACIiM,mBAAmB,CAACvM,OAAO,EAAE;IACzB;IACA,MAAMsM,QAAQ,GAAG,CAAC,CAAC;IACnB;IACA,MAAMG,cAAc,GAAGzM,OAAO,CAAC2L,YAAY,CAAC,OAAO,CAAC;IACpD,IAAIc,cAAc,EAAE;MAChB;MACA,MAAMC,SAAS,GAAGD,cAAc,CAACxV,KAAK,CAAC,KAAK,CAAC;MAC7C,KAAK,IAAIyP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgG,SAAS,CAAChW,MAAM,EAAEgQ,CAAC,EAAE,EAAE;QACvC;QACA,MAAMzG,KAAK,GAAGyM,SAAS,CAAChG,CAAC,CAAC,CAACb,IAAI,EAAE;QACjC,IAAI5F,KAAK,CAACvJ,MAAM,GAAG,CAAC,EAAE;UAClB;UACA,MAAMiW,UAAU,GAAG1M,KAAK,CAAC8J,OAAO,CAAC,GAAG,CAAC;UACrC,IAAI4C,UAAU,KAAK,CAAC,CAAC,EAAE;YACnB,MAAM,IAAIlI,KAAK,CAAE,sBAAqBxE,KAAM,EAAC,CAAC;UAClD;UACA;UACA,MAAMjJ,IAAI,GAAGiJ,KAAK,CAAC2M,MAAM,CAAC,CAAC,EAAED,UAAU,CAAC,CAAC9G,IAAI,EAAE;UAC/CyG,QAAQ,CAACtV,IAAI,CAAC,GAAGiJ,KAAK,CAAC2M,MAAM,CAACD,UAAU,GAAG,CAAC,CAAC,CAAC9G,IAAI,EAAE;QACxD;MACJ;IACJ;IACA,OAAOyG,QAAQ;EACnB;EACA;AACJ;AACA;AACA;AACA;EACIE,oBAAoB,CAACxM,OAAO,EAAEsM,QAAQ,EAAE;IACpC;IACA,IAAIO,cAAc,GAAG,EAAE;IACvB,KAAK,MAAMzW,GAAG,IAAIkW,QAAQ,EAAE;MACxB;MACA,MAAMQ,QAAQ,GAAGR,QAAQ,CAAClW,GAAG,CAAC;MAC9B,IAAI0W,QAAQ,EAAE;QACVD,cAAc,IAAIzW,GAAG,GAAG,GAAG,GAAGkW,QAAQ,CAAClW,GAAG,CAAC,GAAG,GAAG;MACrD;IACJ;IACA4J,OAAO,CAAC/C,YAAY,CAAC,OAAO,EAAE4P,cAAc,CAAC;EACjD;AACJ;AACAxB,UAAU,CAACvR,IAAI,GAAG,SAASiT,kBAAkB,CAAC/S,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIqR,UAAU,EAAEhY,MAAM,CAAC4G,QAAQ,CAAC4F,aAAa,EAAE,CAAC,CAAC,EAAExM,MAAM,CAAC4G,QAAQ,CAACwG,YAAY,EAAE,CAAC,CAAC,EAAEpN,MAAM,CAAC4G,QAAQ,CAAC5H,WAAW,CAAC,EAAEgB,MAAM,CAAC4G,QAAQ,CAAC5B,aAAa,CAAC,CAAC;AAAE,CAAC;AACrNgT,UAAU,CAACnR,KAAK,GAAG,aAAc7G,MAAM,CAAC8G,kBAAkB,CAAC;EAAEC,KAAK,EAAEiR,UAAU;EAAEvW,OAAO,EAAEuW,UAAU,CAACvR,IAAI;EAAEjF,UAAU,EAAE;AAAO,CAAC,CAAC;AAC/H;AACAwW,UAAU,CAAChR,cAAc,GAAG,MAAM,CAC9B;EAAEC,IAAI,EAAEuF,aAAa;EAAEtF,UAAU,EAAE,CAAC;IAAED,IAAI,EAAEzH;EAAS,CAAC;AAAE,CAAC,EACzD;EAAEyH,IAAI,EAAE0S,OAAO;EAAEzS,UAAU,EAAE,CAAC;IAAED,IAAI,EAAEzH;EAAS,CAAC,EAAE;IAAEyH,IAAI,EAAE7H,MAAM;IAAE+H,IAAI,EAAE,CAACiG,YAAY;EAAG,CAAC;AAAE,CAAC,EAC5F;EAAEnG,IAAI,EAAE3C,MAAM;EAAE4C,UAAU,EAAE,CAAC;IAAED,IAAI,EAAE7H,MAAM;IAAE+H,IAAI,EAAE,CAACnI,WAAW;EAAG,CAAC;AAAE,CAAC,EACtE;EAAEiI,IAAI,EAAEqD,SAAS;EAAEpD,UAAU,EAAE,CAAC;IAAED,IAAI,EAAE7H,MAAM;IAAE+H,IAAI,EAAE,CAACnC,aAAa;EAAG,CAAC;AAAE,CAAC,CAC9E;AACD;AAAmBgT,UAAU,CAAC5Q,eAAe,GAAG3H,gBAAgB,CAAC;EAAEgC,OAAO,EAAE,SAASiY,kBAAkB,GAAG;IAAE,OAAO,IAAI1B,UAAU,CAAC9Y,MAAM,CAACsN,aAAa,EAAE,CAAC,CAAC,EAAEtN,MAAM,CAACkO,YAAY,EAAE,CAAC,CAAC,EAAElO,MAAM,CAACF,WAAW,CAAC,EAAEE,MAAM,CAAC8F,aAAa,CAAC,CAAC;EAAE,CAAC;EAAE+B,KAAK,EAAEiR,UAAU;EAAExW,UAAU,EAAE;AAAO,CAAC,CAAC;AAC7Q,CAAC,YAAY;EAAE,CAAC,OAAO6F,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrH,MAAM,CAACsH,iBAAiB,CAAC0Q,UAAU,EAAE,CAAC;IAChG/Q,IAAI,EAAE9H,UAAU;IAChBgI,IAAI,EAAE,CAAC;MAAE3F,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEyF,IAAI,EAAEuF,aAAa;MAAEtF,UAAU,EAAE,CAAC;QAClDD,IAAI,EAAEzH;MACV,CAAC;IAAE,CAAC,EAAE;MAAEyH,IAAI,EAAE0S,OAAO;MAAEzS,UAAU,EAAE,CAAC;QAChCD,IAAI,EAAEzH;MACV,CAAC,EAAE;QACCyH,IAAI,EAAE7H,MAAM;QACZ+H,IAAI,EAAE,CAACiG,YAAY;MACvB,CAAC;IAAE,CAAC,EAAE;MAAEnG,IAAI,EAAE3C,MAAM;MAAE4C,UAAU,EAAE,CAAC;QAC/BD,IAAI,EAAE7H,MAAM;QACZ+H,IAAI,EAAE,CAACnI,WAAW;MACtB,CAAC;IAAE,CAAC,EAAE;MAAEiI,IAAI,EAAEqD,SAAS;MAAEpD,UAAU,EAAE,CAAC;QAClCD,IAAI,EAAE7H,MAAM;QACZ+H,IAAI,EAAE,CAACnC,aAAa;MACxB,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;AACjC;AACA,MAAMoT,cAAc,GAAG,OAAO;;AAE9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwB,aAAa,CAACC,KAAK,EAAEC,IAAI,GAAG,GAAG,EAAEC,MAAM,GAAG,GAAG,EAAE;EACpD;EACA,IAAIC,KAAK,GAAG,CAACF,IAAI,EAAEC,MAAM,EAAEF,KAAK,CAAC;EACjC;EACA,IAAII,CAAC,GAAGJ,KAAK,CAACnD,OAAO,CAAC,MAAM,CAAC;EAC7B,IAAIuD,CAAC,GAAG,CAAC,EAAE;IACPD,KAAK,CAAC,CAAC,CAAC,GAAGE,kBAAkB,CAACL,KAAK,CAACM,SAAS,CAACF,CAAC,CAAC,CAACzH,IAAI,EAAE,CAAC;IACxD;IACA,IAAIhL,OAAO,GAAGqS,KAAK,CAACN,MAAM,CAAC,CAAC,EAAEU,CAAC,CAAC,CAACzH,IAAI,EAAE,CAAC5O,KAAK,CAAC,GAAG,CAAC;IAClD,IAAI4D,OAAO,CAACnE,MAAM,IAAI,CAAC,EAAE;MACrB2W,KAAK,CAAC,CAAC,CAAC,GAAGxS,OAAO,CAAC,CAAC,CAAC;MACrBwS,KAAK,CAAC,CAAC,CAAC,GAAGxS,OAAO,CAAC,CAAC,CAAC;IACzB;EACJ,CAAC,MACI,IAAIyS,CAAC,IAAI,CAAC,EAAE;IACbD,KAAK,CAAC,CAAC,CAAC,GAAGE,kBAAkB,CAACL,KAAK,CAACrH,IAAI,EAAE,CAAC;EAC/C,CAAC,MACI;IACD;IACA,IAAIhL,OAAO,GAAGqS,KAAK,CAACjW,KAAK,CAAC,GAAG,CAAC;IAC9BoW,KAAK,GAAIxS,OAAO,CAACnE,MAAM,KAAK,CAAC,GAAImE,OAAO,GAAG,CACvCsS,IAAI,EAAEC,MAAM,EAAEF,KAAK,CACtB;EACL;EACA,OAAOG,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkB,CAACE,IAAI,EAAE;EAC9B,OAAOA,IAAI,CAACnZ,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC;AACnE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAShB,YAAY,EAAEiB,gBAAgB,EAAEV,UAAU,EAAEyL,UAAU,EAAE1E,WAAW,EAAEiF,aAAa,EAAE/H,cAAc,EAAEO,aAAa,EAAEoI,YAAY,EAAE7L,UAAU,EAAE+O,aAAa,EAAEuD,oBAAoB,EAAEnS,kBAAkB,EAAEC,mBAAmB,EAAEU,WAAW,EAAEC,uBAAuB,EAAEoD,kBAAkB,EAAET,WAAW,EAAE2C,UAAU,EAAEgN,cAAc,EAAEoB,kBAAkB,EAAEiB,sBAAsB,EAAEC,oBAAoB,EAAEC,gBAAgB,EAAEK,YAAY,EAAE7M,eAAe,EAAEC,YAAY,EAAEmB,uBAAuB,EAAEkC,UAAU,EAAEI,oBAAoB,EAAE2J,UAAU,EAAE4B,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}