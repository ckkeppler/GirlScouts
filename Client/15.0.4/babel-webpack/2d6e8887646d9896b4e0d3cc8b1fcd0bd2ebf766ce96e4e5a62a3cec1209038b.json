{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, Input, ViewEncapsulation, InjectionToken, inject, defineInjectable } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` + `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` + `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  /**\n   * @param {?} data\n   */\n  constructor(data) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!! /** @type {?} */data.nodeName) {\n      this.svgElement = /** @type {?} */data;\n    } else {\n      this.url = /** @type {?} */data;\n    }\n  }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n  /**\n   * @param {?} _httpClient\n   * @param {?} _sanitizer\n   * @param {?} document\n   */\n  constructor(_httpClient, _sanitizer, document) {\n    this._httpClient = _httpClient;\n    this._sanitizer = _sanitizer;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n    this._svgIconConfigs = new Map();\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n    this._iconSetConfigs = new Map();\n    /**\n     * Cache for icons loaded by direct URLs.\n     */\n    this._cachedIconsByUrl = new Map();\n    /**\n     * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n     */\n    this._inProgressUrlFetches = new Map();\n    /**\n     * Map from font identifiers to their CSS class names. Used for icon fonts.\n     */\n    this._fontCssClassesByAlias = new Map();\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n    this._defaultFontSetClass = 'material-icons';\n    this._document = document;\n  }\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} url\n   * @return {?}\n   */\n  addSvgIcon(iconName, url) {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} literal SVG source of the icon.\n   * @return {?}\n   */\n  addSvgIconLiteral(iconName, literal) {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param {?} namespace Namespace in which the icon should be registered.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} url\n   * @return {?}\n   */\n  addSvgIconInNamespace(namespace, iconName, url) {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param {?} namespace Namespace in which the icon should be registered.\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} literal SVG source of the icon.\n   * @return {?}\n   */\n  addSvgIconLiteralInNamespace(namespace, iconName, literal) {\n    /** @type {?} */\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n    /** @type {?} */\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param {?} url\n   * @return {?}\n   */\n  addSvgIconSet(url) {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param {?} literal SVG source of the icon set.\n   * @return {?}\n   */\n  addSvgIconSetLiteral(literal) {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param {?} namespace Namespace in which to register the icon set.\n   * @param {?} url\n   * @return {?}\n   */\n  addSvgIconSetInNamespace(namespace, url) {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param {?} namespace Namespace in which to register the icon set.\n   * @param {?} literal SVG source of the icon set.\n   * @return {?}\n   */\n  addSvgIconSetLiteralInNamespace(namespace, literal) {\n    /** @type {?} */\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n    /** @type {?} */\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param {?} alias Alias for the font.\n   * @param {?=} className Class name override to be used instead of the alias.\n   * @return {?}\n   */\n  registerFontClassAlias(alias, className = alias) {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   * @param {?} alias\n   * @return {?}\n   */\n  classNameForFontAlias(alias) {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param {?} className\n   * @return {?}\n   */\n  setDefaultFontSetClass(className) {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   * @return {?}\n   */\n  getDefaultFontSetClass() {\n    return this._defaultFontSetClass;\n  }\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param {?} safeUrl URL from which to fetch the SVG icon.\n   * @return {?}\n   */\n  getSvgIconFromUrl(safeUrl) {\n    /** @type {?} */\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n    /** @type {?} */\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n    if (cachedIcon) {\n      return of(cloneSvg(cachedIcon));\n    }\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(svg => this._cachedIconsByUrl.set( /** @type {?} */url, svg)), map(svg => cloneSvg(svg)));\n  }\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param {?} name Name of the icon to be retrieved.\n   * @param {?=} namespace Namespace in which to look for the icon.\n   * @return {?}\n   */\n  getNamedSvgIcon(name, namespace = '') {\n    /** @type {?} */\n    const key = iconKey(namespace, name);\n    /** @type {?} */\n    const config = this._svgIconConfigs.get(key);\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n    /** @type {?} */\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n    return throwError(getMatIconNameNotFoundError(key));\n  }\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   * @param {?} config\n   * @return {?}\n   */\n  _getSvgFromConfig(config) {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return of(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(tap(svg => config.svgElement = svg), map(svg => cloneSvg(svg)));\n    }\n  }\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   * @param {?} name\n   * @param {?} iconSetConfigs\n   * @return {?}\n   */\n  _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n    /** @type {?} */\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return of(namedIcon);\n    }\n    /** @type {?} */\n    const iconSetFetchRequests = iconSetConfigs.filter(iconSetConfig => !iconSetConfig.svgElement).map(iconSetConfig => {\n      return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(err => {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n        // Swallow errors fetching individual URLs so the\n        // combined Observable won't necessarily fail.\n        console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n        return of(null);\n      }));\n    });\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      /** @type {?} */\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n      return foundIcon;\n    }));\n  }\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   * @param {?} iconName\n   * @param {?} iconSetConfigs\n   * @return {?}\n   */\n  _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      /** @type {?} */\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        /** @type {?} */\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   * @param {?} config\n   * @return {?}\n   */\n  _loadSvgIconFromConfig(config) {\n    return this._fetchUrl(config.url).pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   * @param {?} config\n   * @return {?}\n   */\n  _loadSvgIconSetFromConfig(config) {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return of(config.svgElement);\n    }\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n      return config.svgElement;\n    }));\n  }\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   * @param {?} responseText\n   * @return {?}\n   */\n  _createSvgElementForSingleIcon(responseText) {\n    /** @type {?} */\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   * @param {?} iconSet\n   * @param {?} iconName\n   * @return {?}\n   */\n  _extractSvgIconFromSet(iconSet, iconName) {\n    /** @type {?} */\n    const iconSource = iconSet.querySelector('#' + iconName);\n    if (!iconSource) {\n      return null;\n    }\n    /** @type {?} */\n    const iconElement = /** @type {?} */iconSource.cloneNode(true);\n    iconElement.removeAttribute('id');\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */iconElement);\n    }\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n    /** @type {?} */\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n    return this._setSvgAttributes(svg);\n  }\n  /**\n   * Creates a DOM element from the given SVG string.\n   * @param {?} str\n   * @return {?}\n   */\n  _svgElementFromString(str) {\n    /** @type {?} */\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    /** @type {?} */\n    const svg = /** @type {?} */div.querySelector('svg');\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   * @param {?} element\n   * @return {?}\n   */\n  _toSvgElement(element) {\n    /** @type {?} */\n    let svg = this._svgElementFromString('<svg></svg>');\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n    return svg;\n  }\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   * @param {?} svg\n   * @return {?}\n   */\n  _setSvgAttributes(svg) {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   * @param {?} safeUrl\n   * @return {?}\n   */\n  _fetchUrl(safeUrl) {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n    /** @type {?} */\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n    /** @type {?} */\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n    /** @type {?} */\n    const req = this._httpClient.get(url, {\n      responseType: 'text'\n    }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param {?} namespace Namespace in which to register the icon config.\n   * @param {?} iconName Name under which to register the config.\n   * @param {?} config Config to be registered.\n   * @return {?}\n   */\n  _addSvgIconConfig(namespace, iconName, config) {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param {?} namespace Namespace in which to register the icon config.\n   * @param {?} config Config to be registered.\n   * @return {?}\n   */\n  _addSvgIconSetConfig(namespace, config) {\n    /** @type {?} */\n    const configNamespace = this._iconSetConfigs.get(namespace);\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n  return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n};\nMatIconRegistry.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MatIconRegistry,\n  factory: MatIconRegistry.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nMatIconRegistry.ctorParameters = () => [{\n  type: HttpClient,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: DomSanitizer\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\nMatIconRegistry.ngInjectableDef = defineInjectable({\n  factory: function MatIconRegistry_Factory() {\n    return new MatIconRegistry(inject(HttpClient, 8), inject(DomSanitizer), inject(DOCUMENT, 8));\n  },\n  token: MatIconRegistry,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), HttpClient], DomSanitizer, [new Optional(), /** @type {?} */DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n  return (/** @type {?} */svg.cloneNode(true)\n  );\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatIconBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/** @type {?} */\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/** *\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n  @type {?} */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n  /** @type {?} */\n  const _document = inject(DOCUMENT);\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _document && _document.location && _document.location.pathname || ''\n  };\n}\n/** *\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n  @type {?} */\nconst funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\nconst ɵ0 = attr => `[${attr}]`;\n/** *\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n  @type {?} */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** *\n * Regex that can be used to extract the id out of a FuncIRI.\n  @type {?} */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n  /**\n   * @param {?} elementRef\n   * @param {?} _iconRegistry\n   * @param {?} ariaHidden\n   * @param {?=} _location\n   */\n  constructor(elementRef, _iconRegistry, ariaHidden,\n  /**\n  * @deprecated `location` parameter to be made required.\n  * @breaking-change 8.0.0\n  */\n  _location) {\n    super(elementRef);\n    this._iconRegistry = _iconRegistry;\n    this._location = _location;\n    this._inline = false;\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   * @return {?}\n   */\n  get inline() {\n    return this._inline;\n  }\n  /**\n   * @param {?} inline\n   * @return {?}\n   */\n  set inline(inline) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  /**\n   * Font set that the icon is a part of.\n   * @return {?}\n   */\n  get fontSet() {\n    return this._fontSet;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set fontSet(value) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  /**\n   * Name of an icon within a font set.\n   * @return {?}\n   */\n  get fontIcon() {\n    return this._fontIcon;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set fontIcon(value) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   * @param {?} iconName\n   * @return {?}\n   */\n  _splitIconName(iconName) {\n    if (!iconName) {\n      return ['', ''];\n    }\n    /** @type {?} */\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        return ['', parts[0]];\n      // Use default namespace.\n      case 2:\n        return (/** @type {?} */parts\n        );\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes[\"svgIcon\"]) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(svg => this._setSvgElement(svg), err => console.log(`Error retrieving icon: ${err.message}`));\n      } else {\n        this._clearSvgElement();\n      }\n    }\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewChecked() {\n    /** @type {?} */\n    const cachedElements = this._elementsWithExternalReferences;\n    if (cachedElements && this._location && cachedElements.size) {\n      /** @type {?} */\n      const newPath = this._location.getPathname();\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _usingFontIcon() {\n    return !this.svgIcon;\n  }\n  /**\n   * @param {?} svg\n   * @return {?}\n   */\n  _setSvgElement(svg) {\n    this._clearSvgElement();\n    /** @type {?} */\n    const styleTags = /** @type {?} */svg.querySelectorAll('style');\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      /** @type {?} */\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n  /**\n   * @return {?}\n   */\n  _clearSvgElement() {\n    /** @type {?} */\n    const layoutElement = this._elementRef.nativeElement;\n    /** @type {?} */\n    let childCount = layoutElement.childNodes.length;\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      /** @type {?} */\n      const child = layoutElement.childNodes[childCount];\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    /** @type {?} */\n    const elem = this._elementRef.nativeElement;\n    /** @type {?} */\n    const fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   * @param {?} value\n   * @return {?}\n   */\n  _cleanupFontValue(value) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   * @param {?} path\n   * @return {?}\n   */\n  _prependPathToReferences(path) {\n    /** @type {?} */\n    const elements = this._elementsWithExternalReferences;\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   * @param {?} element\n   * @return {?}\n   */\n  _cacheChildrenWithExternalReferences(element) {\n    /** @type {?} */\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    /** @type {?} */\n    const elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        /** @type {?} */\n        const elementWithReference = elementsWithFuncIri[i];\n        /** @type {?} */\n        const value = elementWithReference.getAttribute(attr);\n        /** @type {?} */\n        const match = value ? value.match(funcIriPattern) : null;\n        if (match) {\n          /** @type {?} */\n          let attributes = elements.get(elementWithReference);\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          } /** @type {?} */\n          attributes.push({\n            name: attr,\n            value: match[1]\n          });\n        }\n      });\n    }\n  }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) {\n  return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION, 8));\n};\nMatIcon.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatIcon,\n  selectors: [[\"mat-icon\"]],\n  hostAttrs: [\"role\", \"img\", 1, \"mat-icon\"],\n  hostVars: 2,\n  hostBindings: function MatIcon_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    inline: \"inline\",\n    fontSet: \"fontSet\",\n    fontIcon: \"fontIcon\",\n    svgIcon: \"svgIcon\"\n  },\n  exportAs: [\"matIcon\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatIcon_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nMatIcon.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: MatIconRegistry\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['aria-hidden']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_ICON_LOCATION]\n  }]\n}];\nMatIcon.propDecorators = {\n  inline: [{\n    type: Input\n  }],\n  svgIcon: [{\n    type: Input\n  }],\n  fontSet: [{\n    type: Input\n  }],\n  fontIcon: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n    type: Component,\n    args: [{\n      template: '<ng-content></ng-content>',\n      selector: 'mat-icon',\n      exportAs: 'matIcon',\n      inputs: ['color'],\n      host: {\n        'role': 'img',\n        'class': 'mat-icon',\n        '[class.mat-icon-inline]': 'inline'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatIconRegistry\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['aria-hidden']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_ICON_LOCATION]\n      }]\n    }];\n  }, {\n    inline: [{\n      type: Input\n    }],\n    fontSet: [{\n      type: Input\n    }],\n    fontIcon: [{\n      type: Input\n    }],\n    svgIcon: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatIconModule {}\nMatIconModule.ɵfac = function MatIconModule_Factory(t) {\n  return new (t || MatIconModule)();\n};\nMatIconModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatIconModule\n});\nMatIconModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [MatCommonModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatIcon, MatCommonModule],\n      declarations: [MatIcon]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, {\n    declarations: function () {\n      return [MatIcon];\n    },\n    imports: function () {\n      return [MatCommonModule];\n    },\n    exports: function () {\n      return [MatIcon, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MatIconBase, _MatIconMixinBase, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER };","map":{"version":3,"names":["DOCUMENT","HttpClient","Inject","Injectable","Optional","SecurityContext","SkipSelf","NgModule","Attribute","ChangeDetectionStrategy","Component","ElementRef","Input","ViewEncapsulation","InjectionToken","inject","defineInjectable","DomSanitizer","forkJoin","of","throwError","catchError","finalize","map","share","tap","take","mixinColor","MatCommonModule","coerceBooleanProperty","ɵngcc0","ɵngcc1","ɵngcc2","_c0","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","constructor","data","nodeName","svgElement","MatIconRegistry","_httpClient","_sanitizer","document","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","HTML","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","className","set","classNameForFontAlias","get","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","getNamedSvgIcon","name","key","iconKey","config","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","console","error","message","foundIcon","i","length","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","toLowerCase","_toSvgElement","appendChild","str","div","createElement","innerHTML","element","childNodes","nodeType","ELEMENT_NODE","setAttribute","inProgressFetch","req","responseType","delete","configNamespace","push","ɵfac","MatIconRegistry_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","decorators","undefined","args","ngInjectableDef","ngDevMode","ɵsetClassMetadata","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","MatIconBase","_elementRef","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","getPathname","location","pathname","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_location","_inline","nativeElement","inline","fontSet","_fontSet","value","_cleanupFontValue","fontIcon","_fontIcon","_splitIconName","parts","split","ngOnChanges","changes","svgIcon","subscribe","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","ngOnDestroy","clear","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","elem","fontSetClass","_previousFontSetClass","classList","remove","add","_previousFontIconClass","trim","elements","forEach","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","MatIcon_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","ɵɵclassProp","inputs","color","exportAs","features","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","template","MatIcon_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","String","propDecorators","selector","host","None","OnPush","MatIconModule","MatIconModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/chriskeppler/Projects/Client/node_modules/@angular/material/__ivy_ngcc__/esm2015/icon.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, Input, ViewEncapsulation, InjectionToken, inject, defineInjectable } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n    /**\n     * @param {?} data\n     */\n    constructor(data) {\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!(/** @type {?} */ (data)).nodeName) {\n            this.svgElement = /** @type {?} */ (data);\n        }\n        else {\n            this.url = /** @type {?} */ (data);\n        }\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    /**\n     * @param {?} _httpClient\n     * @param {?} _sanitizer\n     * @param {?} document\n     */\n    constructor(_httpClient, _sanitizer, document) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /**\n         * Cache for icons loaded by direct URLs.\n         */\n        this._cachedIconsByUrl = new Map();\n        /**\n         * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n         */\n        this._inProgressUrlFetches = new Map();\n        /**\n         * Map from font identifiers to their CSS class names. Used for icon fonts.\n         */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n    addSvgIcon(iconName, url) {\n        return this.addSvgIconInNamespace('', iconName, url);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @return {?}\n     */\n    addSvgIconLiteral(iconName, literal) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {?}\n     */\n    addSvgIconInNamespace(namespace, iconName, url) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @return {?}\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal) {\n        /** @type {?} */\n        const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param {?} url\n     * @return {?}\n     */\n    addSvgIconSet(url) {\n        return this.addSvgIconSetInNamespace('', url);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param {?} literal SVG source of the icon set.\n     * @return {?}\n     */\n    addSvgIconSetLiteral(literal) {\n        return this.addSvgIconSetLiteralInNamespace('', literal);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @return {?}\n     */\n    addSvgIconSetInNamespace(namespace, url) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @return {?}\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal) {\n        /** @type {?} */\n        const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = this._svgElementFromString(sanitizedLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {?}\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param {?} className\n     * @return {?}\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    getSvgIconFromUrl(safeUrl) {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(svg => this._cachedIconsByUrl.set(/** @type {?} */ ((url)), svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        /** @type {?} */\n        const key = iconKey(namespace, name);\n        /** @type {?} */\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        /** @type {?} */\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @param {?} config\n     * @return {?}\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(tap(svg => config.svgElement = svg), map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        /** @type {?} */\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        /** @type {?} */\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgElement)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                /** @type {?} */\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            /** @type {?} */\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const config = iconSetConfigs[i];\n            if (config.svgElement) {\n                /** @type {?} */\n                const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchUrl(config.url)\n            .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconSetFromConfig(config) {\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n            return of(config.svgElement);\n        }\n        return this._fetchUrl(config.url).pipe(map(svgText => {\n            // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n            // only needs to occur if the cache is yet unset.\n            if (!config.svgElement) {\n                config.svgElement = this._svgElementFromString(svgText);\n            }\n            return config.svgElement;\n        }));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @param {?} responseText\n     * @return {?}\n     */\n    _createSvgElementForSingleIcon(responseText) {\n        /** @type {?} */\n        const svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg);\n        return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @return {?}\n     */\n    _extractSvgIconFromSet(iconSet, iconName) {\n        /** @type {?} */\n        const iconSource = iconSet.querySelector('#' + iconName);\n        if (!iconSource) {\n            return null;\n        }\n        /** @type {?} */\n        const iconElement = /** @type {?} */ (iconSource.cloneNode(true));\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(/** @type {?} */ (iconElement));\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement));\n        }\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @param {?} str\n     * @return {?}\n     */\n    _svgElementFromString(str) {\n        /** @type {?} */\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        /** @type {?} */\n        const svg = /** @type {?} */ (div.querySelector('svg'));\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @param {?} element\n     * @return {?}\n     */\n    _toSvgElement(element) {\n        /** @type {?} */\n        let svg = this._svgElementFromString('<svg></svg>');\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgAttributes(svg) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    _fetchUrl(safeUrl) {\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        /** @type {?} */\n        const req = this._httpClient.get(url, { responseType: 'text' }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {?}\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {?}\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        /** @type {?} */\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nMatIconRegistry.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatIconRegistry, factory: MatIconRegistry.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ MatIconRegistry.ngInjectableDef = defineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(inject(HttpClient, 8), inject(DomSanitizer), inject(DOCUMENT, 8)); }, token: MatIconRegistry, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n/** *\n * \\@docs-private\n  @type {?} */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        [new Optional(), /** @type {?} */ (DOCUMENT)],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return /** @type {?} */ (svg.cloneNode(true));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatIconBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/** *\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n  @type {?} */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n    };\n}\n/** *\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n  @type {?} */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** *\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n  @type {?} */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** *\n * Regex that can be used to extract the id out of a FuncIRI.\n  @type {?} */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} _location\n     */\n    constructor(elementRef, _iconRegistry, ariaHidden, /**\n           * @deprecated `location` parameter to be made required.\n           * @breaking-change 8.0.0\n           */\n    _location) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._inline = false;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     * @return {?}\n     */\n    get inline() {\n        return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n    get fontSet() { return this._fontSet; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n    get fontIcon() { return this._fontIcon; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @param {?} iconName\n     * @return {?}\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        /** @type {?} */\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return /** @type {?} */ (parts);\n            default: throw Error(`Invalid icon name: \"${iconName}\"`);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        if (changes[\"svgIcon\"]) {\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(svg => this._setSvgElement(svg), (err) => console.log(`Error retrieving icon: ${err.message}`));\n            }\n            else {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        /** @type {?} */\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && this._location && cachedElements.size) {\n            /** @type {?} */\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    /**\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        /** @type {?} */\n        const styleTags = /** @type {?} */ (svg.querySelectorAll('style'));\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        if (this._location) {\n            /** @type {?} */\n            const path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n        }\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @return {?}\n     */\n    _clearSvgElement() {\n        /** @type {?} */\n        const layoutElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            /** @type {?} */\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        /** @type {?} */\n        const elem = this._elementRef.nativeElement;\n        /** @type {?} */\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @param {?} value\n     * @return {?}\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @param {?} path\n     * @return {?}\n     */\n    _prependPathToReferences(path) {\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @param {?} element\n     * @return {?}\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        /** @type {?} */\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                /** @type {?} */\n                const elementWithReference = elementsWithFuncIri[i];\n                /** @type {?} */\n                const value = elementWithReference.getAttribute(attr);\n                /** @type {?} */\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    /** @type {?} */\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    } /** @type {?} */\n                    ((attributes)).push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION, 8)); };\nMatIcon.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\"], hostVars: 2, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline);\n    } }, inputs: { color: \"color\", inline: \"inline\", fontSet: \"fontSet\", fontIcon: \"fontIcon\", svgIcon: \"svgIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ICON_LOCATION,] }] }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                    'role': 'img',\n                    'class': 'mat-icon',\n                    '[class.mat-icon-inline]': 'inline'\n                }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }]; }, { inline: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = function MatIconModule_Factory(t) { return new (t || MatIconModule)(); };\nMatIconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MatIconBase, _MatIconMixinBase, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}